@ arm-none-eabi-as equates file for STM32WLE5_CM4
@ SVD2GAS Equates Generator, Copyright Terry Porter 2017 "terry@tjporter.com.au" for arm-none-eabi-as 
@ Matthias Koch Complimentary Edition 2017
@ Takes a CMSIS-SVD file plus a hand edited config.xml file as input 
@ Licensed under the GPL, see http://www.gnu.org/licenses/


@=========================== ADC ===========================@
.equ ADC_BASE, 0x40012400 @ (Analog to digital convertor) 
    .equ ADC_ISR, ADC_BASE + 0x0 @ (ADC interrupt and status register) 
        .equ ADC_ADRDY_Shift, 0   @ bitWidth 1 (ADRDY)  
        .equ ADC_EOSMP_Shift, 1   @ bitWidth 1 (EOSMP)  
        .equ ADC_EOC_Shift, 2   @ bitWidth 1 (EOC)  
        .equ ADC_EOS_Shift, 3   @ bitWidth 1 (EOS)  
        .equ ADC_OVR_Shift, 4   @ bitWidth 1 (OVR)  
        .equ ADC_AWD1_Shift, 7   @ bitWidth 1 (AWD1)  
        .equ ADC_AWD2_Shift, 8   @ bitWidth 1 (AWD2)  
        .equ ADC_AWD3_Shift, 9   @ bitWidth 1 (AWD3)  
        .equ ADC_EOCAL_Shift, 11   @ bitWidth 1 (EOCAL)  
        .equ ADC_CCRDY_Shift, 13   @ bitWidth 1 (CCRDY)  
 
    .equ ADC_IER, ADC_BASE + 0x4 @ (ADC interrupt enable register) 
        .equ ADC_ADRDYIE_Shift, 0   @ bitWidth 1 (ADRDYIE)  
        .equ ADC_EOSMPIE_Shift, 1   @ bitWidth 1 (EOSMPIE)  
        .equ ADC_EOCIE_Shift, 2   @ bitWidth 1 (EOCIE)  
        .equ ADC_EOSIE_Shift, 3   @ bitWidth 1 (EOSIE)  
        .equ ADC_OVRIE_Shift, 4   @ bitWidth 1 (OVRIE)  
        .equ ADC_AWD1IE_Shift, 7   @ bitWidth 1 (AWD1IE)  
        .equ ADC_AWD2IE_Shift, 8   @ bitWidth 1 (AWD2IE)  
        .equ ADC_AWD3IE_Shift, 9   @ bitWidth 1 (AWD3IE)  
        .equ ADC_EOCALIE_Shift, 11   @ bitWidth 1 (EOCALIE)  
        .equ ADC_CCRDYIE_Shift, 13   @ bitWidth 1 (CCRDYIE)  
 
    .equ ADC_CR, ADC_BASE + 0x8 @ (ADC control register) 
        .equ ADC_ADEN_Shift, 0   @ bitWidth 1 (ADEN)  
        .equ ADC_ADDIS_Shift, 1   @ bitWidth 1 (ADDIS)  
        .equ ADC_ADSTART_Shift, 2   @ bitWidth 1 (ADSTART)  
        .equ ADC_ADSTP_Shift, 4   @ bitWidth 1 (ADSTP)  
        .equ ADC_ADVREGEN_Shift, 28   @ bitWidth 1 (ADVREGEN)  
        .equ ADC_ADCAL_Shift, 31   @ bitWidth 1 (ADCAL)  
 
    .equ ADC_CFGR1, ADC_BASE + 0xC @ (ADC configuration register 1) 
        .equ ADC_DMAEN_Shift, 0   @ bitWidth 1 (DMAEN)  
        .equ ADC_DMACFG_Shift, 1   @ bitWidth 1 (DMACFG)  
        .equ ADC_SCANDIR_Shift, 2   @ bitWidth 1 (SCANDIR)  
        .equ ADC_RES_Shift, 3   @ bitWidth 2 (RES)  
        .equ ADC_ALIGN_Shift, 5   @ bitWidth 1 (ALIGN)  
        .equ ADC_EXTSEL_Shift, 6   @ bitWidth 3 (EXTSEL)  
        .equ ADC_EXTEN_Shift, 10   @ bitWidth 2 (EXTEN)  
        .equ ADC_OVRMOD_Shift, 12   @ bitWidth 1 (OVRMOD)  
        .equ ADC_CONT_Shift, 13   @ bitWidth 1 (CONT)  
        .equ ADC_WAIT_Shift, 14   @ bitWidth 1 (WAIT)  
        .equ ADC_AUTOFF_Shift, 15   @ bitWidth 1 (AUTOFF)  
        .equ ADC_DISCEN_Shift, 16   @ bitWidth 1 (DISCEN)  
        .equ ADC_CHSELRMOD_Shift, 21   @ bitWidth 1 (CHSELRMOD)  
        .equ ADC_AWD1SGL_Shift, 22   @ bitWidth 1 (AWD1SGL)  
        .equ ADC_AWD1EN_Shift, 23   @ bitWidth 1 (AWD1EN)  
        .equ ADC_AWD1CH_Shift, 26   @ bitWidth 5 (AWD1CH)  
 
    .equ ADC_CFGR2, ADC_BASE + 0x10 @ (ADC configuration register 2) 
        .equ ADC_OVSE_Shift, 0   @ bitWidth 1 (OVSE)  
        .equ ADC_OVSR0_Shift, 2   @ bitWidth 1 (OVSR0)  
        .equ ADC_OVSR1_Shift, 3   @ bitWidth 1 (OVSR1)  
        .equ ADC_OVSR2_Shift, 4   @ bitWidth 1 (OVSR2)  
        .equ ADC_OVSS0_Shift, 5   @ bitWidth 1 (OVSS0)  
        .equ ADC_OVSS1_Shift, 6   @ bitWidth 1 (OVSS1)  
        .equ ADC_OVSS2_Shift, 7   @ bitWidth 1 (OVSS2)  
        .equ ADC_OVSS3_Shift, 8   @ bitWidth 1 (OVSS3)  
        .equ ADC_TOVS_Shift, 9   @ bitWidth 1 (TOVS)  
        .equ ADC_LFTRIG_Shift, 29   @ bitWidth 1 (LFTRIG)  
        .equ ADC_CKMODE_Shift, 30   @ bitWidth 2 (CKMODE)  
 
    .equ ADC_SMPR, ADC_BASE + 0x14 @ (ADC sampling time register) 
        .equ ADC_SMP1_Shift, 0   @ bitWidth 3 (SMP1)  
        .equ ADC_SMP2_Shift, 4   @ bitWidth 3 (SMP2)  
        .equ ADC_SMPSEL_Shift, 8   @ bitWidth 18 (SMPSEL)  
 
    .equ ADC_AWD1TR, ADC_BASE + 0x20 @ (ADC watchdog threshold register) 
        .equ ADC_LT1_Shift, 0   @ bitWidth 12 (LT1)  
        .equ ADC_HT1_Shift, 16   @ bitWidth 12 (HT1)  
 
    .equ ADC_AWD2TR, ADC_BASE + 0x24 @ (ADC watchdog threshold register) 
        .equ ADC_LT2_Shift, 0   @ bitWidth 12 (LT2)  
        .equ ADC_HT2_Shift, 16   @ bitWidth 12 (HT2)  
 
    .equ ADC_CHSELR0, ADC_BASE + 0x28 @ (channel selection register) 
        .equ ADC_CHSEL_Shift, 0   @ bitWidth 18 (CHSEL)  
 
    .equ ADC_CHSELR1, ADC_BASE + 0x28 @ (channel selection register) 
        .equ ADC_SQ1_Shift, 0   @ bitWidth 4 (SQ1)  
        .equ ADC_SQ2_Shift, 4   @ bitWidth 4 (SQ2)  
        .equ ADC_SQ3_Shift, 8   @ bitWidth 4 (SQ3)  
        .equ ADC_SQ4_Shift, 12   @ bitWidth 4 (SQ4)  
        .equ ADC_SQ5_Shift, 16   @ bitWidth 4 (SQ5)  
        .equ ADC_SQ6_Shift, 20   @ bitWidth 4 (SQ6)  
        .equ ADC_SQ7_Shift, 24   @ bitWidth 4 (SQ7)  
        .equ ADC_SQ8_Shift, 28   @ bitWidth 4 (SQ8)  
 
    .equ ADC_AWD3TR, ADC_BASE + 0x2C @ (ADC watchdog threshold register) 
        .equ ADC_LT3_Shift, 0   @ bitWidth 12 (LT3)  
        .equ ADC_HT3_Shift, 16   @ bitWidth 12 (HT3)  
 
    .equ ADC_DR, ADC_BASE + 0x40 @ (ADC data register) 
        .equ ADC_DATA_Shift, 0   @ bitWidth 16 (DATA)  
 
    .equ ADC_AWD2CR, ADC_BASE + 0xA0 @ (ADC Analog Watchdog 2 Configuration register) 
        .equ ADC_AWD2CH_Shift, 0   @ bitWidth 18 (AWD2CH)  
 
    .equ ADC_AWD3CR, ADC_BASE + 0xA4 @ (ADC Analog Watchdog 3 Configuration register) 
        .equ ADC_AWD3CH_Shift, 0   @ bitWidth 18 (AWD3CH)  
 
    .equ ADC_CALFACT, ADC_BASE + 0xB4 @ (ADC Calibration factor) 
        .equ ADC_CALFACT_Shift, 0   @ bitWidth 7 (CALFACT)  
 
    .equ ADC_CCR, ADC_BASE + 0x308 @ (ADC common configuration register) 
        .equ ADC_PRESC0_Shift, 18   @ bitWidth 1 (PRESC0)  
        .equ ADC_PRESC1_Shift, 19   @ bitWidth 1 (PRESC1)  
        .equ ADC_PRESC2_Shift, 20   @ bitWidth 1 (PRESC2)  
        .equ ADC_PRESC3_Shift, 21   @ bitWidth 1 (PRESC3)  
        .equ ADC_VREFEN_Shift, 22   @ bitWidth 1 (VREFEN)  
        .equ ADC_TSEN_Shift, 23   @ bitWidth 1 (TSEN)  
        .equ ADC_VBATEN_Shift, 24   @ bitWidth 1 (VBATEN)  
 

@=========================== AES ===========================@
.equ AES_BASE, 0x58001800 @ (Advanced encryption standard hardware accelerator 1) 
    .equ AES_CR, AES_BASE + 0x0 @ (control register) 
        .equ AES_NPBLB_Shift, 20   @ bitWidth 4 (Number of padding bytes in last block of payload)  
        .equ AES_KEYSIZE_Shift, 18   @ bitWidth 1 (Key size selection)  
        .equ AES_CHMOD2_Shift, 16   @ bitWidth 1 (AES chaining mode Bit2)  
        .equ AES_GCMPH_Shift, 13   @ bitWidth 2 (Used only for GCM, CCM and GMAC algorithms and has no effect when other algorithms are selected)  
        .equ AES_DMAOUTEN_Shift, 12   @ bitWidth 1 (Enable DMA management of data output phase)  
        .equ AES_DMAINEN_Shift, 11   @ bitWidth 1 (Enable DMA management of data input phase)  
        .equ AES_ERRIE_Shift, 10   @ bitWidth 1 (Error interrupt enable)  
        .equ AES_CCFIE_Shift, 9   @ bitWidth 1 (CCF flag interrupt enable)  
        .equ AES_ERRC_Shift, 8   @ bitWidth 1 (Error clear)  
        .equ AES_CCFC_Shift, 7   @ bitWidth 1 (Computation Complete Flag Clear)  
        .equ AES_CHMOD10_Shift, 5   @ bitWidth 2 (AES chaining mode Bit1 Bit0)  
        .equ AES_MODE_Shift, 3   @ bitWidth 2 (AES operating mode)  
        .equ AES_DATATYPE_Shift, 1   @ bitWidth 2 (Data type selection for data in and data out to/from the cryptographic block)  
        .equ AES_EN_Shift, 0   @ bitWidth 1 (AES enable)  
 
    .equ AES_SR, AES_BASE + 0x4 @ (status register) 
        .equ AES_BUSY_Shift, 3   @ bitWidth 1 (Busy flag)  
        .equ AES_WRERR_Shift, 2   @ bitWidth 1 (Write error flag)  
        .equ AES_RDERR_Shift, 1   @ bitWidth 1 (Read error flag)  
        .equ AES_CCF_Shift, 0   @ bitWidth 1 (Computation complete flag)  
 
    .equ AES_DINR, AES_BASE + 0x8 @ (data input register) 
        .equ AES_AES_DINR_Shift, 0   @ bitWidth 32 (Data Input Register)  
 
    .equ AES_DOUTR, AES_BASE + 0xC @ (data output register) 
        .equ AES_AES_DOUTR_Shift, 0   @ bitWidth 32 (Data output register)  
 
    .equ AES_KEYR0, AES_BASE + 0x10 @ (key register 0) 
        .equ AES_AES_KEYR0_Shift, 0   @ bitWidth 32 (Data Output Register LSB key [31:0])  
 
    .equ AES_KEYR1, AES_BASE + 0x14 @ (key register 1) 
        .equ AES_AES_KEYR1_Shift, 0   @ bitWidth 32 (AES key register key [63:32])  
 
    .equ AES_KEYR2, AES_BASE + 0x18 @ (key register 2) 
        .equ AES_AES_KEYR2_Shift, 0   @ bitWidth 32 (AES key register key [95:64])  
 
    .equ AES_KEYR3, AES_BASE + 0x1C @ (key register 3) 
        .equ AES_AES_KEYR3_Shift, 0   @ bitWidth 32 (AES key register MSB key [127:96])  
 
    .equ AES_IVR0, AES_BASE + 0x20 @ (initialization vector register 0) 
        .equ AES_AES_IVR0_Shift, 0   @ bitWidth 32 (initialization vector register LSB IVR [31:0])  
 
    .equ AES_IVR1, AES_BASE + 0x24 @ (initialization vector register 1) 
        .equ AES_AES_IVR1_Shift, 0   @ bitWidth 32 (Initialization Vector Register IVR [63:32])  
 
    .equ AES_IVR2, AES_BASE + 0x28 @ (initialization vector register 2) 
        .equ AES_AES_IVR2_Shift, 0   @ bitWidth 32 (Initialization Vector Register IVR [95:64])  
 
    .equ AES_IVR3, AES_BASE + 0x2C @ (initialization vector register 3) 
        .equ AES_AES_IVR3_Shift, 0   @ bitWidth 32 (Initialization Vector Register MSB IVR [127:96])  
 
    .equ AES_KEYR4, AES_BASE + 0x30 @ (key register 4) 
        .equ AES_AES_KEYR4_Shift, 0   @ bitWidth 32 (AES key register MSB key [159:128])  
 
    .equ AES_KEYR5, AES_BASE + 0x34 @ (key register 5) 
        .equ AES_AES_KEYR5_Shift, 0   @ bitWidth 32 (AES key register MSB key [191:160])  
 
    .equ AES_KEYR6, AES_BASE + 0x38 @ (key register 6) 
        .equ AES_AES_KEYR6_Shift, 0   @ bitWidth 32 (AES key register MSB key [223:192])  
 
    .equ AES_KEYR7, AES_BASE + 0x3C @ (key register 7) 
        .equ AES_AES_KEYR7_Shift, 0   @ bitWidth 32 (AES key register MSB key [255:224])  
 
    .equ AES_SUSP0R, AES_BASE + 0x40 @ (AES suspend register 0) 
        .equ AES_AES_SUSP0R_Shift, 0   @ bitWidth 32 (AES suspend register 0)  
 
    .equ AES_SUSP1R, AES_BASE + 0x44 @ (AES suspend register 1) 
        .equ AES_AES_SUSP1R_Shift, 0   @ bitWidth 32 (AES suspend register 1)  
 
    .equ AES_SUSP2R, AES_BASE + 0x48 @ (AES suspend register 2) 
        .equ AES_AES_SUSP2R_Shift, 0   @ bitWidth 32 (AES suspend register 2)  
 
    .equ AES_SUSP3R, AES_BASE + 0x4C @ (AES suspend register 3) 
        .equ AES_AES_SUSP3R_Shift, 0   @ bitWidth 32 (AES suspend register 3)  
 
    .equ AES_SUSP4R, AES_BASE + 0x50 @ (AES suspend register 4) 
        .equ AES_AES_SUSP4R_Shift, 0   @ bitWidth 32 (AES suspend register 4)  
 
    .equ AES_SUSP5R, AES_BASE + 0x54 @ (AES suspend register 5) 
        .equ AES_AES_SUSP5R_Shift, 0   @ bitWidth 32 (AES suspend register 5)  
 
    .equ AES_SUSP6R, AES_BASE + 0x58 @ (AES suspend register 6) 
        .equ AES_AES_SUSP6R_Shift, 0   @ bitWidth 32 (AES suspend register 6)  
 
    .equ AES_SUSP7R, AES_BASE + 0x5C @ (AES suspend register 7) 
        .equ AES_AES_SUSP7R_Shift, 0   @ bitWidth 32 (AES suspend register 7)  
 

@=========================== COMP ===========================@
.equ COMP_BASE, 0x40010200 @ (Comparator) 
    .equ COMP_COMP1_CSR, COMP_BASE + 0x0 @ (COMP1_CSR) 
        .equ COMP_LOCK_Shift, 31   @ bitWidth 1 (COMP1_CSR register lock bit)  
        .equ COMP_VALUE_Shift, 30   @ bitWidth 1 (Comparator 1 output status bit)  
        .equ COMP_INMESEL_Shift, 25   @ bitWidth 2 (comparator 1 input minus extended selection bits.)  
        .equ COMP_SCALEN_Shift, 23   @ bitWidth 1 (Voltage scaler enable bit)  
        .equ COMP_BRGEN_Shift, 22   @ bitWidth 1 (Scaler bridge enable)  
        .equ COMP_BLANKING_Shift, 18   @ bitWidth 3 (Comparator 1 blanking source selection bits)  
        .equ COMP_HYST_Shift, 16   @ bitWidth 2 (Comparator 1 hysteresis selection bits)  
        .equ COMP_POLARITY_Shift, 15   @ bitWidth 1 (Comparator 1 polarity selection bit)  
        .equ COMP_INPSEL_Shift, 7   @ bitWidth 2 (Comparator1 input plus selection bit)  
        .equ COMP_INMSEL_Shift, 4   @ bitWidth 3 (Comparator 1 input minus selection bits)  
        .equ COMP_PWRMODE_Shift, 2   @ bitWidth 2 (Power Mode of the comparator 1)  
        .equ COMP_EN_Shift, 0   @ bitWidth 1 (Comparator 1 enable bit)  
 
    .equ COMP_COMP2_CSR, COMP_BASE + 0x4 @ (COMP2_CSR) 
        .equ COMP_LOCK_Shift, 31   @ bitWidth 1 (CSR register lock bit)  
        .equ COMP_VALUE_Shift, 30   @ bitWidth 1 (Comparator 2 output status bit)  
        .equ COMP_INMESEL_Shift, 25   @ bitWidth 2 (comparator 2 input minus extended selection bits.)  
        .equ COMP_SCALEN_Shift, 23   @ bitWidth 1 (Voltage scaler enable bit)  
        .equ COMP_BRGEN_Shift, 22   @ bitWidth 1 (Scaler bridge enable)  
        .equ COMP_BLANKING_Shift, 18   @ bitWidth 3 (Comparator 2 blanking source selection bits)  
        .equ COMP_HYST_Shift, 16   @ bitWidth 2 (Comparator 2 hysteresis selection bits)  
        .equ COMP_POLARITY_Shift, 15   @ bitWidth 1 (Comparator 2 polarity selection bit)  
        .equ COMP_WINMODE_Shift, 9   @ bitWidth 1 (Windows mode selection bit)  
        .equ COMP_INPSEL_Shift, 7   @ bitWidth 2 (Comparator 1 input plus selection bit)  
        .equ COMP_INMSEL_Shift, 4   @ bitWidth 3 (Comparator 2 input minus selection bits)  
        .equ COMP_PWRMODE_Shift, 2   @ bitWidth 2 (Power Mode of the comparator 2)  
        .equ COMP_EN_Shift, 0   @ bitWidth 1 (Comparator 2 enable bit)  
 

@=========================== CRC ===========================@
.equ CRC_BASE, 0x40023000 @ (Cyclic redundancy check calculation unit) 
    .equ CRC_DR, CRC_BASE + 0x0 @ (Data register) 
        .equ CRC_DR_Shift, 0   @ bitWidth 32 (Data register bits)  
 
    .equ CRC_IDR, CRC_BASE + 0x4 @ (Independent data register) 
        .equ CRC_IDR_Shift, 0   @ bitWidth 32 (General-purpose 32-bit data register bits)  
 
    .equ CRC_CR, CRC_BASE + 0x8 @ (Control register) 
        .equ CRC_REV_OUT_Shift, 7   @ bitWidth 1 (Reverse output data)  
        .equ CRC_REV_IN_Shift, 5   @ bitWidth 2 (Reverse input data)  
        .equ CRC_POLYSIZE_Shift, 3   @ bitWidth 2 (Polynomial size)  
        .equ CRC_RESET_Shift, 0   @ bitWidth 1 (RESET bit)  
 
    .equ CRC_INIT, CRC_BASE + 0x10 @ (Initial CRC value) 
        .equ CRC_CRC_INIT_Shift, 0   @ bitWidth 32 (Programmable initial CRC value)  
 
    .equ CRC_POL, CRC_BASE + 0x14 @ (polynomial) 
        .equ CRC_POL_Shift, 0   @ bitWidth 32 (Programmable polynomial)  
 

@=========================== DAC ===========================@
.equ DAC_BASE, 0x40007400 @ (Digital-to-analog converter) 
    .equ DAC_CR, DAC_BASE + 0x0 @ (control register) 
        .equ DAC_CEN1_Shift, 14   @ bitWidth 1 (DAC Channel 1 calibration enable)  
        .equ DAC_DMAUDRIE1_Shift, 13   @ bitWidth 1 (DAC channel1 DMA Underrun Interrupt enable)  
        .equ DAC_DMAEN1_Shift, 12   @ bitWidth 1 (DAC channel1 DMA enable)  
        .equ DAC_MAMP1_Shift, 8   @ bitWidth 4 (DAC channel1 mask/amplitude selector)  
        .equ DAC_WAVE1_Shift, 6   @ bitWidth 2 (DAC channel1 noise/triangle wave generation enable)  
        .equ DAC_TSEL13_Shift, 5   @ bitWidth 1 (DAC channel1 trigger selection)  
        .equ DAC_TSEL12_Shift, 4   @ bitWidth 1 (TSEL12)  
        .equ DAC_TSEL11_Shift, 3   @ bitWidth 1 (TSEL11)  
        .equ DAC_TSEL10_Shift, 2   @ bitWidth 1 (TSEL10)  
        .equ DAC_TEN1_Shift, 1   @ bitWidth 1 (DAC channel1 trigger enable)  
        .equ DAC_EN1_Shift, 0   @ bitWidth 1 (DAC channel1 enable)  
 
    .equ DAC_SWTRGR, DAC_BASE + 0x4 @ (software trigger register) 
        .equ DAC_SWTRIG1_Shift, 0   @ bitWidth 1 (DAC channel1 software trigger)  
 
    .equ DAC_DHR12R1, DAC_BASE + 0x8 @ (channel1 12-bit right-aligned data holding register) 
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned data)  
 
    .equ DAC_DHR12L1, DAC_BASE + 0xC @ (channel1 12-bit left aligned data holding register) 
        .equ DAC_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned data)  
 
    .equ DAC_DHR8R1, DAC_BASE + 0x10 @ (channel1 8-bit right aligned data holding register) 
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned data)  
 
    .equ DAC_DHR12RD, DAC_BASE + 0x20 @ (Dual DAC 12-bit right-aligned data holding register) 
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned data)  
 
    .equ DAC_DHR12LD, DAC_BASE + 0x24 @ (Dual DAC 12-bit left aligned data holding register) 
        .equ DAC_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned data)  
 
    .equ DAC_DHR8RD, DAC_BASE + 0x28 @ (Dual DAC 8-bit right aligned data holding register) 
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned data)  
 
    .equ DAC_DOR1, DAC_BASE + 0x2C @ (DAC channel1 data output register) 
        .equ DAC_DACC1DOR_Shift, 0   @ bitWidth 12 (DACC1DOR)  
 
    .equ DAC_SR, DAC_BASE + 0x34 @ (status register) 
        .equ DAC_BWST1_Shift, 15   @ bitWidth 1 (DAC Channel 1 busy writing sample time flag)  
        .equ DAC_CAL_FLAG1_Shift, 14   @ bitWidth 1 (DAC Channel 1 calibration offset status)  
        .equ DAC_DMAUDR1_Shift, 13   @ bitWidth 1 (DAC channel1 DMA underrun flag)  
 
    .equ DAC_CCR, DAC_BASE + 0x38 @ (calibration control register) 
        .equ DAC_OTRIM1_Shift, 0   @ bitWidth 5 (DAC Channel 1 offset trimming value)  
 
    .equ DAC_MCR, DAC_BASE + 0x3C @ (mode control register) 
        .equ DAC_MODE1_Shift, 0   @ bitWidth 3 (DAC Channel 1 mode)  
 
    .equ DAC_SHSR1, DAC_BASE + 0x40 @ (Sample and Hold sample time register 1) 
        .equ DAC_TSAMPLE1_Shift, 0   @ bitWidth 10 (DAC Channel 1 sample Time only valid in Sample and Hold mode)  
 
    .equ DAC_SHHR, DAC_BASE + 0x48 @ (Sample and Hold hold time register) 
        .equ DAC_THOLD1_Shift, 0   @ bitWidth 10 (DAC Channel 1 hold Time only valid in Sample and Hold mode)  
 
    .equ DAC_SHRR, DAC_BASE + 0x4C @ (Sample and Hold refresh time register) 
        .equ DAC_TREFRESH1_Shift, 0   @ bitWidth 8 (DAC Channel 1 refresh Time only valid in Sample and Hold mode)  
 

@=========================== DBGMCU ===========================@
.equ DBGMCU_BASE, 0xE0042000 @ (Microcontroller Debug Unit) 
    .equ DBGMCU_IDCODER, DBGMCU_BASE + 0x0 @ (DBGMCU Identity Code Register) 
        .equ DBGMCU_DEV_ID_Shift, 0   @ bitWidth 12 (Device ID)  
        .equ DBGMCU_REV_ID_Shift, 16   @ bitWidth 16 (Revision)  
 
    .equ DBGMCU_CR, DBGMCU_BASE + 0x4 @ (DBGMCU Configuration Register) 
        .equ DBGMCU_DBG_SLEEP_Shift, 0   @ bitWidth 1 (Allow debug in SLEEP mode)  
        .equ DBGMCU_DBG_STOP_Shift, 1   @ bitWidth 1 (Allow debug in STOP mode)  
        .equ DBGMCU_DBG_STANDBY_Shift, 2   @ bitWidth 1 (Allow debug in STANDBY mode)  
 
    .equ DBGMCU_APB1FZR1, DBGMCU_BASE + 0x3C @ (DBGMCU CPU1 APB1 Peripheral Freeze Register 1) 
        .equ DBGMCU_DBG_TIM2_STOP_Shift, 0   @ bitWidth 1 (TIM2 stop in CPU1 debug)  
        .equ DBGMCU_DBG_RTC_STOP_Shift, 10   @ bitWidth 1 (RTC stop in CPU1 debug)  
        .equ DBGMCU_DBG_WWDG_STOP_Shift, 11   @ bitWidth 1 (WWDG stop in CPU1 debug)  
        .equ DBGMCU_DBG_IWDG_STOP_Shift, 12   @ bitWidth 1 (IWDG stop in CPU1 debug)  
        .equ DBGMCU_DBG_I2C1_STOP_Shift, 21   @ bitWidth 1 (I2C1 SMBUS timeout stop in CPU1 debug)  
        .equ DBGMCU_DBG_I2C2_STOP_Shift, 22   @ bitWidth 1 (I2C2 SMBUS timeout stop in CPU1 debug)  
        .equ DBGMCU_DBG_I2C3_STOP_Shift, 23   @ bitWidth 1 (I2C3 SMBUS timeout stop in CPU1 debug)  
        .equ DBGMCU_DBG_LPTIM1_STOP_Shift, 31   @ bitWidth 1 (LPTIM1 stop in CPU1 debug)  
 
    .equ DBGMCU_APB1FZR2, DBGMCU_BASE + 0x44 @ (DBGMCU CPU1 APB1 Peripheral Freeze Register 2) 
        .equ DBGMCU_DBG_LPTIM2_STOP_Shift, 5   @ bitWidth 1 (DBG_LPTIM2_STOP)  
        .equ DBGMCU_DBG_LPTIM3_STOP_Shift, 6   @ bitWidth 1 (DBG_LPTIM3_STOP)  
 
    .equ DBGMCU_APB2FZR, DBGMCU_BASE + 0x4C @ (DBGMCU CPU1 APB2 Peripheral Freeze Register) 
        .equ DBGMCU_DBG_TIM1_STOP_Shift, 11   @ bitWidth 1 (DBG_TIM1_STOP)  
        .equ DBGMCU_DBG_TIM16_STOP_Shift, 17   @ bitWidth 1 (DBG_TIM16_STOP)  
        .equ DBGMCU_DBG_TIM17_STOP_Shift, 18   @ bitWidth 1 (DBG_TIM17_STOP)  
 

@=========================== DMA1 ===========================@
.equ DMA1_BASE, 0x40020000 @ (Direct memory access controller) 
    .equ DMA1_ISR, DMA1_BASE + 0x0 @ (interrupt status register) 
        .equ DMA1_TEIF7_Shift, 27   @ bitWidth 1 (transfer error TE flag for channel 7)  
        .equ DMA1_HTIF7_Shift, 26   @ bitWidth 1 (half transfer HT flag for channel 7)  
        .equ DMA1_TCIF7_Shift, 25   @ bitWidth 1 (transfer complete TC flag for channel 7)  
        .equ DMA1_GIF7_Shift, 24   @ bitWidth 1 (global interrupt flag for channel 7)  
        .equ DMA1_TEIF6_Shift, 23   @ bitWidth 1 (transfer error TE flag for channel 6)  
        .equ DMA1_HTIF6_Shift, 22   @ bitWidth 1 (half transfer HT flag for channel 6)  
        .equ DMA1_TCIF6_Shift, 21   @ bitWidth 1 (transfer complete TC flag for channel 6)  
        .equ DMA1_GIF6_Shift, 20   @ bitWidth 1 (global interrupt flag for channel 6)  
        .equ DMA1_TEIF5_Shift, 19   @ bitWidth 1 (transfer error TE flag for channel 5)  
        .equ DMA1_HTIF5_Shift, 18   @ bitWidth 1 (half transfer HT flag for channel 5)  
        .equ DMA1_TCIF5_Shift, 17   @ bitWidth 1 (transfer complete TC flag for channel 5)  
        .equ DMA1_GIF5_Shift, 16   @ bitWidth 1 (global interrupt flag for channel 5)  
        .equ DMA1_TEIF4_Shift, 15   @ bitWidth 1 (transfer error TE flag for channel 4)  
        .equ DMA1_HTIF4_Shift, 14   @ bitWidth 1 (half transfer HT flag for channel 4)  
        .equ DMA1_TCIF4_Shift, 13   @ bitWidth 1 (transfer complete TC flag for channel 4)  
        .equ DMA1_GIF4_Shift, 12   @ bitWidth 1 (global interrupt flag for channel 4)  
        .equ DMA1_TEIF3_Shift, 11   @ bitWidth 1 (transfer error TE flag for channel 3)  
        .equ DMA1_HTIF3_Shift, 10   @ bitWidth 1 (half transfer HT flag for channel 3)  
        .equ DMA1_TCIF3_Shift, 9   @ bitWidth 1 (transfer complete TC flag for channel 3)  
        .equ DMA1_GIF3_Shift, 8   @ bitWidth 1 (global interrupt flag for channel 3)  
        .equ DMA1_TEIF2_Shift, 7   @ bitWidth 1 (transfer error TE flag for channel 2)  
        .equ DMA1_HTIF2_Shift, 6   @ bitWidth 1 (half transfer HT flag for channel 2)  
        .equ DMA1_TCIF2_Shift, 5   @ bitWidth 1 (transfer complete TC flag for channel 2)  
        .equ DMA1_GIF2_Shift, 4   @ bitWidth 1 (global interrupt flag for channel 2)  
        .equ DMA1_TEIF1_Shift, 3   @ bitWidth 1 (transfer error TE flag for channel 1)  
        .equ DMA1_HTIF1_Shift, 2   @ bitWidth 1 (half transfer HT flag for channel 1)  
        .equ DMA1_TCIF1_Shift, 1   @ bitWidth 1 (transfer complete TC flag for channel 1)  
        .equ DMA1_GIF1_Shift, 0   @ bitWidth 1 (global interrupt flag for channel 1)  
 
    .equ DMA1_IFCR, DMA1_BASE + 0x4 @ (interrupt flag clear register) 
        .equ DMA1_TEIF7_Shift, 27   @ bitWidth 1 (transfer error flag clear for channel 7)  
        .equ DMA1_HTIF7_Shift, 26   @ bitWidth 1 (half transfer flag clear for channel 7)  
        .equ DMA1_TCIF7_Shift, 25   @ bitWidth 1 (transfer complete flag clear for channel 7)  
        .equ DMA1_GIF7_Shift, 24   @ bitWidth 1 (global interrupt flag clear for channel 7)  
        .equ DMA1_TEIF6_Shift, 23   @ bitWidth 1 (transfer error flag clear for channel 6)  
        .equ DMA1_HTIF6_Shift, 22   @ bitWidth 1 (half transfer flag clear for channel 6)  
        .equ DMA1_TCIF6_Shift, 21   @ bitWidth 1 (transfer complete flag clear for channel 6)  
        .equ DMA1_GIF6_Shift, 20   @ bitWidth 1 (global interrupt flag clear for channel 6)  
        .equ DMA1_TEIF5_Shift, 19   @ bitWidth 1 (transfer error flag clear for channel 5)  
        .equ DMA1_HTIF5_Shift, 18   @ bitWidth 1 (half transfer flag clear for channel 5)  
        .equ DMA1_TCIF5_Shift, 17   @ bitWidth 1 (transfer complete flag clear for channel 5)  
        .equ DMA1_GIF5_Shift, 16   @ bitWidth 1 (global interrupt flag clear for channel 5)  
        .equ DMA1_TEIF4_Shift, 15   @ bitWidth 1 (transfer error flag clear for channel 4)  
        .equ DMA1_HTIF4_Shift, 14   @ bitWidth 1 (half transfer flag clear for channel 4)  
        .equ DMA1_TCIF4_Shift, 13   @ bitWidth 1 (transfer complete flag clear for channel 4)  
        .equ DMA1_GIF4_Shift, 12   @ bitWidth 1 (global interrupt flag clear for channel 4)  
        .equ DMA1_TEIF3_Shift, 11   @ bitWidth 1 (transfer error flag clear for channel 3)  
        .equ DMA1_HTIF3_Shift, 10   @ bitWidth 1 (half transfer flag clear for channel 3)  
        .equ DMA1_TCIF3_Shift, 9   @ bitWidth 1 (transfer complete flag clear for channel 3)  
        .equ DMA1_GIF3_Shift, 8   @ bitWidth 1 (global interrupt flag clear for channel 3)  
        .equ DMA1_TEIF2_Shift, 7   @ bitWidth 1 (transfer error flag clear for channel 2)  
        .equ DMA1_HTIF2_Shift, 6   @ bitWidth 1 (half transfer flag clear for channel 2)  
        .equ DMA1_TCIF2_Shift, 5   @ bitWidth 1 (transfer complete flag clear for channel 2)  
        .equ DMA1_GIF2_Shift, 4   @ bitWidth 1 (global interrupt flag clear for channel 2)  
        .equ DMA1_TEIF1_Shift, 3   @ bitWidth 1 (transfer error flag clear for channel 1)  
        .equ DMA1_HTIF1_Shift, 2   @ bitWidth 1 (half transfer flag clear for channel 1)  
        .equ DMA1_TCIF1_Shift, 1   @ bitWidth 1 (transfer complete flag clear for channel 1)  
        .equ DMA1_GIF1_Shift, 0   @ bitWidth 1 (global interrupt flag clear for channel 1)  
 
    .equ DMA1_CCR1, DMA1_BASE + 0x8 @ (channel x configuration register) 
        .equ DMA1_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA1_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA1_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA1_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA1_CNDTR1, DMA1_BASE + 0xC @ (channel x number of data to transfer register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA1_CPAR1, DMA1_BASE + 0x10 @ (channel x peripheral address register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CMAR1, DMA1_BASE + 0x14 @ (channel x memory address register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CCR2, DMA1_BASE + 0x1C @ (channel x configuration register) 
        .equ DMA1_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA1_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA1_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA1_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA1_CNDTR2, DMA1_BASE + 0x20 @ (channel x number of data to transfer register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA1_CPAR2, DMA1_BASE + 0x24 @ (channel x peripheral address register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CMAR2, DMA1_BASE + 0x28 @ (channel x memory address register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CCR3, DMA1_BASE + 0x30 @ (channel x configuration register) 
        .equ DMA1_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA1_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA1_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA1_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA1_CNDTR3, DMA1_BASE + 0x34 @ (channel x number of data to transfer register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA1_CPAR3, DMA1_BASE + 0x38 @ (channel x peripheral address register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CMAR3, DMA1_BASE + 0x3C @ (channel x memory address register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CCR4, DMA1_BASE + 0x44 @ (channel x configuration register) 
        .equ DMA1_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA1_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA1_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA1_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA1_CNDTR4, DMA1_BASE + 0x48 @ (channel x number of data to transfer register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA1_CPAR4, DMA1_BASE + 0x4C @ (channel x peripheral address register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CMAR4, DMA1_BASE + 0x50 @ (channel x memory address register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CCR5, DMA1_BASE + 0x58 @ (channel x configuration register) 
        .equ DMA1_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA1_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA1_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA1_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA1_CNDTR5, DMA1_BASE + 0x5C @ (channel x number of data to transfer register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA1_CPAR5, DMA1_BASE + 0x60 @ (channel x peripheral address register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CMAR5, DMA1_BASE + 0x64 @ (channel x memory address register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CCR6, DMA1_BASE + 0x6C @ (channel x configuration register) 
        .equ DMA1_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA1_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA1_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA1_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA1_CNDTR6, DMA1_BASE + 0x70 @ (channel x number of data to transfer register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA1_CPAR6, DMA1_BASE + 0x74 @ (channel x peripheral address register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CMAR6, DMA1_BASE + 0x78 @ (channel x memory address register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CCR7, DMA1_BASE + 0x80 @ (channel x configuration register) 
        .equ DMA1_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA1_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA1_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA1_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA1_CNDTR7, DMA1_BASE + 0x84 @ (channel x number of data to transfer register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA1_CPAR7, DMA1_BASE + 0x88 @ (channel x peripheral address register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA1_CMAR7, DMA1_BASE + 0x8C @ (channel x memory address register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 

@=========================== DMA2 ===========================@
.equ DMA2_BASE, 0x40020400 @ (Direct memory access controller) 
    .equ DMA2_ISR, DMA2_BASE + 0x0 @ (interrupt status register) 
        .equ DMA2_TEIF7_Shift, 27   @ bitWidth 1 (transfer error TE flag for channel 7)  
        .equ DMA2_HTIF7_Shift, 26   @ bitWidth 1 (half transfer HT flag for channel 7)  
        .equ DMA2_TCIF7_Shift, 25   @ bitWidth 1 (transfer complete TC flag for channel 7)  
        .equ DMA2_GIF7_Shift, 24   @ bitWidth 1 (global interrupt flag for channel 7)  
        .equ DMA2_TEIF6_Shift, 23   @ bitWidth 1 (transfer error TE flag for channel 6)  
        .equ DMA2_HTIF6_Shift, 22   @ bitWidth 1 (half transfer HT flag for channel 6)  
        .equ DMA2_TCIF6_Shift, 21   @ bitWidth 1 (transfer complete TC flag for channel 6)  
        .equ DMA2_GIF6_Shift, 20   @ bitWidth 1 (global interrupt flag for channel 6)  
        .equ DMA2_TEIF5_Shift, 19   @ bitWidth 1 (transfer error TE flag for channel 5)  
        .equ DMA2_HTIF5_Shift, 18   @ bitWidth 1 (half transfer HT flag for channel 5)  
        .equ DMA2_TCIF5_Shift, 17   @ bitWidth 1 (transfer complete TC flag for channel 5)  
        .equ DMA2_GIF5_Shift, 16   @ bitWidth 1 (global interrupt flag for channel 5)  
        .equ DMA2_TEIF4_Shift, 15   @ bitWidth 1 (transfer error TE flag for channel 4)  
        .equ DMA2_HTIF4_Shift, 14   @ bitWidth 1 (half transfer HT flag for channel 4)  
        .equ DMA2_TCIF4_Shift, 13   @ bitWidth 1 (transfer complete TC flag for channel 4)  
        .equ DMA2_GIF4_Shift, 12   @ bitWidth 1 (global interrupt flag for channel 4)  
        .equ DMA2_TEIF3_Shift, 11   @ bitWidth 1 (transfer error TE flag for channel 3)  
        .equ DMA2_HTIF3_Shift, 10   @ bitWidth 1 (half transfer HT flag for channel 3)  
        .equ DMA2_TCIF3_Shift, 9   @ bitWidth 1 (transfer complete TC flag for channel 3)  
        .equ DMA2_GIF3_Shift, 8   @ bitWidth 1 (global interrupt flag for channel 3)  
        .equ DMA2_TEIF2_Shift, 7   @ bitWidth 1 (transfer error TE flag for channel 2)  
        .equ DMA2_HTIF2_Shift, 6   @ bitWidth 1 (half transfer HT flag for channel 2)  
        .equ DMA2_TCIF2_Shift, 5   @ bitWidth 1 (transfer complete TC flag for channel 2)  
        .equ DMA2_GIF2_Shift, 4   @ bitWidth 1 (global interrupt flag for channel 2)  
        .equ DMA2_TEIF1_Shift, 3   @ bitWidth 1 (transfer error TE flag for channel 1)  
        .equ DMA2_HTIF1_Shift, 2   @ bitWidth 1 (half transfer HT flag for channel 1)  
        .equ DMA2_TCIF1_Shift, 1   @ bitWidth 1 (transfer complete TC flag for channel 1)  
        .equ DMA2_GIF1_Shift, 0   @ bitWidth 1 (global interrupt flag for channel 1)  
 
    .equ DMA2_IFCR, DMA2_BASE + 0x4 @ (interrupt flag clear register) 
        .equ DMA2_TEIF7_Shift, 27   @ bitWidth 1 (transfer error flag clear for channel 7)  
        .equ DMA2_HTIF7_Shift, 26   @ bitWidth 1 (half transfer flag clear for channel 7)  
        .equ DMA2_TCIF7_Shift, 25   @ bitWidth 1 (transfer complete flag clear for channel 7)  
        .equ DMA2_GIF7_Shift, 24   @ bitWidth 1 (global interrupt flag clear for channel 7)  
        .equ DMA2_TEIF6_Shift, 23   @ bitWidth 1 (transfer error flag clear for channel 6)  
        .equ DMA2_HTIF6_Shift, 22   @ bitWidth 1 (half transfer flag clear for channel 6)  
        .equ DMA2_TCIF6_Shift, 21   @ bitWidth 1 (transfer complete flag clear for channel 6)  
        .equ DMA2_GIF6_Shift, 20   @ bitWidth 1 (global interrupt flag clear for channel 6)  
        .equ DMA2_TEIF5_Shift, 19   @ bitWidth 1 (transfer error flag clear for channel 5)  
        .equ DMA2_HTIF5_Shift, 18   @ bitWidth 1 (half transfer flag clear for channel 5)  
        .equ DMA2_TCIF5_Shift, 17   @ bitWidth 1 (transfer complete flag clear for channel 5)  
        .equ DMA2_GIF5_Shift, 16   @ bitWidth 1 (global interrupt flag clear for channel 5)  
        .equ DMA2_TEIF4_Shift, 15   @ bitWidth 1 (transfer error flag clear for channel 4)  
        .equ DMA2_HTIF4_Shift, 14   @ bitWidth 1 (half transfer flag clear for channel 4)  
        .equ DMA2_TCIF4_Shift, 13   @ bitWidth 1 (transfer complete flag clear for channel 4)  
        .equ DMA2_GIF4_Shift, 12   @ bitWidth 1 (global interrupt flag clear for channel 4)  
        .equ DMA2_TEIF3_Shift, 11   @ bitWidth 1 (transfer error flag clear for channel 3)  
        .equ DMA2_HTIF3_Shift, 10   @ bitWidth 1 (half transfer flag clear for channel 3)  
        .equ DMA2_TCIF3_Shift, 9   @ bitWidth 1 (transfer complete flag clear for channel 3)  
        .equ DMA2_GIF3_Shift, 8   @ bitWidth 1 (global interrupt flag clear for channel 3)  
        .equ DMA2_TEIF2_Shift, 7   @ bitWidth 1 (transfer error flag clear for channel 2)  
        .equ DMA2_HTIF2_Shift, 6   @ bitWidth 1 (half transfer flag clear for channel 2)  
        .equ DMA2_TCIF2_Shift, 5   @ bitWidth 1 (transfer complete flag clear for channel 2)  
        .equ DMA2_GIF2_Shift, 4   @ bitWidth 1 (global interrupt flag clear for channel 2)  
        .equ DMA2_TEIF1_Shift, 3   @ bitWidth 1 (transfer error flag clear for channel 1)  
        .equ DMA2_HTIF1_Shift, 2   @ bitWidth 1 (half transfer flag clear for channel 1)  
        .equ DMA2_TCIF1_Shift, 1   @ bitWidth 1 (transfer complete flag clear for channel 1)  
        .equ DMA2_GIF1_Shift, 0   @ bitWidth 1 (global interrupt flag clear for channel 1)  
 
    .equ DMA2_CCR1, DMA2_BASE + 0x8 @ (channel x configuration register) 
        .equ DMA2_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA2_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA2_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA2_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA2_CNDTR1, DMA2_BASE + 0xC @ (channel x number of data to transfer register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA2_CPAR1, DMA2_BASE + 0x10 @ (channel x peripheral address register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CMAR1, DMA2_BASE + 0x14 @ (channel x memory address register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CCR2, DMA2_BASE + 0x1C @ (channel x configuration register) 
        .equ DMA2_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA2_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA2_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA2_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA2_CNDTR2, DMA2_BASE + 0x20 @ (channel x number of data to transfer register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA2_CPAR2, DMA2_BASE + 0x24 @ (channel x peripheral address register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CMAR2, DMA2_BASE + 0x28 @ (channel x memory address register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CCR3, DMA2_BASE + 0x30 @ (channel x configuration register) 
        .equ DMA2_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA2_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA2_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA2_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA2_CNDTR3, DMA2_BASE + 0x34 @ (channel x number of data to transfer register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA2_CPAR3, DMA2_BASE + 0x38 @ (channel x peripheral address register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CMAR3, DMA2_BASE + 0x3C @ (channel x memory address register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CCR4, DMA2_BASE + 0x44 @ (channel x configuration register) 
        .equ DMA2_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA2_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA2_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA2_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA2_CNDTR4, DMA2_BASE + 0x48 @ (channel x number of data to transfer register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA2_CPAR4, DMA2_BASE + 0x4C @ (channel x peripheral address register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CMAR4, DMA2_BASE + 0x50 @ (channel x memory address register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CCR5, DMA2_BASE + 0x58 @ (channel x configuration register) 
        .equ DMA2_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA2_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA2_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA2_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA2_CNDTR5, DMA2_BASE + 0x5C @ (channel x number of data to transfer register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA2_CPAR5, DMA2_BASE + 0x60 @ (channel x peripheral address register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CMAR5, DMA2_BASE + 0x64 @ (channel x memory address register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CCR6, DMA2_BASE + 0x6C @ (channel x configuration register) 
        .equ DMA2_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA2_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA2_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA2_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA2_CNDTR6, DMA2_BASE + 0x70 @ (channel x number of data to transfer register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA2_CPAR6, DMA2_BASE + 0x74 @ (channel x peripheral address register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CMAR6, DMA2_BASE + 0x78 @ (channel x memory address register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CCR7, DMA2_BASE + 0x80 @ (channel x configuration register) 
        .equ DMA2_PRIV_Shift, 20   @ bitWidth 1 (rivileged mode)  
        .equ DMA2_DSEC_Shift, 19   @ bitWidth 1 (ecurity of the DMA transfer to the destination)  
        .equ DMA2_SSEC_Shift, 18   @ bitWidth 1 (ecurity of the DMA transfer from the source)  
        .equ DMA2_SECM_Shift, 17   @ bitWidth 1 (ecure mode)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (memory-to-memory mode)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (priority level)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (memory size)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (peripheral size)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (memory increment mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (peripheral increment mode)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (circular mode)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (data transfer direction)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (transfer error interrupt enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (half transfer interrupt enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (transfer complete interrupt enable)  
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (channel enable)  
 
    .equ DMA2_CNDTR7, DMA2_BASE + 0x84 @ (channel x number of data to transfer register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 18 (number of data to transfer 0 to 218 - 1)  
 
    .equ DMA2_CPAR7, DMA2_BASE + 0x88 @ (channel x peripheral address register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (peripheral address)  
 
    .equ DMA2_CMAR7, DMA2_BASE + 0x8C @ (channel x memory address register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (peripheral address)  
 

@=========================== DMAMUX ===========================@
.equ DMAMUX_BASE, 0x40020800 @ (DMA request multiplexer) 
    .equ DMAMUX_C0CR, DMAMUX_BASE + 0x0 @ (request line multiplexer channel x configuration register) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (Synchronization identification)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests minus 1 to forward)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (Synchronization polarity)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (Synchronization enable)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (Event generation enable)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (Synchronization overrun interrupt enable)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMA request identification)  
 
    .equ DMAMUX_C1CR, DMAMUX_BASE + 0x4 @ (request line multiplexer channel x configuration register) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (Synchronization identification)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests minus 1 to forward)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (Synchronization polarity)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (Synchronization enable)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (Event generation enable)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (Synchronization overrun interrupt enable)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMA request identification)  
 
    .equ DMAMUX_C2CR, DMAMUX_BASE + 0x8 @ (request line multiplexer channel x configuration register) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (Synchronization identification)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests minus 1 to forward)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (Synchronization polarity)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (Synchronization enable)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (Event generation enable)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (Synchronization overrun interrupt enable)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMA request identification)  
 
    .equ DMAMUX_C3CR, DMAMUX_BASE + 0xC @ (request line multiplexer channel x configuration register) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (Synchronization identification)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests minus 1 to forward)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (Synchronization polarity)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (Synchronization enable)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (Event generation enable)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (Synchronization overrun interrupt enable)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMA request identification)  
 
    .equ DMAMUX_C4CR, DMAMUX_BASE + 0x10 @ (request line multiplexer channel x configuration register) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (Synchronization identification)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests minus 1 to forward)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (Synchronization polarity)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (Synchronization enable)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (Event generation enable)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (Synchronization overrun interrupt enable)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMA request identification)  
 
    .equ DMAMUX_C5CR, DMAMUX_BASE + 0x14 @ (request line multiplexer channel x configuration register) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (Synchronization identification)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests minus 1 to forward)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (Synchronization polarity)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (Synchronization enable)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (Event generation enable)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (Synchronization overrun interrupt enable)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMA request identification)  
 
    .equ DMAMUX_C6CR, DMAMUX_BASE + 0x18 @ (request line multiplexer channel x configuration register) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (Synchronization identification)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests minus 1 to forward)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (Synchronization polarity)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (Synchronization enable)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (Event generation enable)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (Synchronization overrun interrupt enable)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMA request identification)  
 
    .equ DMAMUX_C7CR, DMAMUX_BASE + 0x1C @ (request line multiplexer channel x configuration register) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (Synchronization identification)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests minus 1 to forward)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (Synchronization polarity)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (Synchronization enable)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (Event generation enable)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (Synchronization overrun interrupt enable)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMA request identification)  
 
    .equ DMAMUX_C8CR, DMAMUX_BASE + 0x20 @ (request line multiplexer channel x configuration register) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (Synchronization identification)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests minus 1 to forward)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (Synchronization polarity)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (Synchronization enable)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (Event generation enable)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (Synchronization overrun interrupt enable)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMA request identification)  
 
    .equ DMAMUX_C9CR, DMAMUX_BASE + 0x24 @ (request line multiplexer channel x configuration register) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (Synchronization identification)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests minus 1 to forward)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (Synchronization polarity)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (Synchronization enable)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (Event generation enable)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (Synchronization overrun interrupt enable)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMA request identification)  
 
    .equ DMAMUX_C10CR, DMAMUX_BASE + 0x28 @ (C10CR) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (SYNC_ID)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (NBREQ)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (SPOL)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (SE)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (EGE)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (SOIE)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMAREQ_ID)  
 
    .equ DMAMUX_C11CR, DMAMUX_BASE + 0x2C @ (C11CR) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (SYNC_ID)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (NBREQ)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (SPOL)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (SE)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (EGE)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (SOIE)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMAREQ_ID)  
 
    .equ DMAMUX_C12CR, DMAMUX_BASE + 0x30 @ (C12CR) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (SYNC_ID)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (NBREQ)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (SPOL)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (SE)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (EGE)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (SOIE)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMAREQ_ID)  
 
    .equ DMAMUX_C13CR, DMAMUX_BASE + 0x34 @ (C13CR) 
        .equ DMAMUX_SYNC_ID_Shift, 24   @ bitWidth 5 (SYNC_ID)  
        .equ DMAMUX_NBREQ_Shift, 19   @ bitWidth 5 (NBREQ)  
        .equ DMAMUX_SPOL_Shift, 17   @ bitWidth 2 (SPOL)  
        .equ DMAMUX_SE_Shift, 16   @ bitWidth 1 (SE)  
        .equ DMAMUX_EGE_Shift, 9   @ bitWidth 1 (EGE)  
        .equ DMAMUX_SOIE_Shift, 8   @ bitWidth 1 (SOIE)  
        .equ DMAMUX_DMAREQ_ID_Shift, 0   @ bitWidth 8 (DMAREQ_ID)  
 
    .equ DMAMUX_CSR, DMAMUX_BASE + 0x80 @ (request line multiplexer interrupt channel status register) 
        .equ DMAMUX_SOF13_Shift, 13   @ bitWidth 1 (Synchronization overrun event flag)  
        .equ DMAMUX_SOF12_Shift, 12   @ bitWidth 1 (SOF12)  
        .equ DMAMUX_SOF11_Shift, 11   @ bitWidth 1 (SOF11)  
        .equ DMAMUX_SOF10_Shift, 10   @ bitWidth 1 (SOF10)  
        .equ DMAMUX_SOF9_Shift, 9   @ bitWidth 1 (SOF9)  
        .equ DMAMUX_SOF8_Shift, 8   @ bitWidth 1 (SOF8)  
        .equ DMAMUX_SOF7_Shift, 7   @ bitWidth 1 (SOF7)  
        .equ DMAMUX_SOF6_Shift, 6   @ bitWidth 1 (SOF6)  
        .equ DMAMUX_SOF5_Shift, 5   @ bitWidth 1 (SOF5)  
        .equ DMAMUX_SOF4_Shift, 4   @ bitWidth 1 (SOF4)  
        .equ DMAMUX_SOF3_Shift, 3   @ bitWidth 1 (SOF3)  
        .equ DMAMUX_SOF2_Shift, 2   @ bitWidth 1 (SOF2)  
        .equ DMAMUX_SOF1_Shift, 1   @ bitWidth 1 (SOF1)  
        .equ DMAMUX_SOF0_Shift, 0   @ bitWidth 1 (SOF0)  
 
    .equ DMAMUX_CCFR, DMAMUX_BASE + 0x84 @ (request line multiplexer interrupt channel clear flag register) 
        .equ DMAMUX_CSOF13_Shift, 13   @ bitWidth 1 (CSOF13)  
        .equ DMAMUX_CSOF12_Shift, 12   @ bitWidth 1 (CSOF12)  
        .equ DMAMUX_CSOF11_Shift, 11   @ bitWidth 1 (CSOF11)  
        .equ DMAMUX_CSOF10_Shift, 10   @ bitWidth 1 (CSOF10)  
        .equ DMAMUX_CSOF9_Shift, 9   @ bitWidth 1 (CSOF9)  
        .equ DMAMUX_CSOF8_Shift, 8   @ bitWidth 1 (CSOF8)  
        .equ DMAMUX_CSOF7_Shift, 7   @ bitWidth 1 (CSOF7)  
        .equ DMAMUX_CSOF6_Shift, 6   @ bitWidth 1 (CSOF6)  
        .equ DMAMUX_CSOF5_Shift, 5   @ bitWidth 1 (CSOF5)  
        .equ DMAMUX_CSOF4_Shift, 4   @ bitWidth 1 (CSOF4)  
        .equ DMAMUX_CSOF3_Shift, 3   @ bitWidth 1 (CSOF3)  
        .equ DMAMUX_CSOF2_Shift, 2   @ bitWidth 1 (CSOF2)  
        .equ DMAMUX_CSOF1_Shift, 1   @ bitWidth 1 (CSOF1)  
        .equ DMAMUX_CSOF0_Shift, 0   @ bitWidth 1 (CSOF0)  
 
    .equ DMAMUX_RG0CR, DMAMUX_BASE + 0x100 @ (request generator channel x configuration register) 
        .equ DMAMUX_GNBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests to be generated minus 1)  
        .equ DMAMUX_GPOL_Shift, 17   @ bitWidth 2 (DMA request generator trigger polarity)  
        .equ DMAMUX_GE_Shift, 16   @ bitWidth 1 (DMA request generator channel x enable)  
        .equ DMAMUX_OIE_Shift, 8   @ bitWidth 1 (Trigger overrun interrupt enable)  
        .equ DMAMUX_SIG_ID_Shift, 0   @ bitWidth 5 (Signal identification)  
 
    .equ DMAMUX_RG1CR, DMAMUX_BASE + 0x104 @ (request generator channel x configuration register) 
        .equ DMAMUX_GNBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests to be generated minus 1)  
        .equ DMAMUX_GPOL_Shift, 17   @ bitWidth 2 (DMA request generator trigger polarity)  
        .equ DMAMUX_GE_Shift, 16   @ bitWidth 1 (DMA request generator channel x enable)  
        .equ DMAMUX_OIE_Shift, 8   @ bitWidth 1 (Trigger overrun interrupt enable)  
        .equ DMAMUX_SIG_ID_Shift, 0   @ bitWidth 5 (Signal identification)  
 
    .equ DMAMUX_RG2CR, DMAMUX_BASE + 0x108 @ (request generator channel x configuration register) 
        .equ DMAMUX_GNBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests to be generated minus 1)  
        .equ DMAMUX_GPOL_Shift, 17   @ bitWidth 2 (DMA request generator trigger polarity)  
        .equ DMAMUX_GE_Shift, 16   @ bitWidth 1 (DMA request generator channel x enable)  
        .equ DMAMUX_OIE_Shift, 8   @ bitWidth 1 (Trigger overrun interrupt enable)  
        .equ DMAMUX_SIG_ID_Shift, 0   @ bitWidth 5 (Signal identification)  
 
    .equ DMAMUX_RG3CR, DMAMUX_BASE + 0x10C @ (request generator channel x configuration register) 
        .equ DMAMUX_GNBREQ_Shift, 19   @ bitWidth 5 (Number of DMA requests to be generated minus 1)  
        .equ DMAMUX_GPOL_Shift, 17   @ bitWidth 2 (DMA request generator trigger polarity)  
        .equ DMAMUX_GE_Shift, 16   @ bitWidth 1 (DMA request generator channel x enable)  
        .equ DMAMUX_OIE_Shift, 8   @ bitWidth 1 (Trigger overrun interrupt enable)  
        .equ DMAMUX_SIG_ID_Shift, 0   @ bitWidth 5 (Signal identification)  
 
    .equ DMAMUX_RGSR, DMAMUX_BASE + 0x140 @ (request generator interrupt status register) 
        .equ DMAMUX_OF3_Shift, 3   @ bitWidth 1 (Trigger overrun event flag)  
        .equ DMAMUX_OF2_Shift, 2   @ bitWidth 1 (OF2)  
        .equ DMAMUX_OF1_Shift, 1   @ bitWidth 1 (OF1)  
        .equ DMAMUX_OF0_Shift, 0   @ bitWidth 1 (OF0)  
 
    .equ DMAMUX_RGCFR, DMAMUX_BASE + 0x144 @ (request generator interrupt clear flag register) 
        .equ DMAMUX_COF3_Shift, 3   @ bitWidth 1 (Clear trigger overrun event flag)  
        .equ DMAMUX_COF2_Shift, 2   @ bitWidth 1 (COF2)  
        .equ DMAMUX_COF1_Shift, 1   @ bitWidth 1 (COF1)  
        .equ DMAMUX_COF0_Shift, 0   @ bitWidth 1 (COF0)  
 

@=========================== EXTI ===========================@
.equ EXTI_BASE, 0x58000800 @ (External interrupt/event controller) 
    .equ EXTI_RTSR1, EXTI_BASE + 0x0 @ (rising trigger selection register) 
        .equ EXTI_RT_Shift, 0   @ bitWidth 17 (Rising trigger event configuration bit of Configurable Event input)  
        .equ EXTI_RT21_Shift, 21   @ bitWidth 2 (Rising trigger event configuration bit of Configurable Event input)  
 
    .equ EXTI_FTSR1, EXTI_BASE + 0x4 @ (falling trigger selection register) 
        .equ EXTI_FT_Shift, 0   @ bitWidth 17 (Falling trigger event configuration bit of Configurable Event input)  
        .equ EXTI_FT21_Shift, 21   @ bitWidth 2 (Falling trigger event configuration bit of Configurable Event input)  
 
    .equ EXTI_SWIER1, EXTI_BASE + 0x8 @ (software interrupt event register) 
        .equ EXTI_SWI_Shift, 0   @ bitWidth 17 (Software interrupt on event)  
        .equ EXTI_SWI21_Shift, 21   @ bitWidth 2 (Software interrupt on event)  
 
    .equ EXTI_PR1, EXTI_BASE + 0xC @ (EXTI pending register) 
        .equ EXTI_PIF_Shift, 0   @ bitWidth 17 (Configurable event inputs Pending bit)  
        .equ EXTI_PIF21_Shift, 21   @ bitWidth 2 (Configurable event inputs Pending bit)  
 
    .equ EXTI_RTSR2, EXTI_BASE + 0x20 @ (rising trigger selection register) 
        .equ EXTI_RT34_Shift, 2   @ bitWidth 1 (Rising trigger event configuration bit of Configurable Event input)  
        .equ EXTI_RT45_Shift, 13   @ bitWidth 1 (Rising trigger event configuration bit of Configurable Event input)  
 
    .equ EXTI_FTSR2, EXTI_BASE + 0x24 @ (falling trigger selection register) 
        .equ EXTI_FT34_Shift, 2   @ bitWidth 1 (Falling trigger event configuration bit of Configurable Event input)  
        .equ EXTI_FT45_Shift, 13   @ bitWidth 1 (Falling trigger event configuration bit of Configurable Event input)  
 
    .equ EXTI_SWIER2, EXTI_BASE + 0x28 @ (software interrupt event register) 
        .equ EXTI_SWI34_Shift, 2   @ bitWidth 1 (Software interrupt on event)  
        .equ EXTI_SWI45_Shift, 13   @ bitWidth 1 (Software interrupt on event 45)  
 
    .equ EXTI_PR2, EXTI_BASE + 0x2C @ (pending register) 
        .equ EXTI_PIF34_Shift, 2   @ bitWidth 1 (Configurable event inputs 33 Pending bit.)  
        .equ EXTI_PIF45_Shift, 13   @ bitWidth 1 (Configurable event inputs 45 Pending bit.)  
 
    .equ EXTI_IMR1, EXTI_BASE + 0x80 @ (interrupt mask register) 
        .equ EXTI_IM_Shift, 0   @ bitWidth 32 (wakeup with interrupt Mask on event input)  
 
    .equ EXTI_EMR1, EXTI_BASE + 0x84 @ (event mask register) 
        .equ EXTI_EM0_Shift, 0   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM1_Shift, 1   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM2_Shift, 2   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM3_Shift, 3   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM4_Shift, 4   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM5_Shift, 5   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM6_Shift, 6   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM7_Shift, 7   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM8_Shift, 8   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM9_Shift, 9   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM10_Shift, 10   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM11_Shift, 11   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM12_Shift, 12   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM13_Shift, 13   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM14_Shift, 14   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM15_Shift, 15   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM17_Shift, 17   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM18_Shift, 18   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM19_Shift, 19   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM20_Shift, 20   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM21_Shift, 21   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
        .equ EXTI_EM22_Shift, 22   @ bitWidth 1 (Wakeup with event generation Mask on Event input)  
 
    .equ EXTI_IMR2, EXTI_BASE + 0x90 @ (interrupt mask register) 
        .equ EXTI_IM34_Shift, 2   @ bitWidth 1 (CPUm Wakeup with interrupt Mask on Event input)  
        .equ EXTI_IM38_Shift, 6   @ bitWidth 1 (CPUm Wakeup with interrupt Mask on Event input)  
        .equ EXTI_IM42_Shift, 10   @ bitWidth 5 (CPUm Wakeup with interrupt Mask on Event input)  
 

@=========================== FLASH ===========================@
.equ FLASH_BASE, 0x58004000 @ (Flash) 
    .equ FLASH_ACR, FLASH_BASE + 0x0 @ (Access control register) 
        .equ FLASH_LATENCY_Shift, 0   @ bitWidth 3 (Latency)  
        .equ FLASH_PRFTEN_Shift, 8   @ bitWidth 1 (Prefetch enable)  
        .equ FLASH_ICEN_Shift, 9   @ bitWidth 1 (Instruction cache enable)  
        .equ FLASH_DCEN_Shift, 10   @ bitWidth 1 (Data cache enable)  
        .equ FLASH_ICRST_Shift, 11   @ bitWidth 1 (Instruction cache reset)  
        .equ FLASH_DCRST_Shift, 12   @ bitWidth 1 (Data cache reset)  
        .equ FLASH_PES_Shift, 15   @ bitWidth 1 (CPU1 programm erase suspend request)  
        .equ FLASH_EMPTY_Shift, 16   @ bitWidth 1 (Flash User area empty)  
 
    .equ FLASH_KEYR, FLASH_BASE + 0x8 @ (Flash key register) 
        .equ FLASH_KEY_Shift, 0   @ bitWidth 32 (KEY)  
 
    .equ FLASH_OPTKEYR, FLASH_BASE + 0xC @ (Option byte key register) 
        .equ FLASH_OPTKEY_Shift, 0   @ bitWidth 32 (Option byte key)  
 
    .equ FLASH_SR, FLASH_BASE + 0x10 @ (Status register) 
        .equ FLASH_EOP_Shift, 0   @ bitWidth 1 (End of operation)  
        .equ FLASH_OPERR_Shift, 1   @ bitWidth 1 (Operation error)  
        .equ FLASH_PROGERR_Shift, 3   @ bitWidth 1 (Programming error)  
        .equ FLASH_WRPERR_Shift, 4   @ bitWidth 1 (Write protected error)  
        .equ FLASH_PGAERR_Shift, 5   @ bitWidth 1 (Programming alignment error)  
        .equ FLASH_SIZERR_Shift, 6   @ bitWidth 1 (Size error)  
        .equ FLASH_PGSERR_Shift, 7   @ bitWidth 1 (Programming sequence error)  
        .equ FLASH_MISERR_Shift, 8   @ bitWidth 1 (Fast programming data miss error)  
        .equ FLASH_FASTERR_Shift, 9   @ bitWidth 1 (Fast programming error)  
        .equ FLASH_OPTVN_Shift, 13   @ bitWidth 1 (User Option OPTIVAL indication)  
        .equ FLASH_RDERR_Shift, 14   @ bitWidth 1 (PCROP read error)  
        .equ FLASH_OPTVERR_Shift, 15   @ bitWidth 1 (Option validity error)  
        .equ FLASH_BSY_Shift, 16   @ bitWidth 1 (Busy)  
        .equ FLASH_CFGBSY_Shift, 18   @ bitWidth 1 (Programming or erase configuration busy)  
        .equ FLASH_PESD_Shift, 19   @ bitWidth 1 (Programming / erase operation suspended)  
 
    .equ FLASH_CR, FLASH_BASE + 0x14 @ (Flash control register) 
        .equ FLASH_PG_Shift, 0   @ bitWidth 1 (Programming)  
        .equ FLASH_PER_Shift, 1   @ bitWidth 1 (Page erase)  
        .equ FLASH_MER_Shift, 2   @ bitWidth 1 (Mass erase)  
        .equ FLASH_PNB_Shift, 3   @ bitWidth 7 (Page number)  
        .equ FLASH_STRT_Shift, 16   @ bitWidth 1 (Start)  
        .equ FLASH_OPTSTRT_Shift, 17   @ bitWidth 1 (Options modification start)  
        .equ FLASH_FSTPG_Shift, 18   @ bitWidth 1 (Fast programming)  
        .equ FLASH_EOPIE_Shift, 24   @ bitWidth 1 (End of operation interrupt enable)  
        .equ FLASH_ERRIE_Shift, 25   @ bitWidth 1 (Error interrupt enable)  
        .equ FLASH_RDERRIE_Shift, 26   @ bitWidth 1 (PCROP read error interrupt enable)  
        .equ FLASH_OBL_LAUNCH_Shift, 27   @ bitWidth 1 (Force the option byte loading)  
        .equ FLASH_OPTLOCK_Shift, 30   @ bitWidth 1 (Options Lock)  
        .equ FLASH_LOCK_Shift, 31   @ bitWidth 1 (FLASH_CR Lock)  
 
    .equ FLASH_ECCR, FLASH_BASE + 0x18 @ (Flash ECC register) 
        .equ FLASH_ADDR_ECC_Shift, 0   @ bitWidth 17 (ECC fail address)  
        .equ FLASH_SYSF_ECC_Shift, 20   @ bitWidth 1 (System Flash ECC fail)  
        .equ FLASH_ECCCIE_Shift, 24   @ bitWidth 1 (ECC correction interrupt enable)  
        .equ FLASH_ECCC_Shift, 30   @ bitWidth 1 (ECC correction)  
        .equ FLASH_ECCD_Shift, 31   @ bitWidth 1 (ECC detection)  
 
    .equ FLASH_OPTR, FLASH_BASE + 0x20 @ (Flash option register) 
        .equ FLASH_RDP_Shift, 0   @ bitWidth 8 (Read protection level)  
        .equ FLASH_ESE_Shift, 8   @ bitWidth 1 (System security enabled flag)  
        .equ FLASH_BOR_LEV_Shift, 9   @ bitWidth 3 (BOR reset Level)  
        .equ FLASH_nRST_STOP_Shift, 12   @ bitWidth 1 (nRST_STOP)  
        .equ FLASH_nRST_STDBY_Shift, 13   @ bitWidth 1 (nRST_STDBY)  
        .equ FLASH_nRST_SHDW_Shift, 14   @ bitWidth 1 (nRSTSHDW)  
        .equ FLASH_IWDG_SW_Shift, 16   @ bitWidth 1 (Independent watchdog selection)  
        .equ FLASH_IWDG_STOP_Shift, 17   @ bitWidth 1 (Independent watchdog counter freeze in Stop mode)  
        .equ FLASH_IWDG_STDBY_Shift, 18   @ bitWidth 1 (Independent watchdog counter freeze in Standby mode)  
        .equ FLASH_WWDG_SW_Shift, 19   @ bitWidth 1 (Window watchdog selection)  
        .equ FLASH_nBOOT1_Shift, 23   @ bitWidth 1 (Boot configuration)  
        .equ FLASH_SRAM2_PE_Shift, 24   @ bitWidth 1 (SRAM2 parity check enable)  
        .equ FLASH_SRAM2_RST_Shift, 25   @ bitWidth 1 (SRAM2 Erase when system reset)  
        .equ FLASH_nSWBOOT0_Shift, 26   @ bitWidth 1 (Software BOOT0 selection)  
        .equ FLASH_nBOOT0_Shift, 27   @ bitWidth 1 (nBOOT0 option bit)  
        .equ FLASH_BOOT_LOCK_Shift, 30   @ bitWidth 1 (CPU1 CM4 Unique Boot entry enable option bit)  
 
    .equ FLASH_PCROP1ASR, FLASH_BASE + 0x24 @ (Flash PCROP zone A Start address register) 
        .equ FLASH_PCROP1A_STRT_Shift, 0   @ bitWidth 8 (PCROP1A area start offset)  
 
    .equ FLASH_PCROP1AER, FLASH_BASE + 0x28 @ (Flash PCROP zone A End address register) 
        .equ FLASH_PCROP1A_END_Shift, 0   @ bitWidth 8 (PCROP area end offset)  
        .equ FLASH_PCROP_RDP_Shift, 31   @ bitWidth 1 (PCROP area preserved when RDP level decreased)  
 
    .equ FLASH_WRP1AR, FLASH_BASE + 0x2C @ (Flash WRP area A address register) 
        .equ FLASH_WRP1A_STRT_Shift, 0   @ bitWidth 7 (Bank 1 WRP first area start offset)  
        .equ FLASH_WRP1A_END_Shift, 16   @ bitWidth 7 (Bank 1 WRP first area A end offset)  
 
    .equ FLASH_WRP1BR, FLASH_BASE + 0x30 @ (Flash WRP area B address register) 
        .equ FLASH_WRP1B_STRT_Shift, 0   @ bitWidth 7 (Bank 1 WRP second area B end offset)  
        .equ FLASH_WRP1B_END_Shift, 16   @ bitWidth 7 (Bank 1 WRP second area B start offset)  
 
    .equ FLASH_PCROP1BSR, FLASH_BASE + 0x34 @ (Flash PCROP zone B Start address register) 
        .equ FLASH_PCROP1B_STRT_Shift, 0   @ bitWidth 8 (Bank 1 WRP second area B end offset)  
 
    .equ FLASH_PCROP1BER, FLASH_BASE + 0x38 @ (Flash PCROP zone B End address register) 
        .equ FLASH_PCROP1B_END_Shift, 0   @ bitWidth 8 (PCROP1B area end offset)  
 

@=========================== GPIOA ===========================@
.equ GPIOA_BASE, 0x48000000 @ (General-purpose I/Os) 
    .equ GPIOA_MODER, GPIOA_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOA_MODER15_Shift, 30   @ bitWidth 2 (MODER15)  
        .equ GPIOA_MODER14_Shift, 28   @ bitWidth 2 (MODER14)  
        .equ GPIOA_MODER13_Shift, 26   @ bitWidth 2 (MODER13)  
        .equ GPIOA_MODER12_Shift, 24   @ bitWidth 2 (MODER12)  
        .equ GPIOA_MODER11_Shift, 22   @ bitWidth 2 (MODER11)  
        .equ GPIOA_MODER10_Shift, 20   @ bitWidth 2 (MODER10)  
        .equ GPIOA_MODER9_Shift, 18   @ bitWidth 2 (MODER9)  
        .equ GPIOA_MODER8_Shift, 16   @ bitWidth 2 (MODER8)  
        .equ GPIOA_MODER7_Shift, 14   @ bitWidth 2 (MODER7)  
        .equ GPIOA_MODER6_Shift, 12   @ bitWidth 2 (MODER6)  
        .equ GPIOA_MODER5_Shift, 10   @ bitWidth 2 (MODER5)  
        .equ GPIOA_MODER4_Shift, 8   @ bitWidth 2 (MODER4)  
        .equ GPIOA_MODER3_Shift, 6   @ bitWidth 2 (MODER3)  
        .equ GPIOA_MODER2_Shift, 4   @ bitWidth 2 (MODER2)  
        .equ GPIOA_MODER1_Shift, 2   @ bitWidth 2 (MODER1)  
        .equ GPIOA_MODER0_Shift, 0   @ bitWidth 2 (MODER0)  
 
    .equ GPIOA_OTYPER, GPIOA_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOA_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOA_OSPEEDR, GPIOA_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOA_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOA_PUPDR, GPIOA_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOA_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOA_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOA_IDR, GPIOA_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOA_IDR15_Shift, 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR14_Shift, 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR13_Shift, 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR12_Shift, 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR11_Shift, 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR10_Shift, 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR9_Shift, 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR8_Shift, 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR7_Shift, 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR6_Shift, 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR5_Shift, 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR4_Shift, 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR3_Shift, 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR2_Shift, 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR1_Shift, 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOA_IDR0_Shift, 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOA_ODR, GPIOA_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOA_ODR15_Shift, 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR14_Shift, 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR13_Shift, 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR12_Shift, 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR11_Shift, 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR10_Shift, 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR9_Shift, 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR8_Shift, 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR7_Shift, 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR6_Shift, 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR5_Shift, 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR4_Shift, 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR3_Shift, 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR2_Shift, 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR1_Shift, 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOA_ODR0_Shift, 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOA_BSRR, GPIOA_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOA_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOA_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOA_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOA_LCKR, GPIOA_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOA_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOA_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOA_AFRL, GPIOA_BASE + 0x20 @ (GPIO alternate function low register) 
        .equ GPIOA_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOA_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOA_AFRH, GPIOA_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOA_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOA_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOA_BRR, GPIOA_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOA_BR0_Shift, 0   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR1_Shift, 1   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR2_Shift, 2   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR3_Shift, 3   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR4_Shift, 4   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR5_Shift, 5   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR6_Shift, 6   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR7_Shift, 7   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR8_Shift, 8   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR9_Shift, 9   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR10_Shift, 10   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR11_Shift, 11   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR12_Shift, 12   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR13_Shift, 13   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR14_Shift, 14   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOA_BR15_Shift, 15   @ bitWidth 1 (Port Reset bit)  
 

@=========================== GPIOB ===========================@
.equ GPIOB_BASE, 0x48000400 @ (General-purpose I/Os) 
    .equ GPIOB_MODER, GPIOB_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOB_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOB_OTYPER, GPIOB_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOB_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT12_Shift, 12   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT11_Shift, 11   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT10_Shift, 10   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT9_Shift, 9   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT8_Shift, 8   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT7_Shift, 7   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOB_OSPEEDR, GPIOB_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOB_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOB_PUPDR, GPIOB_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOB_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOB_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOB_IDR, GPIOB_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOB_IDR15_Shift, 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR14_Shift, 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR13_Shift, 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR12_Shift, 12   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR11_Shift, 11   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR10_Shift, 10   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR9_Shift, 9   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR8_Shift, 8   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR7_Shift, 7   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR6_Shift, 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR5_Shift, 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR4_Shift, 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR3_Shift, 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR2_Shift, 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR1_Shift, 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOB_IDR0_Shift, 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOB_ODR, GPIOB_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOB_ODR15_Shift, 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR14_Shift, 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR13_Shift, 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR12_Shift, 12   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR11_Shift, 11   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR10_Shift, 10   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR9_Shift, 9   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR8_Shift, 8   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR7_Shift, 7   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR6_Shift, 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR5_Shift, 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR4_Shift, 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR3_Shift, 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR2_Shift, 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR1_Shift, 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOB_ODR0_Shift, 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOB_BSRR, GPIOB_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOB_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR12_Shift, 28   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR11_Shift, 27   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR10_Shift, 26   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR9_Shift, 25   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR8_Shift, 24   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR7_Shift, 23   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOB_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS12_Shift, 12   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS11_Shift, 11   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS10_Shift, 10   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS9_Shift, 9   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS8_Shift, 8   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS7_Shift, 7   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOB_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOB_LCKR, GPIOB_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOB_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK12_Shift, 12   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK11_Shift, 11   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK10_Shift, 10   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK9_Shift, 9   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK8_Shift, 8   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK7_Shift, 7   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOB_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOB_AFRL, GPIOB_BASE + 0x20 @ (GPIO alternate function low register) 
        .equ GPIOB_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOB_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOB_AFRH, GPIOB_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOB_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOB_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOB_BRR, GPIOB_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOB_BR0_Shift, 0   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR1_Shift, 1   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR2_Shift, 2   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR3_Shift, 3   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR4_Shift, 4   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR5_Shift, 5   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR6_Shift, 6   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR7_Shift, 7   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR8_Shift, 8   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR9_Shift, 9   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR10_Shift, 10   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR11_Shift, 11   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR12_Shift, 12   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR13_Shift, 13   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR14_Shift, 14   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOB_BR15_Shift, 15   @ bitWidth 1 (Port Reset bit)  
 

@=========================== GPIOC ===========================@
.equ GPIOC_BASE, 0x48000800 @ (General-purpose I/Os) 
    .equ GPIOC_MODER, GPIOC_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOC_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOC_OTYPER, GPIOC_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOC_OT15_Shift, 15   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OT14_Shift, 14   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OT13_Shift, 13   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OT6_Shift, 6   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OT5_Shift, 5   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OT4_Shift, 4   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OT2_Shift, 2   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OT1_Shift, 1   @ bitWidth 1 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OT0_Shift, 0   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOC_OSPEEDR, GPIOC_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOC_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOC_PUPDR, GPIOC_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOC_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y = 0..15)  
        .equ GPIOC_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOC_IDR, GPIOC_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOC_IDR15_Shift, 15   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR14_Shift, 14   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR13_Shift, 13   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR6_Shift, 6   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR5_Shift, 5   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR4_Shift, 4   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR3_Shift, 3   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR2_Shift, 2   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR1_Shift, 1   @ bitWidth 1 (Port input data y = 0..15)  
        .equ GPIOC_IDR0_Shift, 0   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOC_ODR, GPIOC_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOC_ODR15_Shift, 15   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR14_Shift, 14   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR13_Shift, 13   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR6_Shift, 6   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR5_Shift, 5   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR4_Shift, 4   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR3_Shift, 3   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR2_Shift, 2   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR1_Shift, 1   @ bitWidth 1 (Port output data y = 0..15)  
        .equ GPIOC_ODR0_Shift, 0   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOC_BSRR, GPIOC_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOC_BR15_Shift, 31   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BR14_Shift, 30   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BR13_Shift, 29   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BR6_Shift, 22   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BR5_Shift, 21   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BR4_Shift, 20   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BR2_Shift, 18   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BR1_Shift, 17   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOC_BR0_Shift, 16   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BS15_Shift, 15   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BS14_Shift, 14   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BS13_Shift, 13   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BS6_Shift, 6   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BS5_Shift, 5   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BS4_Shift, 4   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BS2_Shift, 2   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BS1_Shift, 1   @ bitWidth 1 (Port x set bit y y= 0..15)  
        .equ GPIOC_BS0_Shift, 0   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOC_LCKR, GPIOC_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOC_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCK15_Shift, 15   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCK14_Shift, 14   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCK13_Shift, 13   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCK6_Shift, 6   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCK5_Shift, 5   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCK4_Shift, 4   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCK2_Shift, 2   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCK1_Shift, 1   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOC_LCK0_Shift, 0   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOC_AFRL, GPIOC_BASE + 0x20 @ (GPIO alternate function low register) 
        .equ GPIOC_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
        .equ GPIOC_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOC_AFRH, GPIOC_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOC_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOC_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOC_BRR, GPIOC_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOC_BR0_Shift, 0   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOC_BR1_Shift, 1   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOC_BR2_Shift, 2   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOC_BR3_Shift, 3   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOC_BR4_Shift, 4   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOC_BR5_Shift, 5   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOC_BR6_Shift, 6   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOC_BR13_Shift, 13   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOC_BR14_Shift, 14   @ bitWidth 1 (Port Reset bit)  
        .equ GPIOC_BR15_Shift, 15   @ bitWidth 1 (Port Reset bit)  
 

@=========================== GPIOH ===========================@
.equ GPIOH_BASE, 0x48001C00 @ (General-purpose I/Os) 
    .equ GPIOH_MODER, GPIOH_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOH_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOH_OTYPER, GPIOH_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOH_OT3_Shift, 3   @ bitWidth 1 (Port x configuration bits y = 0..15)  
 
    .equ GPIOH_OSPEEDR, GPIOH_BASE + 0x8 @ (GPIO port output speed register) 
        .equ GPIOH_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOH_PUPDR, GPIOH_BASE + 0xC @ (GPIO port pull-up/pull-down register) 
        .equ GPIOH_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y = 0..15)  
 
    .equ GPIOH_IDR, GPIOH_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOH_IDR3_Shift, 3   @ bitWidth 1 (Port input data y = 0..15)  
 
    .equ GPIOH_ODR, GPIOH_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOH_ODR3_Shift, 3   @ bitWidth 1 (Port output data y = 0..15)  
 
    .equ GPIOH_BSRR, GPIOH_BASE + 0x18 @ (GPIO port bit set/reset register) 
        .equ GPIOH_BR3_Shift, 19   @ bitWidth 1 (Port x reset bit y y = 0..15)  
        .equ GPIOH_BS3_Shift, 3   @ bitWidth 1 (Port x set bit y y= 0..15)  
 
    .equ GPIOH_LCKR, GPIOH_BASE + 0x1C @ (GPIO port configuration lock register) 
        .equ GPIOH_LCKK_Shift, 16   @ bitWidth 1 (Port x lock bit y y= 0..15)  
        .equ GPIOH_LCK3_Shift, 3   @ bitWidth 1 (Port x lock bit y y= 0..15)  
 
    .equ GPIOH_AFRL, GPIOH_BASE + 0x20 @ (GPIO alternate function low register) 
        .equ GPIOH_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 0..7)  
 
    .equ GPIOH_AFRH, GPIOH_BASE + 0x24 @ (GPIO alternate function high register) 
        .equ GPIOH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
        .equ GPIOH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x bit y y = 8..15)  
 
    .equ GPIOH_BRR, GPIOH_BASE + 0x28 @ (GPIO port bit reset register) 
        .equ GPIOH_BR3_Shift, 3   @ bitWidth 1 (Port Reset bit)  
 

@=========================== HSEM ===========================@
.equ HSEM_BASE, 0x58001400 @ (Hardware semaphore) 
    .equ HSEM_HSEM_R0, HSEM_BASE + 0x0 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R1, HSEM_BASE + 0x4 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R2, HSEM_BASE + 0x8 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R3, HSEM_BASE + 0xC @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R4, HSEM_BASE + 0x10 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R5, HSEM_BASE + 0x14 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R6, HSEM_BASE + 0x18 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R7, HSEM_BASE + 0x1C @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R8, HSEM_BASE + 0x20 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R9, HSEM_BASE + 0x24 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R10, HSEM_BASE + 0x28 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R11, HSEM_BASE + 0x2C @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R12, HSEM_BASE + 0x30 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R13, HSEM_BASE + 0x34 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R14, HSEM_BASE + 0x38 @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_R15, HSEM_BASE + 0x3C @ (HSEM register HSEM_R0 HSEM_R31) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR0, HSEM_BASE + 0x80 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR1, HSEM_BASE + 0x84 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR2, HSEM_BASE + 0x88 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR3, HSEM_BASE + 0x8C @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR4, HSEM_BASE + 0x90 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR5, HSEM_BASE + 0x94 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR6, HSEM_BASE + 0x98 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR7, HSEM_BASE + 0x9C @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR8, HSEM_BASE + 0xA0 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR9, HSEM_BASE + 0xA4 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR10, HSEM_BASE + 0xA8 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR11, HSEM_BASE + 0xAC @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR12, HSEM_BASE + 0xB0 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR13, HSEM_BASE + 0xB4 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR14, HSEM_BASE + 0xB8 @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_RLR15, HSEM_BASE + 0xBC @ (HSEM Read lock register) 
        .equ HSEM_PROCID_Shift, 0   @ bitWidth 8 (Semaphore ProcessID)  
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (Semaphore MASTERID)  
        .equ HSEM_LOCK_Shift, 31   @ bitWidth 1 (Lock indication)  
 
    .equ HSEM_HSEM_IER, HSEM_BASE + 0x100 @ (HSEM Interrupt enable register) 
        .equ HSEM_ISE0_Shift, 0   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE1_Shift, 1   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE2_Shift, 2   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE3_Shift, 3   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE4_Shift, 4   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE5_Shift, 5   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE6_Shift, 6   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE7_Shift, 7   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE8_Shift, 8   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE9_Shift, 9   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE10_Shift, 10   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE11_Shift, 11   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE12_Shift, 12   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE13_Shift, 13   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE14_Shift, 14   @ bitWidth 1 (Interrupt semaphore n enable bit)  
        .equ HSEM_ISE15_Shift, 15   @ bitWidth 1 (Interrupt semaphore n enable bit)  
 
    .equ HSEM_HSEM_ICR, HSEM_BASE + 0x104 @ (HSEM Interrupt clear register) 
        .equ HSEM_ISC0_Shift, 0   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC1_Shift, 1   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC2_Shift, 2   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC3_Shift, 3   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC4_Shift, 4   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC5_Shift, 5   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC6_Shift, 6   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC7_Shift, 7   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC8_Shift, 8   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC9_Shift, 9   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC10_Shift, 10   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC11_Shift, 11   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC12_Shift, 12   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC13_Shift, 13   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC14_Shift, 14   @ bitWidth 1 (InterruptN semaphore n clear bit)  
        .equ HSEM_ISC15_Shift, 15   @ bitWidth 1 (InterruptN semaphore n clear bit)  
 
    .equ HSEM_HSEM_ISR, HSEM_BASE + 0x108 @ (HSEM Interrupt status register) 
        .equ HSEM_ISF0_Shift, 0   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF1_Shift, 1   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF2_Shift, 2   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF3_Shift, 3   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF4_Shift, 4   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF5_Shift, 5   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF6_Shift, 6   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF7_Shift, 7   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF8_Shift, 8   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF9_Shift, 9   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF10_Shift, 10   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF11_Shift, 11   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF12_Shift, 12   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF13_Shift, 13   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF14_Shift, 14   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
        .equ HSEM_ISF15_Shift, 15   @ bitWidth 1 (InterruptN semaphore n status bit before enable mask)  
 
    .equ HSEM_HSEM_MISR, HSEM_BASE + 0x10C @ (HSEM Masked interrupt status register) 
        .equ HSEM_MISF0_Shift, 0   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF1_Shift, 1   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF2_Shift, 2   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF3_Shift, 3   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF4_Shift, 4   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF5_Shift, 5   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF6_Shift, 6   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF7_Shift, 7   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF8_Shift, 8   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF9_Shift, 9   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF10_Shift, 10   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF11_Shift, 11   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF12_Shift, 12   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF13_Shift, 13   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF14_Shift, 14   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
        .equ HSEM_MISF15_Shift, 15   @ bitWidth 1 (masked interruptN semaphore n status bit after enable mask)  
 
    .equ HSEM_HSEM_CR, HSEM_BASE + 0x140 @ (HSEM Clear register) 
        .equ HSEM_MASTERID_Shift, 8   @ bitWidth 4 (MASTERID)  
        .equ HSEM_KEY_Shift, 16   @ bitWidth 16 (Semaphore clear Key)  
 
    .equ HSEM_HSEM_KEYR, HSEM_BASE + 0x144 @ (HSEM Interrupt clear register) 
        .equ HSEM_KEY_Shift, 16   @ bitWidth 16 (Semaphore Clear Key)  
 

@=========================== I2C1 ===========================@
.equ I2C1_BASE, 0x40005400 @ (Inter-integrated circuit) 
    .equ I2C1_CR1, I2C1_BASE + 0x0 @ (Control register 1) 
        .equ I2C1_PE_Shift, 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C1_TXIE_Shift, 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C1_RXIE_Shift, 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C1_ADDRIE_Shift, 3   @ bitWidth 1 (Address match interrupt enable slave only)  
        .equ I2C1_NACKIE_Shift, 4   @ bitWidth 1 (Not acknowledge received interrupt enable)  
        .equ I2C1_STOPIE_Shift, 5   @ bitWidth 1 (STOP detection Interrupt enable)  
        .equ I2C1_TCIE_Shift, 6   @ bitWidth 1 (Transfer Complete interrupt enable)  
        .equ I2C1_ERRIE_Shift, 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C1_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C1_ANFOFF_Shift, 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C1_TXDMAEN_Shift, 14   @ bitWidth 1 (DMA transmission requests enable)  
        .equ I2C1_RXDMAEN_Shift, 15   @ bitWidth 1 (DMA reception requests enable)  
        .equ I2C1_SBC_Shift, 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C1_NOSTRETCH_Shift, 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C1_WUPEN_Shift, 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C1_GCEN_Shift, 19   @ bitWidth 1 (General call enable)  
        .equ I2C1_SMBHEN_Shift, 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C1_SMBDEN_Shift, 21   @ bitWidth 1 (SMBus Device Default address enable)  
        .equ I2C1_ALERTEN_Shift, 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C1_PECEN_Shift, 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C1_CR2, I2C1_BASE + 0x4 @ (Control register 2) 
        .equ I2C1_PECBYTE_Shift, 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C1_AUTOEND_Shift, 25   @ bitWidth 1 (Automatic end mode master mode)  
        .equ I2C1_RELOAD_Shift, 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C1_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C1_NACK_Shift, 15   @ bitWidth 1 (NACK generation slave mode)  
        .equ I2C1_STOP_Shift, 14   @ bitWidth 1 (Stop generation master mode)  
        .equ I2C1_START_Shift, 13   @ bitWidth 1 (Start generation)  
        .equ I2C1_HEAD10R_Shift, 12   @ bitWidth 1 (10-bit address header only read direction master receiver mode)  
        .equ I2C1_ADD10_Shift, 11   @ bitWidth 1 (10-bit addressing mode master mode)  
        .equ I2C1_RD_WRN_Shift, 10   @ bitWidth 1 (Transfer direction master mode)  
        .equ I2C1_SADD_Shift, 0   @ bitWidth 10 (Slave address bit master mode)  
 
    .equ I2C1_OAR1, I2C1_BASE + 0x8 @ (Own address register 1) 
        .equ I2C1_OA1_Shift, 0   @ bitWidth 10 (Interface address)  
        .equ I2C1_OA1MODE_Shift, 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C1_OA1EN_Shift, 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C1_OAR2, I2C1_BASE + 0xC @ (Own address register 2) 
        .equ I2C1_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C1_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C1_OA2EN_Shift, 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C1_TIMINGR, I2C1_BASE + 0x10 @ (Timing register) 
        .equ I2C1_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master mode)  
        .equ I2C1_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master mode)  
        .equ I2C1_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C1_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C1_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C1_TIMEOUTR, I2C1_BASE + 0x14 @ (Status register 1) 
        .equ I2C1_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C1_TIDLE_Shift, 12   @ bitWidth 1 (Idle clock timeout detection)  
        .equ I2C1_TIMOUTEN_Shift, 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C1_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C1_TEXTEN_Shift, 31   @ bitWidth 1 (Extended clock timeout enable)  
 
    .equ I2C1_ISR, I2C1_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C1_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave mode)  
        .equ I2C1_DIR_Shift, 16   @ bitWidth 1 (Transfer direction Slave mode)  
        .equ I2C1_BUSY_Shift, 15   @ bitWidth 1 (Bus busy)  
        .equ I2C1_ALERT_Shift, 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C1_TIMEOUT_Shift, 12   @ bitWidth 1 (Timeout or t_low detection flag)  
        .equ I2C1_PECERR_Shift, 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C1_OVR_Shift, 10   @ bitWidth 1 (Overrun/Underrun slave mode)  
        .equ I2C1_ARLO_Shift, 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C1_BERR_Shift, 8   @ bitWidth 1 (Bus error)  
        .equ I2C1_TCR_Shift, 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C1_TC_Shift, 6   @ bitWidth 1 (Transfer Complete master mode)  
        .equ I2C1_STOPF_Shift, 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C1_NACKF_Shift, 4   @ bitWidth 1 (Not acknowledge received flag)  
        .equ I2C1_ADDR_Shift, 3   @ bitWidth 1 (Address matched slave mode)  
        .equ I2C1_RXNE_Shift, 2   @ bitWidth 1 (Receive data register not empty receivers)  
        .equ I2C1_TXIS_Shift, 1   @ bitWidth 1 (Transmit interrupt status transmitters)  
        .equ I2C1_TXE_Shift, 0   @ bitWidth 1 (Transmit data register empty transmitters)  
 
    .equ I2C1_ICR, I2C1_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C1_ALERTCF_Shift, 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C1_TIMOUTCF_Shift, 12   @ bitWidth 1 (Timeout detection flag clear)  
        .equ I2C1_PECCF_Shift, 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C1_OVRCF_Shift, 10   @ bitWidth 1 (Overrun/Underrun flag clear)  
        .equ I2C1_ARLOCF_Shift, 9   @ bitWidth 1 (Arbitration lost flag clear)  
        .equ I2C1_BERRCF_Shift, 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C1_STOPCF_Shift, 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C1_NACKCF_Shift, 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C1_ADDRCF_Shift, 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C1_PECR, I2C1_BASE + 0x20 @ (PEC register) 
        .equ I2C1_PEC_Shift, 0   @ bitWidth 8 (Packet error checking register)  
 
    .equ I2C1_RXDR, I2C1_BASE + 0x24 @ (Receive data register) 
        .equ I2C1_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C1_TXDR, I2C1_BASE + 0x28 @ (Transmit data register) 
        .equ I2C1_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== I2C2 ===========================@
.equ I2C2_BASE, 0x40005800 @ (Inter-integrated circuit) 
    .equ I2C2_CR1, I2C2_BASE + 0x0 @ (Control register 1) 
        .equ I2C2_PE_Shift, 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C2_TXIE_Shift, 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C2_RXIE_Shift, 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C2_ADDRIE_Shift, 3   @ bitWidth 1 (Address match interrupt enable slave only)  
        .equ I2C2_NACKIE_Shift, 4   @ bitWidth 1 (Not acknowledge received interrupt enable)  
        .equ I2C2_STOPIE_Shift, 5   @ bitWidth 1 (STOP detection Interrupt enable)  
        .equ I2C2_TCIE_Shift, 6   @ bitWidth 1 (Transfer Complete interrupt enable)  
        .equ I2C2_ERRIE_Shift, 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C2_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C2_ANFOFF_Shift, 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C2_TXDMAEN_Shift, 14   @ bitWidth 1 (DMA transmission requests enable)  
        .equ I2C2_RXDMAEN_Shift, 15   @ bitWidth 1 (DMA reception requests enable)  
        .equ I2C2_SBC_Shift, 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C2_NOSTRETCH_Shift, 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C2_WUPEN_Shift, 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C2_GCEN_Shift, 19   @ bitWidth 1 (General call enable)  
        .equ I2C2_SMBHEN_Shift, 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C2_SMBDEN_Shift, 21   @ bitWidth 1 (SMBus Device Default address enable)  
        .equ I2C2_ALERTEN_Shift, 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C2_PECEN_Shift, 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C2_CR2, I2C2_BASE + 0x4 @ (Control register 2) 
        .equ I2C2_PECBYTE_Shift, 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C2_AUTOEND_Shift, 25   @ bitWidth 1 (Automatic end mode master mode)  
        .equ I2C2_RELOAD_Shift, 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C2_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C2_NACK_Shift, 15   @ bitWidth 1 (NACK generation slave mode)  
        .equ I2C2_STOP_Shift, 14   @ bitWidth 1 (Stop generation master mode)  
        .equ I2C2_START_Shift, 13   @ bitWidth 1 (Start generation)  
        .equ I2C2_HEAD10R_Shift, 12   @ bitWidth 1 (10-bit address header only read direction master receiver mode)  
        .equ I2C2_ADD10_Shift, 11   @ bitWidth 1 (10-bit addressing mode master mode)  
        .equ I2C2_RD_WRN_Shift, 10   @ bitWidth 1 (Transfer direction master mode)  
        .equ I2C2_SADD_Shift, 0   @ bitWidth 10 (Slave address bit master mode)  
 
    .equ I2C2_OAR1, I2C2_BASE + 0x8 @ (Own address register 1) 
        .equ I2C2_OA1_Shift, 0   @ bitWidth 10 (Interface address)  
        .equ I2C2_OA1MODE_Shift, 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C2_OA1EN_Shift, 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C2_OAR2, I2C2_BASE + 0xC @ (Own address register 2) 
        .equ I2C2_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C2_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C2_OA2EN_Shift, 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C2_TIMINGR, I2C2_BASE + 0x10 @ (Timing register) 
        .equ I2C2_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master mode)  
        .equ I2C2_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master mode)  
        .equ I2C2_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C2_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C2_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C2_TIMEOUTR, I2C2_BASE + 0x14 @ (Status register 1) 
        .equ I2C2_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C2_TIDLE_Shift, 12   @ bitWidth 1 (Idle clock timeout detection)  
        .equ I2C2_TIMOUTEN_Shift, 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C2_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C2_TEXTEN_Shift, 31   @ bitWidth 1 (Extended clock timeout enable)  
 
    .equ I2C2_ISR, I2C2_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C2_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave mode)  
        .equ I2C2_DIR_Shift, 16   @ bitWidth 1 (Transfer direction Slave mode)  
        .equ I2C2_BUSY_Shift, 15   @ bitWidth 1 (Bus busy)  
        .equ I2C2_ALERT_Shift, 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C2_TIMEOUT_Shift, 12   @ bitWidth 1 (Timeout or t_low detection flag)  
        .equ I2C2_PECERR_Shift, 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C2_OVR_Shift, 10   @ bitWidth 1 (Overrun/Underrun slave mode)  
        .equ I2C2_ARLO_Shift, 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C2_BERR_Shift, 8   @ bitWidth 1 (Bus error)  
        .equ I2C2_TCR_Shift, 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C2_TC_Shift, 6   @ bitWidth 1 (Transfer Complete master mode)  
        .equ I2C2_STOPF_Shift, 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C2_NACKF_Shift, 4   @ bitWidth 1 (Not acknowledge received flag)  
        .equ I2C2_ADDR_Shift, 3   @ bitWidth 1 (Address matched slave mode)  
        .equ I2C2_RXNE_Shift, 2   @ bitWidth 1 (Receive data register not empty receivers)  
        .equ I2C2_TXIS_Shift, 1   @ bitWidth 1 (Transmit interrupt status transmitters)  
        .equ I2C2_TXE_Shift, 0   @ bitWidth 1 (Transmit data register empty transmitters)  
 
    .equ I2C2_ICR, I2C2_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C2_ALERTCF_Shift, 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C2_TIMOUTCF_Shift, 12   @ bitWidth 1 (Timeout detection flag clear)  
        .equ I2C2_PECCF_Shift, 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C2_OVRCF_Shift, 10   @ bitWidth 1 (Overrun/Underrun flag clear)  
        .equ I2C2_ARLOCF_Shift, 9   @ bitWidth 1 (Arbitration lost flag clear)  
        .equ I2C2_BERRCF_Shift, 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C2_STOPCF_Shift, 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C2_NACKCF_Shift, 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C2_ADDRCF_Shift, 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C2_PECR, I2C2_BASE + 0x20 @ (PEC register) 
        .equ I2C2_PEC_Shift, 0   @ bitWidth 8 (Packet error checking register)  
 
    .equ I2C2_RXDR, I2C2_BASE + 0x24 @ (Receive data register) 
        .equ I2C2_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C2_TXDR, I2C2_BASE + 0x28 @ (Transmit data register) 
        .equ I2C2_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== I2C3 ===========================@
.equ I2C3_BASE, 0x40005C00 @ (Inter-integrated circuit) 
    .equ I2C3_CR1, I2C3_BASE + 0x0 @ (Control register 1) 
        .equ I2C3_PE_Shift, 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C3_TXIE_Shift, 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C3_RXIE_Shift, 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C3_ADDRIE_Shift, 3   @ bitWidth 1 (Address match interrupt enable slave only)  
        .equ I2C3_NACKIE_Shift, 4   @ bitWidth 1 (Not acknowledge received interrupt enable)  
        .equ I2C3_STOPIE_Shift, 5   @ bitWidth 1 (STOP detection Interrupt enable)  
        .equ I2C3_TCIE_Shift, 6   @ bitWidth 1 (Transfer Complete interrupt enable)  
        .equ I2C3_ERRIE_Shift, 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C3_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C3_ANFOFF_Shift, 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C3_TXDMAEN_Shift, 14   @ bitWidth 1 (DMA transmission requests enable)  
        .equ I2C3_RXDMAEN_Shift, 15   @ bitWidth 1 (DMA reception requests enable)  
        .equ I2C3_SBC_Shift, 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C3_NOSTRETCH_Shift, 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C3_WUPEN_Shift, 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C3_GCEN_Shift, 19   @ bitWidth 1 (General call enable)  
        .equ I2C3_SMBHEN_Shift, 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C3_SMBDEN_Shift, 21   @ bitWidth 1 (SMBus Device Default address enable)  
        .equ I2C3_ALERTEN_Shift, 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C3_PECEN_Shift, 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C3_CR2, I2C3_BASE + 0x4 @ (Control register 2) 
        .equ I2C3_PECBYTE_Shift, 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C3_AUTOEND_Shift, 25   @ bitWidth 1 (Automatic end mode master mode)  
        .equ I2C3_RELOAD_Shift, 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C3_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C3_NACK_Shift, 15   @ bitWidth 1 (NACK generation slave mode)  
        .equ I2C3_STOP_Shift, 14   @ bitWidth 1 (Stop generation master mode)  
        .equ I2C3_START_Shift, 13   @ bitWidth 1 (Start generation)  
        .equ I2C3_HEAD10R_Shift, 12   @ bitWidth 1 (10-bit address header only read direction master receiver mode)  
        .equ I2C3_ADD10_Shift, 11   @ bitWidth 1 (10-bit addressing mode master mode)  
        .equ I2C3_RD_WRN_Shift, 10   @ bitWidth 1 (Transfer direction master mode)  
        .equ I2C3_SADD_Shift, 0   @ bitWidth 10 (Slave address bit master mode)  
 
    .equ I2C3_OAR1, I2C3_BASE + 0x8 @ (Own address register 1) 
        .equ I2C3_OA1_Shift, 0   @ bitWidth 10 (Interface address)  
        .equ I2C3_OA1MODE_Shift, 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C3_OA1EN_Shift, 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C3_OAR2, I2C3_BASE + 0xC @ (Own address register 2) 
        .equ I2C3_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C3_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C3_OA2EN_Shift, 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C3_TIMINGR, I2C3_BASE + 0x10 @ (Timing register) 
        .equ I2C3_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master mode)  
        .equ I2C3_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master mode)  
        .equ I2C3_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C3_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C3_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C3_TIMEOUTR, I2C3_BASE + 0x14 @ (Status register 1) 
        .equ I2C3_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C3_TIDLE_Shift, 12   @ bitWidth 1 (Idle clock timeout detection)  
        .equ I2C3_TIMOUTEN_Shift, 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C3_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C3_TEXTEN_Shift, 31   @ bitWidth 1 (Extended clock timeout enable)  
 
    .equ I2C3_ISR, I2C3_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C3_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave mode)  
        .equ I2C3_DIR_Shift, 16   @ bitWidth 1 (Transfer direction Slave mode)  
        .equ I2C3_BUSY_Shift, 15   @ bitWidth 1 (Bus busy)  
        .equ I2C3_ALERT_Shift, 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C3_TIMEOUT_Shift, 12   @ bitWidth 1 (Timeout or t_low detection flag)  
        .equ I2C3_PECERR_Shift, 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C3_OVR_Shift, 10   @ bitWidth 1 (Overrun/Underrun slave mode)  
        .equ I2C3_ARLO_Shift, 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C3_BERR_Shift, 8   @ bitWidth 1 (Bus error)  
        .equ I2C3_TCR_Shift, 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C3_TC_Shift, 6   @ bitWidth 1 (Transfer Complete master mode)  
        .equ I2C3_STOPF_Shift, 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C3_NACKF_Shift, 4   @ bitWidth 1 (Not acknowledge received flag)  
        .equ I2C3_ADDR_Shift, 3   @ bitWidth 1 (Address matched slave mode)  
        .equ I2C3_RXNE_Shift, 2   @ bitWidth 1 (Receive data register not empty receivers)  
        .equ I2C3_TXIS_Shift, 1   @ bitWidth 1 (Transmit interrupt status transmitters)  
        .equ I2C3_TXE_Shift, 0   @ bitWidth 1 (Transmit data register empty transmitters)  
 
    .equ I2C3_ICR, I2C3_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C3_ALERTCF_Shift, 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C3_TIMOUTCF_Shift, 12   @ bitWidth 1 (Timeout detection flag clear)  
        .equ I2C3_PECCF_Shift, 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C3_OVRCF_Shift, 10   @ bitWidth 1 (Overrun/Underrun flag clear)  
        .equ I2C3_ARLOCF_Shift, 9   @ bitWidth 1 (Arbitration lost flag clear)  
        .equ I2C3_BERRCF_Shift, 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C3_STOPCF_Shift, 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C3_NACKCF_Shift, 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C3_ADDRCF_Shift, 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C3_PECR, I2C3_BASE + 0x20 @ (PEC register) 
        .equ I2C3_PEC_Shift, 0   @ bitWidth 8 (Packet error checking register)  
 
    .equ I2C3_RXDR, I2C3_BASE + 0x24 @ (Receive data register) 
        .equ I2C3_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C3_TXDR, I2C3_BASE + 0x28 @ (Transmit data register) 
        .equ I2C3_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== IWDG ===========================@
.equ IWDG_BASE, 0x40003000 @ (Independent watchdog) 
    .equ IWDG_KR, IWDG_BASE + 0x0 @ (Key register) 
        .equ IWDG_KEY_Shift, 0   @ bitWidth 16 (Key value write only, read 0x0000)  
 
    .equ IWDG_PR, IWDG_BASE + 0x4 @ (Prescaler register) 
        .equ IWDG_PR_Shift, 0   @ bitWidth 3 (Prescaler divider)  
 
    .equ IWDG_RLR, IWDG_BASE + 0x8 @ (Reload register) 
        .equ IWDG_RL_Shift, 0   @ bitWidth 12 (Watchdog counter reload value)  
 
    .equ IWDG_SR, IWDG_BASE + 0xC @ (Status register) 
        .equ IWDG_WVU_Shift, 2   @ bitWidth 1 (Watchdog counter window value update)  
        .equ IWDG_RVU_Shift, 1   @ bitWidth 1 (Watchdog counter reload value update)  
        .equ IWDG_PVU_Shift, 0   @ bitWidth 1 (Watchdog prescaler value update)  
 
    .equ IWDG_WINR, IWDG_BASE + 0x10 @ (Window register) 
        .equ IWDG_WIN_Shift, 0   @ bitWidth 12 (Watchdog counter window value)  
 

@=========================== LPTIM1 ===========================@
.equ LPTIM1_BASE, 0x40007C00 @ (Low-power timer) 
    .equ LPTIM1_ISR, LPTIM1_BASE + 0x0 @ (interrupt and status register) 
        .equ LPTIM1_REPOK_Shift, 8   @ bitWidth 1 (Repetition register update Ok)  
        .equ LPTIM1_UE_Shift, 7   @ bitWidth 1 (LPTIM update event occurred)  
        .equ LPTIM1_DOWN_Shift, 6   @ bitWidth 1 (Counter direction change up to down)  
        .equ LPTIM1_UP_Shift, 5   @ bitWidth 1 (Counter direction change down to up)  
        .equ LPTIM1_ARROK_Shift, 4   @ bitWidth 1 (Autoreload register update OK)  
        .equ LPTIM1_CMPOK_Shift, 3   @ bitWidth 1 (Compare register update OK)  
        .equ LPTIM1_EXTTRIG_Shift, 2   @ bitWidth 1 (External trigger edge event)  
        .equ LPTIM1_ARRM_Shift, 1   @ bitWidth 1 (Autoreload match)  
        .equ LPTIM1_CMPM_Shift, 0   @ bitWidth 1 (Compare match)  
 
    .equ LPTIM1_ICR, LPTIM1_BASE + 0x4 @ (interrupt clear register) 
        .equ LPTIM1_REPOKCF_Shift, 8   @ bitWidth 1 (Repetition register update OK clear flag)  
        .equ LPTIM1_UECF_Shift, 7   @ bitWidth 1 (Update event clear flag)  
        .equ LPTIM1_DOWNCF_Shift, 6   @ bitWidth 1 (Direction change to down Clear Flag)  
        .equ LPTIM1_UPCF_Shift, 5   @ bitWidth 1 (Direction change to UP Clear Flag)  
        .equ LPTIM1_ARROKCF_Shift, 4   @ bitWidth 1 (Autoreload register update OK Clear Flag)  
        .equ LPTIM1_CMPOKCF_Shift, 3   @ bitWidth 1 (Compare register update OK Clear Flag)  
        .equ LPTIM1_EXTTRIGCF_Shift, 2   @ bitWidth 1 (External trigger valid edge Clear Flag)  
        .equ LPTIM1_ARRMCF_Shift, 1   @ bitWidth 1 (Autoreload match Clear Flag)  
        .equ LPTIM1_CMPMCF_Shift, 0   @ bitWidth 1 (compare match Clear Flag)  
 
    .equ LPTIM1_IER, LPTIM1_BASE + 0x8 @ (interrupt enable register) 
        .equ LPTIM1_REPOKIE_Shift, 8   @ bitWidth 1 (Repetition register update OK interrupt Enable)  
        .equ LPTIM1_UEIE_Shift, 7   @ bitWidth 1 (Update event interrupt enable)  
        .equ LPTIM1_DOWNIE_Shift, 6   @ bitWidth 1 (Direction change to down Interrupt Enable)  
        .equ LPTIM1_UPIE_Shift, 5   @ bitWidth 1 (Direction change to UP Interrupt Enable)  
        .equ LPTIM1_ARROKIE_Shift, 4   @ bitWidth 1 (Autoreload register update OK Interrupt Enable)  
        .equ LPTIM1_CMPOKIE_Shift, 3   @ bitWidth 1 (Compare register update OK Interrupt Enable)  
        .equ LPTIM1_EXTTRIGIE_Shift, 2   @ bitWidth 1 (External trigger valid edge Interrupt Enable)  
        .equ LPTIM1_ARRMIE_Shift, 1   @ bitWidth 1 (Autoreload match Interrupt Enable)  
        .equ LPTIM1_CMPMIE_Shift, 0   @ bitWidth 1 (Compare match Interrupt Enable)  
 
    .equ LPTIM1_CFGR, LPTIM1_BASE + 0xC @ (configuration register) 
        .equ LPTIM1_ENC_Shift, 24   @ bitWidth 1 (ENC)  
        .equ LPTIM1_COUNTMODE_Shift, 23   @ bitWidth 1 (COUNTMODE)  
        .equ LPTIM1_PRELOAD_Shift, 22   @ bitWidth 1 (PRELOAD)  
        .equ LPTIM1_WAVPOL_Shift, 21   @ bitWidth 1 (WAVPOL)  
        .equ LPTIM1_WAVE_Shift, 20   @ bitWidth 1 (WAVE)  
        .equ LPTIM1_TIMOUT_Shift, 19   @ bitWidth 1 (TIMOUT)  
        .equ LPTIM1_TRIGEN_Shift, 17   @ bitWidth 2 (TRIGEN)  
        .equ LPTIM1_TRIGSEL_Shift, 13   @ bitWidth 3 (TRIGSEL)  
        .equ LPTIM1_PRESC_Shift, 9   @ bitWidth 3 (PRESC)  
        .equ LPTIM1_TRGFLT_Shift, 6   @ bitWidth 2 (TRGFLT)  
        .equ LPTIM1_CKFLT_Shift, 3   @ bitWidth 2 (CKFLT)  
        .equ LPTIM1_CKPOL_Shift, 1   @ bitWidth 2 (CKPOL)  
        .equ LPTIM1_CKSEL_Shift, 0   @ bitWidth 1 (CKSEL)  
 
    .equ LPTIM1_CR, LPTIM1_BASE + 0x10 @ (control register) 
        .equ LPTIM1_RSTARE_Shift, 4   @ bitWidth 1 (RSTARE)  
        .equ LPTIM1_COUNTRST_Shift, 3   @ bitWidth 1 (COUNTRST)  
        .equ LPTIM1_CNTSTRT_Shift, 2   @ bitWidth 1 (CNTSTRT)  
        .equ LPTIM1_SNGSTRT_Shift, 1   @ bitWidth 1 (SNGSTRT)  
        .equ LPTIM1_ENABLE_Shift, 0   @ bitWidth 1 (ENABLE)  
 
    .equ LPTIM1_CMP, LPTIM1_BASE + 0x14 @ (compare register) 
        .equ LPTIM1_CMP_Shift, 0   @ bitWidth 16 (CMP)  
 
    .equ LPTIM1_ARR, LPTIM1_BASE + 0x18 @ (autoreload register) 
        .equ LPTIM1_ARR_Shift, 0   @ bitWidth 16 (Auto reload value)  
 
    .equ LPTIM1_CNT, LPTIM1_BASE + 0x1C @ (counter register) 
        .equ LPTIM1_CNT_Shift, 0   @ bitWidth 16 (Counter value)  
 
    .equ LPTIM1_LPTIM1_OR, LPTIM1_BASE + 0x20 @ (option register) 
        .equ LPTIM1_OR_1_Shift, 1   @ bitWidth 1 (Option register bit 1)  
        .equ LPTIM1_OR_0_Shift, 0   @ bitWidth 1 (Option register bit 0)  
 
    .equ LPTIM1_RCR, LPTIM1_BASE + 0x28 @ (repetition register) 
        .equ LPTIM1_REP_Shift, 0   @ bitWidth 8 (Repetition register value)  
 

@=========================== LPTIM2 ===========================@
.equ LPTIM2_BASE, 0x40009400 @ (Low-power timer) 
    .equ LPTIM2_ISR, LPTIM2_BASE + 0x0 @ (interrupt and status register) 
        .equ LPTIM2_REPOK_Shift, 8   @ bitWidth 1 (Repetition register update Ok)  
        .equ LPTIM2_UE_Shift, 7   @ bitWidth 1 (LPTIM update event occurred)  
        .equ LPTIM2_DOWN_Shift, 6   @ bitWidth 1 (Counter direction change up to down)  
        .equ LPTIM2_UP_Shift, 5   @ bitWidth 1 (Counter direction change down to up)  
        .equ LPTIM2_ARROK_Shift, 4   @ bitWidth 1 (Autoreload register update OK)  
        .equ LPTIM2_CMPOK_Shift, 3   @ bitWidth 1 (Compare register update OK)  
        .equ LPTIM2_EXTTRIG_Shift, 2   @ bitWidth 1 (External trigger edge event)  
        .equ LPTIM2_ARRM_Shift, 1   @ bitWidth 1 (Autoreload match)  
        .equ LPTIM2_CMPM_Shift, 0   @ bitWidth 1 (Compare match)  
 
    .equ LPTIM2_ICR, LPTIM2_BASE + 0x4 @ (interrupt clear register) 
        .equ LPTIM2_REPOKCF_Shift, 8   @ bitWidth 1 (Repetition register update OK clear flag)  
        .equ LPTIM2_UECF_Shift, 7   @ bitWidth 1 (Update event clear flag)  
        .equ LPTIM2_DOWNCF_Shift, 6   @ bitWidth 1 (Direction change to down Clear Flag)  
        .equ LPTIM2_UPCF_Shift, 5   @ bitWidth 1 (Direction change to UP Clear Flag)  
        .equ LPTIM2_ARROKCF_Shift, 4   @ bitWidth 1 (Autoreload register update OK Clear Flag)  
        .equ LPTIM2_CMPOKCF_Shift, 3   @ bitWidth 1 (Compare register update OK Clear Flag)  
        .equ LPTIM2_EXTTRIGCF_Shift, 2   @ bitWidth 1 (External trigger valid edge Clear Flag)  
        .equ LPTIM2_ARRMCF_Shift, 1   @ bitWidth 1 (Autoreload match Clear Flag)  
        .equ LPTIM2_CMPMCF_Shift, 0   @ bitWidth 1 (compare match Clear Flag)  
 
    .equ LPTIM2_IER, LPTIM2_BASE + 0x8 @ (interrupt enable register) 
        .equ LPTIM2_REPOKIE_Shift, 8   @ bitWidth 1 (Repetition register update OK interrupt Enable)  
        .equ LPTIM2_UEIE_Shift, 7   @ bitWidth 1 (Update event interrupt enable)  
        .equ LPTIM2_DOWNIE_Shift, 6   @ bitWidth 1 (Direction change to down Interrupt Enable)  
        .equ LPTIM2_UPIE_Shift, 5   @ bitWidth 1 (Direction change to UP Interrupt Enable)  
        .equ LPTIM2_ARROKIE_Shift, 4   @ bitWidth 1 (Autoreload register update OK Interrupt Enable)  
        .equ LPTIM2_CMPOKIE_Shift, 3   @ bitWidth 1 (Compare register update OK Interrupt Enable)  
        .equ LPTIM2_EXTTRIGIE_Shift, 2   @ bitWidth 1 (External trigger valid edge Interrupt Enable)  
        .equ LPTIM2_ARRMIE_Shift, 1   @ bitWidth 1 (Autoreload match Interrupt Enable)  
        .equ LPTIM2_CMPMIE_Shift, 0   @ bitWidth 1 (Compare match Interrupt Enable)  
 
    .equ LPTIM2_CFGR, LPTIM2_BASE + 0xC @ (configuration register) 
        .equ LPTIM2_ENC_Shift, 24   @ bitWidth 1 (ENC)  
        .equ LPTIM2_COUNTMODE_Shift, 23   @ bitWidth 1 (COUNTMODE)  
        .equ LPTIM2_PRELOAD_Shift, 22   @ bitWidth 1 (PRELOAD)  
        .equ LPTIM2_WAVPOL_Shift, 21   @ bitWidth 1 (WAVPOL)  
        .equ LPTIM2_WAVE_Shift, 20   @ bitWidth 1 (WAVE)  
        .equ LPTIM2_TIMOUT_Shift, 19   @ bitWidth 1 (TIMOUT)  
        .equ LPTIM2_TRIGEN_Shift, 17   @ bitWidth 2 (TRIGEN)  
        .equ LPTIM2_TRIGSEL_Shift, 13   @ bitWidth 3 (TRIGSEL)  
        .equ LPTIM2_PRESC_Shift, 9   @ bitWidth 3 (PRESC)  
        .equ LPTIM2_TRGFLT_Shift, 6   @ bitWidth 2 (TRGFLT)  
        .equ LPTIM2_CKFLT_Shift, 3   @ bitWidth 2 (CKFLT)  
        .equ LPTIM2_CKPOL_Shift, 1   @ bitWidth 2 (CKPOL)  
        .equ LPTIM2_CKSEL_Shift, 0   @ bitWidth 1 (CKSEL)  
 
    .equ LPTIM2_CR, LPTIM2_BASE + 0x10 @ (control register) 
        .equ LPTIM2_RSTARE_Shift, 4   @ bitWidth 1 (RSTARE)  
        .equ LPTIM2_COUNTRST_Shift, 3   @ bitWidth 1 (COUNTRST)  
        .equ LPTIM2_CNTSTRT_Shift, 2   @ bitWidth 1 (CNTSTRT)  
        .equ LPTIM2_SNGSTRT_Shift, 1   @ bitWidth 1 (SNGSTRT)  
        .equ LPTIM2_ENABLE_Shift, 0   @ bitWidth 1 (ENABLE)  
 
    .equ LPTIM2_CMP, LPTIM2_BASE + 0x14 @ (compare register) 
        .equ LPTIM2_CMP_Shift, 0   @ bitWidth 16 (CMP)  
 
    .equ LPTIM2_ARR, LPTIM2_BASE + 0x18 @ (autoreload register) 
        .equ LPTIM2_ARR_Shift, 0   @ bitWidth 16 (Auto reload value)  
 
    .equ LPTIM2_CNT, LPTIM2_BASE + 0x1C @ (counter register) 
        .equ LPTIM2_CNT_Shift, 0   @ bitWidth 16 (Counter value)  
 
    .equ LPTIM2_LPTIM2_OR, LPTIM2_BASE + 0x20 @ (option register) 
        .equ LPTIM2_OR_1_Shift, 1   @ bitWidth 1 (Option register bit 1)  
        .equ LPTIM2_OR_0_Shift, 0   @ bitWidth 1 (Option register bit 0)  
 
    .equ LPTIM2_RCR, LPTIM2_BASE + 0x28 @ (repetition register) 
        .equ LPTIM2_REP_Shift, 0   @ bitWidth 8 (Repetition register value)  
 

@=========================== LPTIM3 ===========================@
.equ LPTIM3_BASE, 0x40009800 @ (Low-power timer) 
    .equ LPTIM3_ISR, LPTIM3_BASE + 0x0 @ (interrupt and status register) 
        .equ LPTIM3_REPOK_Shift, 8   @ bitWidth 1 (Repetition register update Ok)  
        .equ LPTIM3_UE_Shift, 7   @ bitWidth 1 (LPTIM update event occurred)  
        .equ LPTIM3_DOWN_Shift, 6   @ bitWidth 1 (Counter direction change up to down)  
        .equ LPTIM3_UP_Shift, 5   @ bitWidth 1 (Counter direction change down to up)  
        .equ LPTIM3_ARROK_Shift, 4   @ bitWidth 1 (Autoreload register update OK)  
        .equ LPTIM3_CMPOK_Shift, 3   @ bitWidth 1 (Compare register update OK)  
        .equ LPTIM3_EXTTRIG_Shift, 2   @ bitWidth 1 (External trigger edge event)  
        .equ LPTIM3_ARRM_Shift, 1   @ bitWidth 1 (Autoreload match)  
        .equ LPTIM3_CMPM_Shift, 0   @ bitWidth 1 (Compare match)  
 
    .equ LPTIM3_ICR, LPTIM3_BASE + 0x4 @ (interrupt clear register) 
        .equ LPTIM3_REPOKCF_Shift, 8   @ bitWidth 1 (Repetition register update OK clear flag)  
        .equ LPTIM3_UECF_Shift, 7   @ bitWidth 1 (Update event clear flag)  
        .equ LPTIM3_DOWNCF_Shift, 6   @ bitWidth 1 (Direction change to down Clear Flag)  
        .equ LPTIM3_UPCF_Shift, 5   @ bitWidth 1 (Direction change to UP Clear Flag)  
        .equ LPTIM3_ARROKCF_Shift, 4   @ bitWidth 1 (Autoreload register update OK Clear Flag)  
        .equ LPTIM3_CMPOKCF_Shift, 3   @ bitWidth 1 (Compare register update OK Clear Flag)  
        .equ LPTIM3_EXTTRIGCF_Shift, 2   @ bitWidth 1 (External trigger valid edge Clear Flag)  
        .equ LPTIM3_ARRMCF_Shift, 1   @ bitWidth 1 (Autoreload match Clear Flag)  
        .equ LPTIM3_CMPMCF_Shift, 0   @ bitWidth 1 (compare match Clear Flag)  
 
    .equ LPTIM3_IER, LPTIM3_BASE + 0x8 @ (interrupt enable register) 
        .equ LPTIM3_REPOKIE_Shift, 8   @ bitWidth 1 (Repetition register update OK interrupt Enable)  
        .equ LPTIM3_UEIE_Shift, 7   @ bitWidth 1 (Update event interrupt enable)  
        .equ LPTIM3_DOWNIE_Shift, 6   @ bitWidth 1 (Direction change to down Interrupt Enable)  
        .equ LPTIM3_UPIE_Shift, 5   @ bitWidth 1 (Direction change to UP Interrupt Enable)  
        .equ LPTIM3_ARROKIE_Shift, 4   @ bitWidth 1 (Autoreload register update OK Interrupt Enable)  
        .equ LPTIM3_CMPOKIE_Shift, 3   @ bitWidth 1 (Compare register update OK Interrupt Enable)  
        .equ LPTIM3_EXTTRIGIE_Shift, 2   @ bitWidth 1 (External trigger valid edge Interrupt Enable)  
        .equ LPTIM3_ARRMIE_Shift, 1   @ bitWidth 1 (Autoreload match Interrupt Enable)  
        .equ LPTIM3_CMPMIE_Shift, 0   @ bitWidth 1 (Compare match Interrupt Enable)  
 
    .equ LPTIM3_CFGR, LPTIM3_BASE + 0xC @ (configuration register) 
        .equ LPTIM3_ENC_Shift, 24   @ bitWidth 1 (ENC)  
        .equ LPTIM3_COUNTMODE_Shift, 23   @ bitWidth 1 (COUNTMODE)  
        .equ LPTIM3_PRELOAD_Shift, 22   @ bitWidth 1 (PRELOAD)  
        .equ LPTIM3_WAVPOL_Shift, 21   @ bitWidth 1 (WAVPOL)  
        .equ LPTIM3_WAVE_Shift, 20   @ bitWidth 1 (WAVE)  
        .equ LPTIM3_TIMOUT_Shift, 19   @ bitWidth 1 (TIMOUT)  
        .equ LPTIM3_TRIGEN_Shift, 17   @ bitWidth 2 (TRIGEN)  
        .equ LPTIM3_TRIGSEL_Shift, 13   @ bitWidth 3 (TRIGSEL)  
        .equ LPTIM3_PRESC_Shift, 9   @ bitWidth 3 (PRESC)  
        .equ LPTIM3_TRGFLT_Shift, 6   @ bitWidth 2 (TRGFLT)  
        .equ LPTIM3_CKFLT_Shift, 3   @ bitWidth 2 (CKFLT)  
        .equ LPTIM3_CKPOL_Shift, 1   @ bitWidth 2 (CKPOL)  
        .equ LPTIM3_CKSEL_Shift, 0   @ bitWidth 1 (CKSEL)  
 
    .equ LPTIM3_CR, LPTIM3_BASE + 0x10 @ (control register) 
        .equ LPTIM3_RSTARE_Shift, 4   @ bitWidth 1 (RSTARE)  
        .equ LPTIM3_COUNTRST_Shift, 3   @ bitWidth 1 (COUNTRST)  
        .equ LPTIM3_CNTSTRT_Shift, 2   @ bitWidth 1 (CNTSTRT)  
        .equ LPTIM3_SNGSTRT_Shift, 1   @ bitWidth 1 (SNGSTRT)  
        .equ LPTIM3_ENABLE_Shift, 0   @ bitWidth 1 (ENABLE)  
 
    .equ LPTIM3_CMP, LPTIM3_BASE + 0x14 @ (compare register) 
        .equ LPTIM3_CMP_Shift, 0   @ bitWidth 16 (CMP)  
 
    .equ LPTIM3_ARR, LPTIM3_BASE + 0x18 @ (autoreload register) 
        .equ LPTIM3_ARR_Shift, 0   @ bitWidth 16 (Auto reload value)  
 
    .equ LPTIM3_CNT, LPTIM3_BASE + 0x1C @ (counter register) 
        .equ LPTIM3_CNT_Shift, 0   @ bitWidth 16 (Counter value)  
 
    .equ LPTIM3_LPTIM3_OR, LPTIM3_BASE + 0x20 @ (option register) 
        .equ LPTIM3_OR_1_Shift, 1   @ bitWidth 1 (Option register bit 1)  
        .equ LPTIM3_OR_0_Shift, 0   @ bitWidth 1 (Option register bit 0)  
 
    .equ LPTIM3_RCR, LPTIM3_BASE + 0x28 @ (repetition register) 
        .equ LPTIM3_REP_Shift, 0   @ bitWidth 8 (Repetition register value)  
 

@=========================== LPUART ===========================@
.equ LPUART_BASE, 0x40008000 @ (Universal synchronous asynchronous receiver transmitter) 
    .equ LPUART_CR1_enabled, LPUART_BASE + 0x0 @ (Control register 1) 
        .equ LPUART_RXFFIE_Shift, 31   @ bitWidth 1 (RXFIFO Full interrupt enable)  
        .equ LPUART_TXFEIE_Shift, 30   @ bitWidth 1 (TXFIFO empty interrupt enable)  
        .equ LPUART_FIFOEN_Shift, 29   @ bitWidth 1 (FIFO mode enable)  
        .equ LPUART_M1_Shift, 28   @ bitWidth 1 (Word length)  
        .equ LPUART_DEAT_Shift, 21   @ bitWidth 5 (DEAT)  
        .equ LPUART_DEDT_Shift, 16   @ bitWidth 5 (DEDT)  
        .equ LPUART_CMIE_Shift, 14   @ bitWidth 1 (Character match interrupt enable)  
        .equ LPUART_MME_Shift, 13   @ bitWidth 1 (Mute mode enable)  
        .equ LPUART_M0_Shift, 12   @ bitWidth 1 (Word length)  
        .equ LPUART_WAKE_Shift, 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ LPUART_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ LPUART_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ LPUART_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ LPUART_TXFNFIE_Shift, 7   @ bitWidth 1 (interrupt enable)  
        .equ LPUART_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt enable)  
        .equ LPUART_RXNEIE_Shift, 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ LPUART_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ LPUART_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ LPUART_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ LPUART_UESM_Shift, 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ LPUART_UE_Shift, 0   @ bitWidth 1 (USART enable)  
 
    .equ LPUART_CR1_disabled, LPUART_BASE + 0x0 @ (Control register 1) 
        .equ LPUART_FIFOEN_Shift, 29   @ bitWidth 1 (FIFOEN)  
        .equ LPUART_M1_Shift, 28   @ bitWidth 1 (Word length)  
        .equ LPUART_DEAT_Shift, 21   @ bitWidth 5 (DEAT)  
        .equ LPUART_DEDT_Shift, 16   @ bitWidth 5 (DEDT)  
        .equ LPUART_CMIE_Shift, 14   @ bitWidth 1 (Character match interrupt  enable)  
        .equ LPUART_MME_Shift, 13   @ bitWidth 1 (Mute mode enable)  
        .equ LPUART_M0_Shift, 12   @ bitWidth 1 (Word length)  
        .equ LPUART_WAKE_Shift, 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ LPUART_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ LPUART_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ LPUART_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ LPUART_TXEIE_Shift, 7   @ bitWidth 1 (Transmit data register empty)  
        .equ LPUART_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ LPUART_RXFNEIE_Shift, 5   @ bitWidth 1 (RXFIFO not empty interrupt enable)  
        .equ LPUART_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ LPUART_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ LPUART_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ LPUART_UESM_Shift, 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ LPUART_UE_Shift, 0   @ bitWidth 1 (USART enable)  
 
    .equ LPUART_CR2, LPUART_BASE + 0x4 @ (Control register 2) 
        .equ LPUART_ADD_Shift, 24   @ bitWidth 8 (Address of the LPUART node)  
        .equ LPUART_MSBFIRST_Shift, 19   @ bitWidth 1 (Most significant bit first)  
        .equ LPUART_DATAINV_Shift, 18   @ bitWidth 1 (Binary data inversion)  
        .equ LPUART_TXINV_Shift, 17   @ bitWidth 1 (TX pin active level inversion)  
        .equ LPUART_RXINV_Shift, 16   @ bitWidth 1 (RX pin active level inversion)  
        .equ LPUART_SWAP_Shift, 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ LPUART_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ LPUART_ADDM7_Shift, 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address Detection)  
 
    .equ LPUART_CR3, LPUART_BASE + 0x8 @ (Control register 3) 
        .equ LPUART_TXFTCFG_Shift, 29   @ bitWidth 3 (TXFIFO threshold configuration)  
        .equ LPUART_RXFTIE_Shift, 28   @ bitWidth 1 (RXFIFO threshold interrupt enable)  
        .equ LPUART_RXFTCFG_Shift, 25   @ bitWidth 3 (Receive FIFO threshold configuration)  
        .equ LPUART_TXFTIE_Shift, 23   @ bitWidth 1 (threshold interrupt enable)  
        .equ LPUART_WUFIE_Shift, 22   @ bitWidth 1 (Wakeup from Stop mode interrupt enable)  
        .equ LPUART_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag selection)  
        .equ LPUART_DEP_Shift, 15   @ bitWidth 1 (Driver enable polarity selection)  
        .equ LPUART_DEM_Shift, 14   @ bitWidth 1 (Driver enable mode)  
        .equ LPUART_DDRE_Shift, 13   @ bitWidth 1 (DMA Disable on Reception Error)  
        .equ LPUART_OVRDIS_Shift, 12   @ bitWidth 1 (Overrun Disable)  
        .equ LPUART_CTSIE_Shift, 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ LPUART_CTSE_Shift, 9   @ bitWidth 1 (CTS enable)  
        .equ LPUART_RTSE_Shift, 8   @ bitWidth 1 (RTS enable)  
        .equ LPUART_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ LPUART_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ LPUART_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ LPUART_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ LPUART_BRR, LPUART_BASE + 0xC @ (Baud rate register) 
        .equ LPUART_BRR_Shift, 0   @ bitWidth 20 (BRR)  
 
    .equ LPUART_RQR, LPUART_BASE + 0x18 @ (Request register) 
        .equ LPUART_TXFRQ_Shift, 4   @ bitWidth 1 (Transmit data flush request)  
        .equ LPUART_RXFRQ_Shift, 3   @ bitWidth 1 (Receive data flush request)  
        .equ LPUART_MMRQ_Shift, 2   @ bitWidth 1 (Mute mode request)  
        .equ LPUART_SBKRQ_Shift, 1   @ bitWidth 1 (Send break request)  
 
    .equ LPUART_ISR_enabled, LPUART_BASE + 0x1C @ (Interrupt and status register) 
        .equ LPUART_TXFT_Shift, 27   @ bitWidth 1 (TXFIFO threshold flag)  
        .equ LPUART_RXFT_Shift, 26   @ bitWidth 1 (RXFIFO threshold flag)  
        .equ LPUART_RXFF_Shift, 24   @ bitWidth 1 (RXFIFO Full)  
        .equ LPUART_TXFE_Shift, 23   @ bitWidth 1 (TXFIFO Empty)  
        .equ LPUART_REACK_Shift, 22   @ bitWidth 1 (REACK)  
        .equ LPUART_TEACK_Shift, 21   @ bitWidth 1 (TEACK)  
        .equ LPUART_WUF_Shift, 20   @ bitWidth 1 (WUF)  
        .equ LPUART_RWU_Shift, 19   @ bitWidth 1 (RWU)  
        .equ LPUART_SBKF_Shift, 18   @ bitWidth 1 (SBKF)  
        .equ LPUART_CMF_Shift, 17   @ bitWidth 1 (CMF)  
        .equ LPUART_BUSY_Shift, 16   @ bitWidth 1 (BUSY)  
        .equ LPUART_CTS_Shift, 10   @ bitWidth 1 (CTS)  
        .equ LPUART_CTSIF_Shift, 9   @ bitWidth 1 (CTSIF)  
        .equ LPUART_TXFNF_Shift, 7   @ bitWidth 1 (TXFNF)  
        .equ LPUART_TC_Shift, 6   @ bitWidth 1 (TC)  
        .equ LPUART_RXFNE_Shift, 5   @ bitWidth 1 (RXFNE)  
        .equ LPUART_IDLE_Shift, 4   @ bitWidth 1 (IDLE)  
        .equ LPUART_ORE_Shift, 3   @ bitWidth 1 (ORE)  
        .equ LPUART_NE_Shift, 2   @ bitWidth 1 (NE)  
        .equ LPUART_FE_Shift, 1   @ bitWidth 1 (FE)  
        .equ LPUART_PE_Shift, 0   @ bitWidth 1 (PE)  
 
    .equ LPUART_ISR_disabled, LPUART_BASE + 0x1C @ (Interrupt and status register) 
        .equ LPUART_REACK_Shift, 22   @ bitWidth 1 (REACK)  
        .equ LPUART_TEACK_Shift, 21   @ bitWidth 1 (TEACK)  
        .equ LPUART_WUF_Shift, 20   @ bitWidth 1 (WUF)  
        .equ LPUART_RWU_Shift, 19   @ bitWidth 1 (RWU)  
        .equ LPUART_SBKF_Shift, 18   @ bitWidth 1 (SBKF)  
        .equ LPUART_CMF_Shift, 17   @ bitWidth 1 (CMF)  
        .equ LPUART_BUSY_Shift, 16   @ bitWidth 1 (BUSY)  
        .equ LPUART_CTS_Shift, 10   @ bitWidth 1 (CTS)  
        .equ LPUART_CTSIF_Shift, 9   @ bitWidth 1 (CTSIF)  
        .equ LPUART_TXE_Shift, 7   @ bitWidth 1 (TXE)  
        .equ LPUART_TC_Shift, 6   @ bitWidth 1 (TC)  
        .equ LPUART_RXFNE_Shift, 5   @ bitWidth 1 (RXFNE)  
        .equ LPUART_IDLE_Shift, 4   @ bitWidth 1 (IDLE)  
        .equ LPUART_ORE_Shift, 3   @ bitWidth 1 (ORE)  
        .equ LPUART_NE_Shift, 2   @ bitWidth 1 (NE)  
        .equ LPUART_FE_Shift, 1   @ bitWidth 1 (FE)  
        .equ LPUART_PE_Shift, 0   @ bitWidth 1 (PE)  
 
    .equ LPUART_ICR, LPUART_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ LPUART_WUCF_Shift, 20   @ bitWidth 1 (Wakeup from Stop mode clear flag)  
        .equ LPUART_CMCF_Shift, 17   @ bitWidth 1 (Character match clear flag)  
        .equ LPUART_CTSCF_Shift, 9   @ bitWidth 1 (CTS clear flag)  
        .equ LPUART_TCCF_Shift, 6   @ bitWidth 1 (Transmission complete clear flag)  
        .equ LPUART_IDLECF_Shift, 4   @ bitWidth 1 (Idle line detected clear flag)  
        .equ LPUART_ORECF_Shift, 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ LPUART_NECF_Shift, 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ LPUART_FECF_Shift, 1   @ bitWidth 1 (Framing error clear flag)  
        .equ LPUART_PECF_Shift, 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ LPUART_RDR, LPUART_BASE + 0x24 @ (Receive data register) 
        .equ LPUART_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ LPUART_TDR, LPUART_BASE + 0x28 @ (Transmit data register) 
        .equ LPUART_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 
    .equ LPUART_PRESC, LPUART_BASE + 0x2C @ (Prescaler register) 
        .equ LPUART_PRESCALER_Shift, 0   @ bitWidth 4 (Clock prescaler)  
 

@=========================== MPU ===========================@
.equ MPU_BASE, 0xE000ED90 @ (Memory protection unit) 
    .equ MPU_MPU_TYPER, MPU_BASE + 0x0 @ (MPU type register) 
        .equ MPU_SEPARATE_Shift, 0   @ bitWidth 1 (Separate flag)  
        .equ MPU_DREGION_Shift, 8   @ bitWidth 8 (Number of MPU data regions)  
        .equ MPU_IREGION_Shift, 16   @ bitWidth 8 (Number of MPU instruction regions)  
 
    .equ MPU_MPU_CTRL, MPU_BASE + 0x4 @ (MPU control register) 
        .equ MPU_ENABLE_Shift, 0   @ bitWidth 1 (Enables the MPU)  
        .equ MPU_HFNMIENA_Shift, 1   @ bitWidth 1 (Enables the operation of MPU during hard fault)  
        .equ MPU_PRIVDEFENA_Shift, 2   @ bitWidth 1 (Enable priviliged software access to default memory map)  
 
    .equ MPU_MPU_RNR, MPU_BASE + 0x8 @ (MPU region number register) 
        .equ MPU_REGION_Shift, 0   @ bitWidth 8 (MPU region)  
 
    .equ MPU_MPU_RBAR, MPU_BASE + 0xC @ (MPU region base address register) 
        .equ MPU_REGION_Shift, 0   @ bitWidth 4 (MPU region field)  
        .equ MPU_VALID_Shift, 4   @ bitWidth 1 (MPU region number valid)  
        .equ MPU_ADDR_Shift, 5   @ bitWidth 27 (Region base address field)  
 
    .equ MPU_MPU_RASR, MPU_BASE + 0x10 @ (MPU region attribute and size register) 
        .equ MPU_ENABLE_Shift, 0   @ bitWidth 1 (Region enable bit.)  
        .equ MPU_SIZE_Shift, 1   @ bitWidth 5 (Size of the MPU protection region)  
        .equ MPU_SRD_Shift, 8   @ bitWidth 8 (Subregion disable bits)  
        .equ MPU_B_Shift, 16   @ bitWidth 1 (memory attribute)  
        .equ MPU_C_Shift, 17   @ bitWidth 1 (memory attribute)  
        .equ MPU_S_Shift, 18   @ bitWidth 1 (Shareable memory attribute)  
        .equ MPU_TEX_Shift, 19   @ bitWidth 3 (memory attribute)  
        .equ MPU_AP_Shift, 24   @ bitWidth 3 (Access permission)  
        .equ MPU_XN_Shift, 28   @ bitWidth 1 (Instruction access disable bit)  
 

@=========================== NVIC ===========================@
.equ NVIC_BASE, 0xE000E100 @ (Nested Vectored Interrupt Controller) 
    .equ NVIC_ISER0, NVIC_BASE + 0x0 @ (Interrupt Set-Enable Register) 
        .equ NVIC_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ISER1, NVIC_BASE + 0x4 @ (Interrupt Set-Enable Register) 
        .equ NVIC_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ICER0, NVIC_BASE + 0x80 @ (Interrupt Clear-Enable Register) 
        .equ NVIC_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ICER1, NVIC_BASE + 0x84 @ (Interrupt Clear-Enable Register) 
        .equ NVIC_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ISPR0, NVIC_BASE + 0x100 @ (Interrupt Set-Pending Register) 
        .equ NVIC_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ISPR1, NVIC_BASE + 0x104 @ (Interrupt Set-Pending Register) 
        .equ NVIC_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ICPR0, NVIC_BASE + 0x180 @ (Interrupt Clear-Pending Register) 
        .equ NVIC_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_ICPR1, NVIC_BASE + 0x184 @ (Interrupt Clear-Pending Register) 
        .equ NVIC_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_IABR0, NVIC_BASE + 0x200 @ (Interrupt Active Bit Register) 
        .equ NVIC_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IABR1, NVIC_BASE + 0x204 @ (Interrupt Active Bit Register) 
        .equ NVIC_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IPR0, NVIC_BASE + 0x300 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR1, NVIC_BASE + 0x304 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR2, NVIC_BASE + 0x308 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR3, NVIC_BASE + 0x30C @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR4, NVIC_BASE + 0x310 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR5, NVIC_BASE + 0x314 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR6, NVIC_BASE + 0x318 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR7, NVIC_BASE + 0x31C @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR8, NVIC_BASE + 0x320 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR9, NVIC_BASE + 0x324 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR10, NVIC_BASE + 0x328 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR11, NVIC_BASE + 0x32C @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR12, NVIC_BASE + 0x330 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR13, NVIC_BASE + 0x334 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR14, NVIC_BASE + 0x338 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR15, NVIC_BASE + 0x33C @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR16, NVIC_BASE + 0x340 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR17, NVIC_BASE + 0x344 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 

@=========================== NVIC_STIR ===========================@
.equ NVIC_STIR_BASE, 0xE000EF00 @ (Nested vectored interrupt controller) 
    .equ NVIC_STIR_STIR, NVIC_STIR_BASE + 0x0 @ (Software trigger interrupt register) 
        .equ NVIC_STIR_INTID_Shift, 0   @ bitWidth 9 (Software generated interrupt ID)  
 

@=========================== PKA ===========================@
.equ PKA_BASE, 0x58002000 @ (Public key accelerator) 
    .equ PKA_CR, PKA_BASE + 0x0 @ (control register) 
        .equ PKA_ADDRERRIE_Shift, 20   @ bitWidth 1 (Address error interrupt enable)  
        .equ PKA_RAMERRIE_Shift, 19   @ bitWidth 1 (RAM error interrupt enable)  
        .equ PKA_PROCENDIE_Shift, 17   @ bitWidth 1 (PROCENDIE)  
        .equ PKA_MODE_Shift, 8   @ bitWidth 6 (PKA operation code)  
        .equ PKA_START_Shift, 1   @ bitWidth 1 (start the operation)  
        .equ PKA_EN_Shift, 0   @ bitWidth 1 (PKA enable.)  
 
    .equ PKA_SR, PKA_BASE + 0x4 @ (status register) 
        .equ PKA_ADDRERRF_Shift, 20   @ bitWidth 1 (Address error flag)  
        .equ PKA_RAMERRF_Shift, 19   @ bitWidth 1 (PKA RAM error flag)  
        .equ PKA_PROCENDF_Shift, 17   @ bitWidth 1 (PKA End of Operation flag)  
        .equ PKA_BUSY_Shift, 16   @ bitWidth 1 (PKA operation is in progressThis bit is set to 1 whenever START bit in the PKA_CR is set. It is automatically cleared when the computation is complete, meaning that PKA RAM can be safely accessed and a new operation can be started.)  
 
    .equ PKA_CLRFR, PKA_BASE + 0x8 @ (clear flag register) 
        .equ PKA_ADDRERRFC_Shift, 20   @ bitWidth 1 (Clear Address error flag)  
        .equ PKA_RAMERRFC_Shift, 19   @ bitWidth 1 (Clear PKA RAM error flag)  
        .equ PKA_PROCENDFC_Shift, 17   @ bitWidth 1 (Clear PKA End of Operation flag)  
 

@=========================== PWR ===========================@
.equ PWR_BASE, 0x58000400 @ (Power control) 
    .equ PWR_CR1, PWR_BASE + 0x0 @ (Power control register 1) 
        .equ PWR_LPR_Shift, 14   @ bitWidth 1 (Low-power run)  
        .equ PWR_VOS_Shift, 9   @ bitWidth 2 (Voltage scaling range selection)  
        .equ PWR_DBP_Shift, 8   @ bitWidth 1 (Disable backup domain write protection)  
        .equ PWR_FPDS_Shift, 5   @ bitWidth 1 (Flash memory power down mode during LPSleep for CPU1)  
        .equ PWR_FPDR_Shift, 4   @ bitWidth 1 (Flash memory power down mode during LPRun for CPU1)  
        .equ PWR_SUBGHZSPINSSSEL_Shift, 3   @ bitWidth 1 (sub-GHz SPI NSS source select)  
        .equ PWR_LPMS_Shift, 0   @ bitWidth 3 (Low-power mode selection for CPU1)  
 
    .equ PWR_CR2, PWR_BASE + 0x4 @ (Power control register 2) 
        .equ PWR_PVME3_Shift, 6   @ bitWidth 1 (Peripheral voltage monitoring 3 enable: VDDA vs. 1.62V)  
        .equ PWR_PLS_Shift, 1   @ bitWidth 3 (Power voltage detector level selection.)  
        .equ PWR_PVDE_Shift, 0   @ bitWidth 1 (Power voltage detector enable)  
 
    .equ PWR_CR3, PWR_BASE + 0x8 @ (Power control register 3) 
        .equ PWR_EIWUL_Shift, 15   @ bitWidth 1 (Enable internal wakeup line for CPU1)  
        .equ PWR_EWRFIRQ_Shift, 13   @ bitWidth 1 (akeup for CPU1)  
        .equ PWR_EWRFBUSY_Shift, 11   @ bitWidth 1 (Enable Radio BUSY Wakeup from Standby for CPU1)  
        .equ PWR_APC_Shift, 10   @ bitWidth 1 (Apply pull-up and pull-down configuration from CPU1)  
        .equ PWR_RRS_Shift, 9   @ bitWidth 1 (SRAM2 retention in Standby mode)  
        .equ PWR_EWPVD_Shift, 8   @ bitWidth 1 (Enable wakeup PVD for CPU1)  
        .equ PWR_EULPEN_Shift, 7   @ bitWidth 1 (Ultra-low-power enable)  
        .equ PWR_EWUP3_Shift, 2   @ bitWidth 1 (Enable Wakeup pin WKUP3 for CPU1)  
        .equ PWR_EWUP2_Shift, 1   @ bitWidth 1 (Enable Wakeup pin WKUP2 for CPU1)  
        .equ PWR_EWUP1_Shift, 0   @ bitWidth 1 (Enable Wakeup pin WKUP1 for CPU1)  
 
    .equ PWR_CR4, PWR_BASE + 0xC @ (Power control register 4) 
        .equ PWR_WRFBUSYP_Shift, 11   @ bitWidth 1 (Wakeup Radio BUSY polarity)  
        .equ PWR_VBRS_Shift, 9   @ bitWidth 1 (VBAT battery charging resistor selection)  
        .equ PWR_VBE_Shift, 8   @ bitWidth 1 (VBAT battery charging enable)  
        .equ PWR_WP3_Shift, 2   @ bitWidth 1 (Wakeup pin WKUP3 polarity)  
        .equ PWR_WP2_Shift, 1   @ bitWidth 1 (Wakeup pin WKUP2 polarity)  
        .equ PWR_WP1_Shift, 0   @ bitWidth 1 (Wakeup pin WKUP1 polarity)  
 
    .equ PWR_SR1, PWR_BASE + 0x10 @ (Power status register 1) 
        .equ PWR_WUFI_Shift, 15   @ bitWidth 1 (Internal wakeup interrupt flag)  
        .equ PWR_WRFBUSYF_Shift, 11   @ bitWidth 1 (Radio BUSY wakeup flag)  
        .equ PWR_WPVDF_Shift, 8   @ bitWidth 1 (Wakeup PVD flag)  
        .equ PWR_WUF3_Shift, 2   @ bitWidth 1 (Wakeup flag 3)  
        .equ PWR_WUF2_Shift, 1   @ bitWidth 1 (Wakeup flag 2)  
        .equ PWR_WUF1_Shift, 0   @ bitWidth 1 (Wakeup flag 1)  
 
    .equ PWR_SR2, PWR_BASE + 0x14 @ (Power status register 2) 
        .equ PWR_PVMO3_Shift, 14   @ bitWidth 1 (Peripheral voltage monitoring output: VDDA vs. 1.62 V)  
        .equ PWR_PVDO_Shift, 11   @ bitWidth 1 (Power voltage detector output)  
        .equ PWR_VOSF_Shift, 10   @ bitWidth 1 (Voltage scaling flag)  
        .equ PWR_REGLPF_Shift, 9   @ bitWidth 1 (regulator1 low power flag)  
        .equ PWR_REGLPS_Shift, 8   @ bitWidth 1 (regulator1 started)  
        .equ PWR_FLASHRDY_Shift, 7   @ bitWidth 1 (Flash ready)  
        .equ PWR_REGMRS_Shift, 6   @ bitWidth 1 (regulator2 low power flag)  
        .equ PWR_RFEOLF_Shift, 5   @ bitWidth 1 (Radio end of life flag)  
        .equ PWR_LDORDY_Shift, 4   @ bitWidth 1 (LDO ready flag)  
        .equ PWR_SMPSRDY_Shift, 3   @ bitWidth 1 (SMPS ready flag)  
        .equ PWR_RFBUSYMS_Shift, 2   @ bitWidth 1 (Radio BUSY masked signal status)  
        .equ PWR_RFBUSYS_Shift, 1   @ bitWidth 1 (Radio BUSY signal status)  
 
    .equ PWR_SCR, PWR_BASE + 0x18 @ (Power status clear register) 
        .equ PWR_CWRFBUSYF_Shift, 11   @ bitWidth 1 (Clear wakeup Radio BUSY flag)  
        .equ PWR_CWPVDF_Shift, 8   @ bitWidth 1 (Clear wakeup PVD interrupt flag)  
        .equ PWR_CWUF3_Shift, 2   @ bitWidth 1 (Clear wakeup flag 3)  
        .equ PWR_CWUF2_Shift, 1   @ bitWidth 1 (Clear wakeup flag 2)  
        .equ PWR_CWUF1_Shift, 0   @ bitWidth 1 (Clear wakeup flag 1)  
 
    .equ PWR_CR5, PWR_BASE + 0x1C @ (Power control register 5) 
        .equ PWR_SMPSEN_Shift, 15   @ bitWidth 1 (Enable SMPS Step Down converter SMPS mode enabled.)  
        .equ PWR_RFEOLEN_Shift, 14   @ bitWidth 1 (Enable Radio End Of Life detector enabled)  
 
    .equ PWR_PUCRA, PWR_BASE + 0x20 @ (Power Port A pull-up control register) 
        .equ PWR_PU15_Shift, 15   @ bitWidth 1 (Port PA15 pull-up)  
        .equ PWR_PU14_Shift, 14   @ bitWidth 1 (PU14)  
        .equ PWR_PU13_Shift, 13   @ bitWidth 1 (Port PA[y] pull-up bit y y=0 to 13)  
        .equ PWR_PU12_Shift, 12   @ bitWidth 1 (PU12)  
        .equ PWR_PU11_Shift, 11   @ bitWidth 1 (PU11)  
        .equ PWR_PU10_Shift, 10   @ bitWidth 1 (PU10)  
        .equ PWR_PU9_Shift, 9   @ bitWidth 1 (PU9)  
        .equ PWR_PU8_Shift, 8   @ bitWidth 1 (PU8)  
        .equ PWR_PU7_Shift, 7   @ bitWidth 1 (PU7)  
        .equ PWR_PU6_Shift, 6   @ bitWidth 1 (PU6)  
        .equ PWR_PU5_Shift, 5   @ bitWidth 1 (PU5)  
        .equ PWR_PU4_Shift, 4   @ bitWidth 1 (PU4)  
        .equ PWR_PU3_Shift, 3   @ bitWidth 1 (PU3)  
        .equ PWR_PU2_Shift, 2   @ bitWidth 1 (PU2)  
        .equ PWR_PU1_Shift, 1   @ bitWidth 1 (PU1)  
        .equ PWR_PU0_Shift, 0   @ bitWidth 1 (PU0)  
 
    .equ PWR_PDCRA, PWR_BASE + 0x24 @ (Power Port A pull-down control register) 
        .equ PWR_PD15_Shift, 15   @ bitWidth 1 (PD15)  
        .equ PWR_PD14_Shift, 14   @ bitWidth 1 (ull-down)  
        .equ PWR_PD13_Shift, 13   @ bitWidth 1 (PD13)  
        .equ PWR_PD12_Shift, 12   @ bitWidth 1 (Port PA[y] pull-down y=0 to 12)  
        .equ PWR_PD11_Shift, 11   @ bitWidth 1 (PD11)  
        .equ PWR_PD10_Shift, 10   @ bitWidth 1 (PD10)  
        .equ PWR_PD9_Shift, 9   @ bitWidth 1 (PD9)  
        .equ PWR_PD8_Shift, 8   @ bitWidth 1 (PD8)  
        .equ PWR_PD7_Shift, 7   @ bitWidth 1 (PD7)  
        .equ PWR_PD6_Shift, 6   @ bitWidth 1 (PD6)  
        .equ PWR_PD5_Shift, 5   @ bitWidth 1 (PD5)  
        .equ PWR_PD4_Shift, 4   @ bitWidth 1 (PD4)  
        .equ PWR_PD3_Shift, 3   @ bitWidth 1 (PD3)  
        .equ PWR_PD2_Shift, 2   @ bitWidth 1 (PD2)  
        .equ PWR_PD1_Shift, 1   @ bitWidth 1 (PD1)  
        .equ PWR_PD0_Shift, 0   @ bitWidth 1 (PD0)  
 
    .equ PWR_PUCRB, PWR_BASE + 0x28 @ (Power Port B pull-up control register) 
        .equ PWR_PU15_Shift, 15   @ bitWidth 1 (Port PB[y] pull-up y=0 to 15)  
        .equ PWR_PU14_Shift, 14   @ bitWidth 1 (PU14)  
        .equ PWR_PU13_Shift, 13   @ bitWidth 1 (PU13)  
        .equ PWR_PU12_Shift, 12   @ bitWidth 1 (PU12)  
        .equ PWR_PU11_Shift, 11   @ bitWidth 1 (PU11)  
        .equ PWR_PU10_Shift, 10   @ bitWidth 1 (PU10)  
        .equ PWR_PU9_Shift, 9   @ bitWidth 1 (PU9)  
        .equ PWR_PU8_Shift, 8   @ bitWidth 1 (PU8)  
        .equ PWR_PU7_Shift, 7   @ bitWidth 1 (PU7)  
        .equ PWR_PU6_Shift, 6   @ bitWidth 1 (PU6)  
        .equ PWR_PU5_Shift, 5   @ bitWidth 1 (PU5)  
        .equ PWR_PU4_Shift, 4   @ bitWidth 1 (PU4)  
        .equ PWR_PU3_Shift, 3   @ bitWidth 1 (PU3)  
        .equ PWR_PU2_Shift, 2   @ bitWidth 1 (PU2)  
        .equ PWR_PU1_Shift, 1   @ bitWidth 1 (PU1)  
        .equ PWR_PU0_Shift, 0   @ bitWidth 1 (PU0)  
 
    .equ PWR_PDCRB, PWR_BASE + 0x2C @ (Power Port B pull-down control register) 
        .equ PWR_PD15_Shift, 15   @ bitWidth 1 (Port PB[y] pull-down y=5 to 15)  
        .equ PWR_PD14_Shift, 14   @ bitWidth 1 (PD14)  
        .equ PWR_PD13_Shift, 13   @ bitWidth 1 (PD13)  
        .equ PWR_PD12_Shift, 12   @ bitWidth 1 (PD12)  
        .equ PWR_PD11_Shift, 11   @ bitWidth 1 (PD11)  
        .equ PWR_PD10_Shift, 10   @ bitWidth 1 (PD10)  
        .equ PWR_PD9_Shift, 9   @ bitWidth 1 (PD9)  
        .equ PWR_PD8_Shift, 8   @ bitWidth 1 (PD8)  
        .equ PWR_PD7_Shift, 7   @ bitWidth 1 (PD7)  
        .equ PWR_PD6_Shift, 6   @ bitWidth 1 (PD6)  
        .equ PWR_PD5_Shift, 5   @ bitWidth 1 (PD5)  
        .equ PWR_PD4_Shift, 4   @ bitWidth 1 (PD4)  
        .equ PWR_PD3_Shift, 3   @ bitWidth 1 (Port PB[y] pull-down y=0 to 3)  
        .equ PWR_PD2_Shift, 2   @ bitWidth 1 (PD2)  
        .equ PWR_PD1_Shift, 1   @ bitWidth 1 (PD1)  
        .equ PWR_PD0_Shift, 0   @ bitWidth 1 (PD0)  
 
    .equ PWR_PUCRC, PWR_BASE + 0x30 @ (Power Port C pull-up control register) 
        .equ PWR_PU15_Shift, 15   @ bitWidth 1 (Port PC[y] pull-up y=13 to 15)  
        .equ PWR_PU14_Shift, 14   @ bitWidth 1 (PU14)  
        .equ PWR_PU13_Shift, 13   @ bitWidth 1 (PU13)  
        .equ PWR_PU2_Shift, 2   @ bitWidth 1 (PU2)  
        .equ PWR_PU1_Shift, 1   @ bitWidth 1 (PU1)  
        .equ PWR_PU0_Shift, 0   @ bitWidth 1 (PU0)  
        .equ PWR_PU3_Shift, 3   @ bitWidth 1 (PU3)  
        .equ PWR_PU4_Shift, 4   @ bitWidth 1 (PU4)  
        .equ PWR_PU5_Shift, 5   @ bitWidth 1 (PU5)  
        .equ PWR_PU6_Shift, 6   @ bitWidth 1 (PU6)  
 
    .equ PWR_PDCRC, PWR_BASE + 0x34 @ (Power Port C pull-down control register) 
        .equ PWR_PD15_Shift, 15   @ bitWidth 1 (Port PC[y] pull-down y=13 to 15)  
        .equ PWR_PD14_Shift, 14   @ bitWidth 1 (PD14)  
        .equ PWR_PD13_Shift, 13   @ bitWidth 1 (PD13)  
        .equ PWR_PD2_Shift, 2   @ bitWidth 1 (PD2)  
        .equ PWR_PD1_Shift, 1   @ bitWidth 1 (PD1)  
        .equ PWR_PD0_Shift, 0   @ bitWidth 1 (PD0)  
        .equ PWR_PD3_Shift, 3   @ bitWidth 1 (PD3)  
        .equ PWR_PD4_Shift, 4   @ bitWidth 1 (PD4)  
        .equ PWR_PD5_Shift, 5   @ bitWidth 1 (PD5)  
        .equ PWR_PD6_Shift, 6   @ bitWidth 1 (PD6)  
 
    .equ PWR_PUCRH, PWR_BASE + 0x58 @ (Power Port H pull-up control register) 
        .equ PWR_PU3_Shift, 3   @ bitWidth 1 (pull-up)  
 
    .equ PWR_PDCRH, PWR_BASE + 0x5C @ (Power Port H pull-down control register) 
        .equ PWR_PD3_Shift, 3   @ bitWidth 1 (pull-down)  
 
    .equ PWR_EXTSCR, PWR_BASE + 0x88 @ (Power extended status and status clear register) 
        .equ PWR_C1DS_Shift, 14   @ bitWidth 1 (CPU1 deepsleep mode)  
        .equ PWR_C1STOPF_Shift, 10   @ bitWidth 1 (System Stop0, 1 flag for CPU1. All core states retained)  
        .equ PWR_C1STOP2F_Shift, 9   @ bitWidth 1 (System Stop2 flag for CPU1. partial core states retained)  
        .equ PWR_C1SBF_Shift, 8   @ bitWidth 1 (System Standby flag for CPU1. no core states retained)  
        .equ PWR_C1CSSF_Shift, 0   @ bitWidth 1 (Clear CPU1 Stop Standby flags)  
 
    .equ PWR_SUBGHZSPICR, PWR_BASE + 0x90 @ (Power SPI3 control register) 
        .equ PWR_NSS_Shift, 15   @ bitWidth 1 (sub-GHz SPI NSS control)  
 

@=========================== RCC ===========================@
.equ RCC_BASE, 0x58000000 @ (Reset and clock control) 
    .equ RCC_CR, RCC_BASE + 0x0 @ (Clock control register) 
        .equ RCC_PLLRDY_Shift, 25   @ bitWidth 1 (Main PLL clock ready flag)  
        .equ RCC_PLLON_Shift, 24   @ bitWidth 1 (Main PLL enable)  
        .equ RCC_HSEBYPPWR_Shift, 21   @ bitWidth 1 (Enable HSE32 VDDTCXO output on package pin PB0-VDDTCXO.)  
        .equ RCC_HSEPRE_Shift, 20   @ bitWidth 1 (HSE32 sysclk prescaler)  
        .equ RCC_CSSON_Shift, 19   @ bitWidth 1 (HSE32 Clock security system enable)  
        .equ RCC_HSERDY_Shift, 17   @ bitWidth 1 (HSE32 clock ready flag)  
        .equ RCC_HSEON_Shift, 16   @ bitWidth 1 (HSE32 clock enable)  
        .equ RCC_HSIKERDY_Shift, 12   @ bitWidth 1 (HSI16 kernel clock ready flag for peripherals requests.)  
        .equ RCC_HSIASFS_Shift, 11   @ bitWidth 1 (HSI16 automatic start from Stop)  
        .equ RCC_HSIRDY_Shift, 10   @ bitWidth 1 (HSI16 clock ready flag. After wakeup from Stop this bit will be read 1 once the HSI16 is ready)  
        .equ RCC_HSIKERON_Shift, 9   @ bitWidth 1 (HSI16 always enable for peripheral kernel clocks.)  
        .equ RCC_HSION_Shift, 8   @ bitWidth 1 (HSI16 clock enable)  
        .equ RCC_MSIRANGE_Shift, 4   @ bitWidth 4 (MSI clock ranges)  
        .equ RCC_MSIRGSEL_Shift, 3   @ bitWidth 1 (MSI range control selection)  
        .equ RCC_MSIPLLEN_Shift, 2   @ bitWidth 1 (MSI clock PLL enable)  
        .equ RCC_MSIRDY_Shift, 1   @ bitWidth 1 (MSI clock ready flag After reset this bit will be read 1 once the MSI is ready)  
        .equ RCC_MSION_Shift, 0   @ bitWidth 1 (MSI clock enable)  
 
    .equ RCC_ICSCR, RCC_BASE + 0x4 @ (Internal clock sources calibration register) 
        .equ RCC_HSITRIM_Shift, 24   @ bitWidth 7 (HSI16 clock trimming)  
        .equ RCC_HSICAL_Shift, 16   @ bitWidth 8 (HSI16 clock calibration)  
        .equ RCC_MSITRIM_Shift, 8   @ bitWidth 8 (MSI clock trimming)  
        .equ RCC_MSICAL_Shift, 0   @ bitWidth 8 (MSI clock calibration)  
 
    .equ RCC_CFGR, RCC_BASE + 0x8 @ (Clock configuration register) 
        .equ RCC_MCOPRE_Shift, 28   @ bitWidth 3 (Microcontroller clock output prescaler)  
        .equ RCC_MCOSEL_Shift, 24   @ bitWidth 4 (Microcontroller clock output)  
        .equ RCC_PPRE2F_Shift, 18   @ bitWidth 1 (PCLK2 prescaler flag APB2)  
        .equ RCC_PPRE1F_Shift, 17   @ bitWidth 1 (PCLK1 prescaler flag APB1)  
        .equ RCC_HPREF_Shift, 16   @ bitWidth 1 (HCLK1 prescaler flag CPU1, AHB1, AHB2, and SRAM1)  
        .equ RCC_STOPWUCK_Shift, 15   @ bitWidth 1 (Wakeup from Stop and CSS backup clock selection)  
        .equ RCC_PPRE2_Shift, 11   @ bitWidth 3 (PCLK2 high-speed prescaler APB2)  
        .equ RCC_PPRE1_Shift, 8   @ bitWidth 3 (PCLK1 low-speed prescaler APB1)  
        .equ RCC_HPRE_Shift, 4   @ bitWidth 4 (HCLK1 prescaler CPU1, AHB1, AHB2, and SRAM1.)  
        .equ RCC_SWS_Shift, 2   @ bitWidth 2 (System clock switch status)  
        .equ RCC_SW_Shift, 0   @ bitWidth 2 (System clock switch)  
 
    .equ RCC_PLLCFGR, RCC_BASE + 0xC @ (PLL configuration register) 
        .equ RCC_PLLR_Shift, 29   @ bitWidth 3 (Main PLL division factor for PLLRCLK)  
        .equ RCC_PLLREN_Shift, 28   @ bitWidth 1 (Main PLL PLLRCLK output enable)  
        .equ RCC_PLLQ_Shift, 25   @ bitWidth 3 (Main PLL division factor for PLLQCLK)  
        .equ RCC_PLLQEN_Shift, 24   @ bitWidth 1 (Main PLL PLLQCLK output enable)  
        .equ RCC_PLLP_Shift, 17   @ bitWidth 5 (Main PLL division factor for PLLPCLK.)  
        .equ RCC_PLLPEN_Shift, 16   @ bitWidth 1 (Main PLL PLLPCLK output enable)  
        .equ RCC_PLLN_Shift, 8   @ bitWidth 7 (Main PLL multiplication factor for VCO)  
        .equ RCC_PLLM_Shift, 4   @ bitWidth 3 (Division factor for the main PLL input clock)  
        .equ RCC_PLLSRC_Shift, 0   @ bitWidth 2 (Main PLL entry clock source)  
 
    .equ RCC_CIER, RCC_BASE + 0x18 @ (Clock interrupt enable register) 
        .equ RCC_LSECSSIE_Shift, 9   @ bitWidth 1 (LSE clock security system interrupt enable)  
        .equ RCC_PLLRDYIE_Shift, 5   @ bitWidth 1 (PLL ready interrupt enable)  
        .equ RCC_HSERDYIE_Shift, 4   @ bitWidth 1 (HSE32 ready interrupt enable)  
        .equ RCC_HSIRDYIE_Shift, 3   @ bitWidth 1 (HSI16 ready interrupt enable)  
        .equ RCC_MSIRDYIE_Shift, 2   @ bitWidth 1 (MSI ready interrupt enable)  
        .equ RCC_LSERDYIE_Shift, 1   @ bitWidth 1 (LSE ready interrupt enable)  
        .equ RCC_LSIRDYIE_Shift, 0   @ bitWidth 1 (LSI ready interrupt enable)  
 
    .equ RCC_CIFR, RCC_BASE + 0x1C @ (Clock interrupt flag register) 
        .equ RCC_LSECSSF_Shift, 9   @ bitWidth 1 (LSE Clock security system interrupt flag)  
        .equ RCC_CSSF_Shift, 8   @ bitWidth 1 (HSE32 Clock security system interrupt flag)  
        .equ RCC_PLLRDYF_Shift, 5   @ bitWidth 1 (PLL ready interrupt flag)  
        .equ RCC_HSERDYF_Shift, 4   @ bitWidth 1 (HSE32 ready interrupt flag)  
        .equ RCC_HSIRDYF_Shift, 3   @ bitWidth 1 (HSI16 ready interrupt flag)  
        .equ RCC_MSIRDYF_Shift, 2   @ bitWidth 1 (MSI ready interrupt flag)  
        .equ RCC_LSERDYF_Shift, 1   @ bitWidth 1 (LSE ready interrupt flag)  
        .equ RCC_LSIRDYF_Shift, 0   @ bitWidth 1 (LSI ready interrupt flag)  
 
    .equ RCC_CICR, RCC_BASE + 0x20 @ (Clock interrupt clear register) 
        .equ RCC_LSECSSC_Shift, 9   @ bitWidth 1 (LSE Clock security system interrupt clear)  
        .equ RCC_CSSC_Shift, 8   @ bitWidth 1 (HSE32 Clock security system interrupt clear)  
        .equ RCC_PLLRDYC_Shift, 5   @ bitWidth 1 (PLL ready interrupt clear)  
        .equ RCC_HSERDYC_Shift, 4   @ bitWidth 1 (HSE32 ready interrupt clear)  
        .equ RCC_HSIRDYC_Shift, 3   @ bitWidth 1 (HSI16 ready interrupt clear)  
        .equ RCC_MSIRDYC_Shift, 2   @ bitWidth 1 (MSI ready interrupt clear)  
        .equ RCC_LSERDYC_Shift, 1   @ bitWidth 1 (LSE ready interrupt clear)  
        .equ RCC_LSIRDYC_Shift, 0   @ bitWidth 1 (LSI ready interrupt clear)  
 
    .equ RCC_AHB1RSTR, RCC_BASE + 0x28 @ (AHB1 peripheral reset register) 
        .equ RCC_CRCRST_Shift, 12   @ bitWidth 1 (CRC reset)  
        .equ RCC_DMAMUX1RST_Shift, 2   @ bitWidth 1 (DMAMUX1 reset)  
        .equ RCC_DMA2RST_Shift, 1   @ bitWidth 1 (DMA2 reset)  
        .equ RCC_DMA1RST_Shift, 0   @ bitWidth 1 (DMA1 reset)  
 
    .equ RCC_AHB2RSTR, RCC_BASE + 0x2C @ (AHB2 peripheral reset register) 
        .equ RCC_GPIOHRST_Shift, 7   @ bitWidth 1 (IO port H reset)  
        .equ RCC_GPIOCRST_Shift, 2   @ bitWidth 1 (IO port C reset)  
        .equ RCC_GPIOBRST_Shift, 1   @ bitWidth 1 (IO port B reset)  
        .equ RCC_GPIOARST_Shift, 0   @ bitWidth 1 (IO port A reset)  
 
    .equ RCC_AHB3RSTR, RCC_BASE + 0x30 @ (AHB3 peripheral reset register) 
        .equ RCC_FLASHRST_Shift, 25   @ bitWidth 1 (Flash interface reset)  
        .equ RCC_HSEMRST_Shift, 19   @ bitWidth 1 (HSEMRST)  
        .equ RCC_RNGRST_Shift, 18   @ bitWidth 1 (RNGRST)  
        .equ RCC_AESRST_Shift, 17   @ bitWidth 1 (AESRST)  
        .equ RCC_PKARST_Shift, 16   @ bitWidth 1 (PKARST)  
 
    .equ RCC_APB1RSTR1, RCC_BASE + 0x38 @ (APB1 peripheral reset register 1) 
        .equ RCC_LPTIM1RST_Shift, 31   @ bitWidth 1 (Low Power Timer 1 reset)  
        .equ RCC_DACRST_Shift, 29   @ bitWidth 1 (DAC reset)  
        .equ RCC_I2C3RST_Shift, 23   @ bitWidth 1 (I2C3 reset)  
        .equ RCC_I2C2RST_Shift, 22   @ bitWidth 1 (I2C2 reset)  
        .equ RCC_I2C1RST_Shift, 21   @ bitWidth 1 (I2C1 reset)  
        .equ RCC_USART2RST_Shift, 17   @ bitWidth 1 (USART2 reset)  
        .equ RCC_SPI2S2RST_Shift, 14   @ bitWidth 1 (SPI2S2 reset)  
        .equ RCC_TIM2RST_Shift, 0   @ bitWidth 1 (TIM2 timer reset)  
 
    .equ RCC_APB1RSTR2, RCC_BASE + 0x3C @ (APB1 peripheral reset register 2) 
        .equ RCC_LPTIM3RST_Shift, 6   @ bitWidth 1 (Low-power timer 3 reset)  
        .equ RCC_LPTIM2RST_Shift, 5   @ bitWidth 1 (Low-power timer 2 reset)  
        .equ RCC_LPUART1RST_Shift, 0   @ bitWidth 1 (Low-power UART 1 reset)  
 
    .equ RCC_APB2RSTR, RCC_BASE + 0x40 @ (APB2 peripheral reset register) 
        .equ RCC_TIM17RST_Shift, 18   @ bitWidth 1 (TIM17 timer reset)  
        .equ RCC_TIM16RST_Shift, 17   @ bitWidth 1 (TIM16 timer reset)  
        .equ RCC_USART1RST_Shift, 14   @ bitWidth 1 (USART1 reset)  
        .equ RCC_SPI1RST_Shift, 12   @ bitWidth 1 (SPI1 reset)  
        .equ RCC_TIM1RST_Shift, 11   @ bitWidth 1 (TIM1 timer reset)  
        .equ RCC_ADCRST_Shift, 9   @ bitWidth 1 (ADC reset)  
 
    .equ RCC_APB3RSTR, RCC_BASE + 0x44 @ (APB3 peripheral reset register) 
        .equ RCC_SUBGHZSPIRST_Shift, 0   @ bitWidth 1 (Sub-GHz radio SPI reset)  
 
    .equ RCC_AHB1ENR, RCC_BASE + 0x48 @ (AHB1 peripheral clock enable register) 
        .equ RCC_CRCEN_Shift, 12   @ bitWidth 1 (CPU1 CRC clock enable)  
        .equ RCC_DMAMUX1EN_Shift, 2   @ bitWidth 1 (CPU1 DMAMUX1 clock enable)  
        .equ RCC_DMA2EN_Shift, 1   @ bitWidth 1 (CPU1 DMA2 clock enable)  
        .equ RCC_DMA1EN_Shift, 0   @ bitWidth 1 (CPU1 DMA1 clock enable)  
 
    .equ RCC_AHB2ENR, RCC_BASE + 0x4C @ (AHB2 peripheral clock enable register) 
        .equ RCC_GPIOHEN_Shift, 7   @ bitWidth 1 (CPU1 IO port H clock enable)  
        .equ RCC_GPIOCEN_Shift, 2   @ bitWidth 1 (CPU1 IO port C clock enable)  
        .equ RCC_GPIOBEN_Shift, 1   @ bitWidth 1 (CPU1 IO port B clock enable)  
        .equ RCC_GPIOAEN_Shift, 0   @ bitWidth 1 (CPU1 IO port A clock enable)  
 
    .equ RCC_AHB3ENR, RCC_BASE + 0x50 @ (AHB3 peripheral clock enable register) 
        .equ RCC_FLASHEN_Shift, 25   @ bitWidth 1 (CPU1 Flash interface clock enable)  
        .equ RCC_HSEMEN_Shift, 19   @ bitWidth 1 (HSEMEN)  
        .equ RCC_RNGEN_Shift, 18   @ bitWidth 1 (RNGEN)  
        .equ RCC_AESEN_Shift, 17   @ bitWidth 1 (AESEN)  
        .equ RCC_PKAEN_Shift, 16   @ bitWidth 1 (PKAEN)  
 
    .equ RCC_APB1ENR1, RCC_BASE + 0x58 @ (APB1 peripheral clock enable register 1) 
        .equ RCC_LPTIM1EN_Shift, 31   @ bitWidth 1 (CPU1 Low power timer 1 clocks enable)  
        .equ RCC_DAC1EN_Shift, 29   @ bitWidth 1 (CPU1 DAC1 clock enable)  
        .equ RCC_I2C3EN_Shift, 23   @ bitWidth 1 (CPU1 I2C3 clocks enable)  
        .equ RCC_I2C2EN_Shift, 22   @ bitWidth 1 (CPU1 I2C2 clocks enable)  
        .equ RCC_I2C1EN_Shift, 21   @ bitWidth 1 (CPU1 I2C1 clocks enable)  
        .equ RCC_USART2EN_Shift, 17   @ bitWidth 1 (CPU1 USART2 clock enable)  
        .equ RCC_SPI2S2EN_Shift, 14   @ bitWidth 1 (CPU1 SPI2S2 clock enable)  
        .equ RCC_WWDGEN_Shift, 11   @ bitWidth 1 (CPU1 Window watchdog clock enable)  
        .equ RCC_RTCAPBEN_Shift, 10   @ bitWidth 1 (CPU1 RTC APB clock enable)  
        .equ RCC_TIM2EN_Shift, 0   @ bitWidth 1 (CPU1 TIM2 timer clock enable)  
 
    .equ RCC_APB1ENR2, RCC_BASE + 0x5C @ (APB1 peripheral clock enable register 2) 
        .equ RCC_LPTIM3EN_Shift, 6   @ bitWidth 1 (CPU1 Low power timer 3 clocks enable)  
        .equ RCC_LPTIM2EN_Shift, 5   @ bitWidth 1 (CPU1 Low power timer 2 clocks enable)  
        .equ RCC_LPUART1EN_Shift, 0   @ bitWidth 1 (CPU1 Low power UART 1 clocks enable)  
 
    .equ RCC_APB2ENR, RCC_BASE + 0x60 @ (APB2 peripheral clock enable register) 
        .equ RCC_TIM17EN_Shift, 18   @ bitWidth 1 (CPU1 TIM17 timer clock enable)  
        .equ RCC_TIM16EN_Shift, 17   @ bitWidth 1 (CPU1 TIM16 timer clock enable)  
        .equ RCC_USART1EN_Shift, 14   @ bitWidth 1 (CPU1 USART1clocks enable)  
        .equ RCC_SPI1EN_Shift, 12   @ bitWidth 1 (CPU1 SPI1 clock enable)  
        .equ RCC_TIM1EN_Shift, 11   @ bitWidth 1 (CPU1 TIM1 timer clock enable)  
        .equ RCC_ADCEN_Shift, 9   @ bitWidth 1 (CPU1 ADC clocks enable)  
 
    .equ RCC_APB3ENR, RCC_BASE + 0x64 @ (APB3 peripheral clock enable register) 
        .equ RCC_SUBGHZSPIEN_Shift, 0   @ bitWidth 1 (sub-GHz radio SPI clock enable)  
 
    .equ RCC_AHB1SMENR, RCC_BASE + 0x68 @ (AHB1 peripheral clocks enable in Sleep modes register) 
        .equ RCC_CRCSMEN_Shift, 12   @ bitWidth 1 (CRC clock enable during CPU1 CSleep mode.)  
        .equ RCC_DMAMUX1SMEN_Shift, 2   @ bitWidth 1 (DMAMUX1 clock enable during CPU1 CSleep mode.)  
        .equ RCC_DMA2SMEN_Shift, 1   @ bitWidth 1 (DMA2 clock enable during CPU1 CSleep mode)  
        .equ RCC_DMA1SMEN_Shift, 0   @ bitWidth 1 (DMA1 clock enable during CPU1 CSleep mode.)  
 
    .equ RCC_AHB2SMENR, RCC_BASE + 0x6C @ (AHB2 peripheral clocks enable in Sleep modes register) 
        .equ RCC_GPIOHSMEN_Shift, 7   @ bitWidth 1 (IO port H clock enable during CPU1 CSleep mode.)  
        .equ RCC_GPIOCSMEN_Shift, 2   @ bitWidth 1 (IO port C clock enable during CPU1 CSleep mode.)  
        .equ RCC_GPIOBSMEN_Shift, 1   @ bitWidth 1 (IO port B clock enable during CPU1 CSleep mode.)  
        .equ RCC_GPIOASMEN_Shift, 0   @ bitWidth 1 (IO port A clock enable during CPU1 CSleep mode.)  
 
    .equ RCC_AHB3SMENR, RCC_BASE + 0x70 @ (AHB3 peripheral clocks enable in Sleep and Stop modes register) 
        .equ RCC_FLASHSMEN_Shift, 25   @ bitWidth 1 (Flash interface clock enable during CPU1 CSleep mode.)  
        .equ RCC_SRAM2SMEN_Shift, 24   @ bitWidth 1 (SRAM2 memory interface clock enable during CPU1 CSleep mode)  
        .equ RCC_SRAM1SMEN_Shift, 23   @ bitWidth 1 (SRAM1 interface clock enable during CPU1 CSleep mode.)  
        .equ RCC_RNGSMEN_Shift, 18   @ bitWidth 1 (True RNG clocks enable during CPU1 Csleep and CStop modes)  
        .equ RCC_AESSMEN_Shift, 17   @ bitWidth 1 (AES accelerator clock enable during CPU1 CSleep mode.)  
        .equ RCC_PKASMEN_Shift, 16   @ bitWidth 1 (PKA accelerator clock enable during CPU1 CSleep mode.)  
 
    .equ RCC_APB1SMENR1, RCC_BASE + 0x78 @ (APB1 peripheral clocks enable in Sleep mode register 1) 
        .equ RCC_LPTIM1SMEN_Shift, 31   @ bitWidth 1 (Low power timer 1 clock enable during CPU1 Csleep and CStop mode)  
        .equ RCC_DACSMEN_Shift, 29   @ bitWidth 1 (DAC clock enable during CPU1 CSleep mode.)  
        .equ RCC_I2C3SMEN_Shift, 23   @ bitWidth 1 (I2C3 clock enable during CPU1 Csleep and CStop modes)  
        .equ RCC_I2C2SMEN_Shift, 22   @ bitWidth 1 (I2C2 clock enable during CPU1 Csleep and CStop modes)  
        .equ RCC_I2C1SMEN_Shift, 21   @ bitWidth 1 (I2C1 clock enable during CPU1 Csleep and CStop modes)  
        .equ RCC_USART2SMEN_Shift, 17   @ bitWidth 1 (USART2 clock enable during CPU1 CSleep mode.)  
        .equ RCC_SPI2S2SMEN_Shift, 14   @ bitWidth 1 (SPI2S2 clock enable during CPU1 CSleep mode.)  
        .equ RCC_WWDGSMEN_Shift, 11   @ bitWidth 1 (Window watchdog clocks enable during CPU1 CSleep mode.)  
        .equ RCC_RTCAPBSMEN_Shift, 10   @ bitWidth 1 (RTC bus clock enable during CPU1 CSleep mode.)  
        .equ RCC_TIM2SMEN_Shift, 0   @ bitWidth 1 (TIM2 timer clock enable during CPU1 CSleep mode.)  
 
    .equ RCC_APB1SMENR2, RCC_BASE + 0x7C @ (APB1 peripheral clocks enable in Sleep mode register 2) 
        .equ RCC_LPTIM3SMEN_Shift, 6   @ bitWidth 1 (Low power timer 3 clock enable during CPU1 Csleep and CStop modes)  
        .equ RCC_LPTIM2SMEN_Shift, 5   @ bitWidth 1 (Low power timer 2 clock enable during CPU1 Csleep and CStop modes)  
        .equ RCC_LPUART1SMEN_Shift, 0   @ bitWidth 1 (Low power UART 1 clock enable during CPU1 Csleep and CStop modes.)  
 
    .equ RCC_APB2SMENR, RCC_BASE + 0x80 @ (APB2 peripheral clocks enable in Sleep mode register) 
        .equ RCC_TIM17SMEN_Shift, 18   @ bitWidth 1 (TIM17 timer clock enable during CPU1 CSleep mode.)  
        .equ RCC_TIM16SMEN_Shift, 17   @ bitWidth 1 (TIM16 timer clock enable during CPU1 CSleep mode.)  
        .equ RCC_USART1SMEN_Shift, 14   @ bitWidth 1 (USART1 clock enable during CPU1 Csleep and CStop modes.)  
        .equ RCC_SPI1SMEN_Shift, 12   @ bitWidth 1 (SPI1 clock enable during CPU1 CSleep mode.)  
        .equ RCC_TIM1SMEN_Shift, 11   @ bitWidth 1 (TIM1 timer clock enable during CPU1 CSleep mode.)  
        .equ RCC_ADCSMEN_Shift, 9   @ bitWidth 1 (ADC clocks enable during CPU1 Csleep and CStop modes)  
 
    .equ RCC_APB3SMENR, RCC_BASE + 0x84 @ (APB3 peripheral clock enable in Sleep mode register) 
        .equ RCC_SUBGHZSPISMEN_Shift, 0   @ bitWidth 1 (Sub-GHz radio SPI clock enable during Sleep and Stop modes)  
 
    .equ RCC_CCIPR, RCC_BASE + 0x88 @ (Peripherals independent clock configuration register) 
        .equ RCC_RNGSEL_Shift, 30   @ bitWidth 2 (RNG clock source selection)  
        .equ RCC_ADCSEL_Shift, 28   @ bitWidth 2 (ADC clock source selection)  
        .equ RCC_LPTIM3SEL_Shift, 22   @ bitWidth 2 (Low power timer 3 clock source selection)  
        .equ RCC_LPTIM2SEL_Shift, 20   @ bitWidth 2 (Low power timer 2 clock source selection)  
        .equ RCC_LPTIM1SEL_Shift, 18   @ bitWidth 2 (Low power timer 1 clock source selection)  
        .equ RCC_I2C3SEL_Shift, 16   @ bitWidth 2 (I2C3 clock source selection)  
        .equ RCC_I2C2SEL_Shift, 14   @ bitWidth 2 (I2C2 clock source selection)  
        .equ RCC_I2C1SEL_Shift, 12   @ bitWidth 2 (I2C1 clock source selection)  
        .equ RCC_LPUART1SEL_Shift, 10   @ bitWidth 2 (LPUART1 clock source selection)  
        .equ RCC_SPI2S2SEL_Shift, 8   @ bitWidth 2 (SPI2S2 I2S clock source selection)  
        .equ RCC_USART2SEL_Shift, 2   @ bitWidth 2 (USART2 clock source selection)  
        .equ RCC_USART1SEL_Shift, 0   @ bitWidth 2 (USART1 clock source selection)  
 
    .equ RCC_BDCR, RCC_BASE + 0x90 @ (Backup domain control register) 
        .equ RCC_LSCOSEL_Shift, 25   @ bitWidth 1 (Low speed clock output selection)  
        .equ RCC_LSCOEN_Shift, 24   @ bitWidth 1 (Low speed clock output enable)  
        .equ RCC_BDRST_Shift, 16   @ bitWidth 1 (Backup domain software reset)  
        .equ RCC_RTCEN_Shift, 15   @ bitWidth 1 (RTC clock enable)  
        .equ RCC_LSESYSRDY_Shift, 11   @ bitWidth 1 (LSE system clock ready)  
        .equ RCC_RTCSEL_Shift, 8   @ bitWidth 2 (RTC clock source selection)  
        .equ RCC_LSESYSEN_Shift, 7   @ bitWidth 1 (LSE system clock enable)  
        .equ RCC_LSECSSD_Shift, 6   @ bitWidth 1 (CSS on LSE failure Detection)  
        .equ RCC_LSECSSON_Shift, 5   @ bitWidth 1 (CSS on LSE enable)  
        .equ RCC_LSEDRV_Shift, 3   @ bitWidth 2 (LSE oscillator drive capability)  
        .equ RCC_LSEBYP_Shift, 2   @ bitWidth 1 (LSE oscillator bypass)  
        .equ RCC_LSERDY_Shift, 1   @ bitWidth 1 (LSE oscillator ready)  
        .equ RCC_LSEON_Shift, 0   @ bitWidth 1 (LSE oscillator enable)  
 
    .equ RCC_CSR, RCC_BASE + 0x94 @ (Control/status register) 
        .equ RCC_LPWRRSTF_Shift, 31   @ bitWidth 1 (Low-power reset flag)  
        .equ RCC_WWDGRSTF_Shift, 30   @ bitWidth 1 (Window watchdog reset flag)  
        .equ RCC_IWDGRSTF_Shift, 29   @ bitWidth 1 (Independent window watchdog reset flag)  
        .equ RCC_SFTRSTF_Shift, 28   @ bitWidth 1 (Software reset flag)  
        .equ RCC_BORRSTF_Shift, 27   @ bitWidth 1 (BOR flag)  
        .equ RCC_PINRSTF_Shift, 26   @ bitWidth 1 (Pin reset flag)  
        .equ RCC_OBLRSTF_Shift, 25   @ bitWidth 1 (Option byte loader reset flag)  
        .equ RCC_RFILARSTF_Shift, 24   @ bitWidth 1 (Radio illegal access flag)  
        .equ RCC_RMVF_Shift, 23   @ bitWidth 1 (Remove reset flag)  
        .equ RCC_RFRST_Shift, 15   @ bitWidth 1 (Radio reset)  
        .equ RCC_RFRSTF_Shift, 14   @ bitWidth 1 (Radio in reset status flag)  
        .equ RCC_MSISRANGE_Shift, 8   @ bitWidth 4 (MSI clock ranges)  
        .equ RCC_LSIPRE_Shift, 4   @ bitWidth 1 (LSI frequency prescaler)  
        .equ RCC_LSIRDY_Shift, 1   @ bitWidth 1 (LSI oscillator ready)  
        .equ RCC_LSION_Shift, 0   @ bitWidth 1 (LSI oscillator enable)  
 
    .equ RCC_EXTCFGR, RCC_BASE + 0x108 @ (Extended clock recovery register) 
        .equ RCC_SHDHPREF_Shift, 16   @ bitWidth 1 (HCLK3 shared prescaler flag AHB3, Flash, and SRAM2)  
        .equ RCC_SHDHPRE_Shift, 0   @ bitWidth 4 (HCLK3 shared prescaler AHB3, Flash, and SRAM2)  
 

@=========================== RNG ===========================@
.equ RNG_BASE, 0x58001000 @ (True random number generator) 
    .equ RNG_CR, RNG_BASE + 0x0 @ (control register) 
        .equ RNG_RNGEN_Shift, 2   @ bitWidth 1 (True random number generator enable)  
        .equ RNG_IE_Shift, 3   @ bitWidth 1 (Interrupt Enable)  
        .equ RNG_CED_Shift, 5   @ bitWidth 1 (Interrupt Enable)  
        .equ RNG_RNG_CONFIG3_Shift, 8   @ bitWidth 4 (RNG_CONFIG3)  
        .equ RNG_NISTC_Shift, 12   @ bitWidth 1 (NISTC)  
        .equ RNG_RNG_CONFIG2_Shift, 13   @ bitWidth 3 (RNG_CONFIG2)  
        .equ RNG_CLKDIV_Shift, 16   @ bitWidth 4 (CLKDIV)  
        .equ RNG_RNG_CONFIG1_Shift, 20   @ bitWidth 6 (RNG_CONFIG1)  
        .equ RNG_CONDRST_Shift, 30   @ bitWidth 1 (Conditioning soft reset)  
        .equ RNG_CONFIGLOCK_Shift, 31   @ bitWidth 1 (CONFIGLOCK)  
 
    .equ RNG_SR, RNG_BASE + 0x4 @ (status register) 
        .equ RNG_SEIS_Shift, 6   @ bitWidth 1 (Seed error interrupt status)  
        .equ RNG_CEIS_Shift, 5   @ bitWidth 1 (Clock error interrupt status)  
        .equ RNG_SECS_Shift, 2   @ bitWidth 1 (Seed error current status)  
        .equ RNG_CECS_Shift, 1   @ bitWidth 1 (Clock error current status)  
        .equ RNG_DRDY_Shift, 0   @ bitWidth 1 (Data Ready)  
 
    .equ RNG_DR, RNG_BASE + 0x8 @ (data register) 
        .equ RNG_RNDATA_Shift, 0   @ bitWidth 32 (Random data)  
 
    .equ RNG_HTCR, RNG_BASE + 0x10 @ (health test control register) 
        .equ RNG_HTCFG_Shift, 0   @ bitWidth 32 (health test configuration)  
 

@=========================== RTC ===========================@
.equ RTC_BASE, 0x40002800 @ (Real-time clock) 
    .equ RTC_TR, RTC_BASE + 0x0 @ (TR) 
        .equ RTC_PM_Shift, 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_DR, RTC_BASE + 0x4 @ (DR) 
        .equ RTC_YT_Shift, 20   @ bitWidth 4 (Year tens in BCD format)  
        .equ RTC_YU_Shift, 16   @ bitWidth 4 (Year units in BCD format)  
        .equ RTC_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_MT_Shift, 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_SSR, RTC_BASE + 0x8 @ (SSR) 
        .equ RTC_SS_Shift, 0   @ bitWidth 32 (Synchronous binary counter)  
 
    .equ RTC_ICSR, RTC_BASE + 0xC @ (ICSR) 
        .equ RTC_RECALPF_Shift, 16   @ bitWidth 1 (Recalibration pending Flag)  
        .equ RTC_BCDU_Shift, 10   @ bitWidth 3 (BCD update)  
        .equ RTC_BIN_Shift, 8   @ bitWidth 2 (Binary mode)  
        .equ RTC_INIT_Shift, 7   @ bitWidth 1 (Initialization mode)  
        .equ RTC_INITF_Shift, 6   @ bitWidth 1 (Initialization flag)  
        .equ RTC_RSF_Shift, 5   @ bitWidth 1 (Registers synchronization flag)  
        .equ RTC_INITS_Shift, 4   @ bitWidth 1 (Initialization status flag)  
        .equ RTC_SHPF_Shift, 3   @ bitWidth 1 (Shift operation pending)  
        .equ RTC_WUTWF_Shift, 2   @ bitWidth 1 (Wakeup timer write flag)  
 
    .equ RTC_PRER, RTC_BASE + 0x10 @ (PRER) 
        .equ RTC_PREDIV_A_Shift, 16   @ bitWidth 7 (Asynchronous prescaler factor)  
        .equ RTC_PREDIV_S_Shift, 0   @ bitWidth 15 (Synchronous prescaler factor)  
 
    .equ RTC_WUTR, RTC_BASE + 0x14 @ (WUTR) 
        .equ RTC_WUTOCLR_Shift, 16   @ bitWidth 16 (Wakeup auto-reload output clear value)  
        .equ RTC_WUT_Shift, 0   @ bitWidth 16 (Wakeup auto-reload value bits)  
 
    .equ RTC_CR, RTC_BASE + 0x18 @ (CR) 
        .equ RTC_OUT2EN_Shift, 31   @ bitWidth 1 (RTC_OUT2 output enable)  
        .equ RTC_TAMPALRM_TYPE_Shift, 30   @ bitWidth 1 (TAMPALRM output type)  
        .equ RTC_TAMPALRM_PU_Shift, 29   @ bitWidth 1 (TAMPALRM pull-up enable)  
        .equ RTC_TAMPOE_Shift, 26   @ bitWidth 1 (Tamper detection output enable on TAMPALRM)  
        .equ RTC_TAMPTS_Shift, 25   @ bitWidth 1 (Activate timestamp on tamper detection event)  
        .equ RTC_ITSE_Shift, 24   @ bitWidth 1 (timestamp on internal event enable)  
        .equ RTC_COE_Shift, 23   @ bitWidth 1 (Calibration output enable)  
        .equ RTC_OSEL_Shift, 21   @ bitWidth 2 (Output selection)  
        .equ RTC_POL_Shift, 20   @ bitWidth 1 (Output polarity)  
        .equ RTC_COSEL_Shift, 19   @ bitWidth 1 (Calibration output selection)  
        .equ RTC_BKP_Shift, 18   @ bitWidth 1 (Backup)  
        .equ RTC_SUB1H_Shift, 17   @ bitWidth 1 (Subtract 1 hour winter time change)  
        .equ RTC_ADD1H_Shift, 16   @ bitWidth 1 (Add 1 hour summer time change)  
        .equ RTC_TSIE_Shift, 15   @ bitWidth 1 (Timestamp interrupt enable)  
        .equ RTC_WUTIE_Shift, 14   @ bitWidth 1 (Wakeup timer interrupt enable)  
        .equ RTC_ALRBIE_Shift, 13   @ bitWidth 1 (Alarm B interrupt enable)  
        .equ RTC_ALRAIE_Shift, 12   @ bitWidth 1 (Alarm A interrupt enable)  
        .equ RTC_TSE_Shift, 11   @ bitWidth 1 (timestamp enable)  
        .equ RTC_WUTE_Shift, 10   @ bitWidth 1 (Wakeup timer enable)  
        .equ RTC_ALRBE_Shift, 9   @ bitWidth 1 (Alarm B enable)  
        .equ RTC_ALRAE_Shift, 8   @ bitWidth 1 (Alarm A enable)  
        .equ RTC_SSRUIE_Shift, 7   @ bitWidth 1 (SSR underflow interrupt enable)  
        .equ RTC_FMT_Shift, 6   @ bitWidth 1 (Hour format)  
        .equ RTC_BYPSHAD_Shift, 5   @ bitWidth 1 (Bypass the shadow registers)  
        .equ RTC_REFCKON_Shift, 4   @ bitWidth 1 (RTC_REFIN reference clock detection enable 50 or 60 Hz)  
        .equ RTC_TSEDGE_Shift, 3   @ bitWidth 1 (Timestamp event active edge)  
        .equ RTC_WUCKSEL_Shift, 0   @ bitWidth 3 (Wakeup clock selection)  
 
    .equ RTC_WPR, RTC_BASE + 0x24 @ (write protection register) 
        .equ RTC_KEY_Shift, 0   @ bitWidth 8 (Write protection key)  
 
    .equ RTC_CALR, RTC_BASE + 0x28 @ (CALR) 
        .equ RTC_CALP_Shift, 15   @ bitWidth 1 (Use an 8-second calibration cycle period)  
        .equ RTC_CALW8_Shift, 14   @ bitWidth 1 (Use a 16-second calibration cycle period)  
        .equ RTC_CALW16_Shift, 13   @ bitWidth 1 (CALW16)  
        .equ RTC_LPCAL_Shift, 12   @ bitWidth 1 (Calibration low-power mode)  
        .equ RTC_CALM_Shift, 0   @ bitWidth 9 (Calibration minus)  
 
    .equ RTC_SHIFTR, RTC_BASE + 0x2C @ (SHIFTR) 
        .equ RTC_ADD1S_Shift, 31   @ bitWidth 1 (Add one second)  
        .equ RTC_SUBFS_Shift, 0   @ bitWidth 15 (Subtract a fraction of a second)  
 
    .equ RTC_TSTR, RTC_BASE + 0x30 @ (TSTR) 
        .equ RTC_PM_Shift, 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format.)  
        .equ RTC_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format.)  
        .equ RTC_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format.)  
        .equ RTC_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format.)  
        .equ RTC_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format.)  
        .equ RTC_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format.)  
 
    .equ RTC_TSDR, RTC_BASE + 0x34 @ (TSDR) 
        .equ RTC_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_MT_Shift, 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_TSSSR, RTC_BASE + 0x38 @ (TSSSR) 
        .equ RTC_SS_Shift, 0   @ bitWidth 32 (Sub second value)  
 
    .equ RTC_ALRMAR, RTC_BASE + 0x40 @ (ALRMAR) 
        .equ RTC_MSK4_Shift, 31   @ bitWidth 1 (Alarm A date mask)  
        .equ RTC_WDSEL_Shift, 30   @ bitWidth 1 (Week day selection)  
        .equ RTC_DT_Shift, 28   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DU_Shift, 24   @ bitWidth 4 (Date units or day in BCD format)  
        .equ RTC_MSK3_Shift, 23   @ bitWidth 1 (Alarm A hours mask)  
        .equ RTC_PM_Shift, 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_MSK2_Shift, 15   @ bitWidth 1 (Alarm A minutes mask)  
        .equ RTC_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_MSK1_Shift, 7   @ bitWidth 1 (Alarm A seconds mask)  
        .equ RTC_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format.)  
        .equ RTC_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format.)  
 
    .equ RTC_ALRMASSR, RTC_BASE + 0x44 @ (ALRMASSR) 
        .equ RTC_SSCLR_Shift, 31   @ bitWidth 1 (Clear synchronous counter on alarm Binary mode only)  
        .equ RTC_MASKSS_Shift, 24   @ bitWidth 6 (Mask the most-significant bits starting at this bit)  
        .equ RTC_SS_Shift, 0   @ bitWidth 15 (Sub seconds value)  
 
    .equ RTC_ALRMBR, RTC_BASE + 0x48 @ (ALRMBR) 
        .equ RTC_MSK4_Shift, 31   @ bitWidth 1 (Alarm B date mask)  
        .equ RTC_WDSEL_Shift, 30   @ bitWidth 1 (Week day selection)  
        .equ RTC_DT_Shift, 28   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DU_Shift, 24   @ bitWidth 4 (Date units or day in BCD format)  
        .equ RTC_MSK3_Shift, 23   @ bitWidth 1 (Alarm B hours mask)  
        .equ RTC_PM_Shift, 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_MSK2_Shift, 15   @ bitWidth 1 (Alarm B minutes mask)  
        .equ RTC_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_MSK1_Shift, 7   @ bitWidth 1 (Alarm B seconds mask)  
        .equ RTC_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_ALRMBSSR, RTC_BASE + 0x4C @ (ALRMBSSR) 
        .equ RTC_SSCLR_Shift, 31   @ bitWidth 1 (Clear synchronous counter on alarm Binary mode only)  
        .equ RTC_MASKSS_Shift, 24   @ bitWidth 6 (Mask the most-significant bits starting at this bit)  
        .equ RTC_SS_Shift, 0   @ bitWidth 15 (Sub seconds value)  
 
    .equ RTC_SR, RTC_BASE + 0x50 @ (SR) 
        .equ RTC_SSRUF_Shift, 6   @ bitWidth 1 (SSR underflow flag)  
        .equ RTC_ITSF_Shift, 5   @ bitWidth 1 (Internal timestamp flag)  
        .equ RTC_TSOVF_Shift, 4   @ bitWidth 1 (Timestamp overflow flag)  
        .equ RTC_TSF_Shift, 3   @ bitWidth 1 (Timestamp flag)  
        .equ RTC_WUTF_Shift, 2   @ bitWidth 1 (Wakeup timer flag)  
        .equ RTC_ALRBF_Shift, 1   @ bitWidth 1 (Alarm B flag)  
        .equ RTC_ALRAF_Shift, 0   @ bitWidth 1 (Alarm A flag)  
 
    .equ RTC_MISR, RTC_BASE + 0x54 @ (MISR) 
        .equ RTC_SSRUMF_Shift, 6   @ bitWidth 1 (SSR underflow masked flag)  
        .equ RTC_ITSMF_Shift, 5   @ bitWidth 1 (Internal timestamp masked flag)  
        .equ RTC_TSOVMF_Shift, 4   @ bitWidth 1 (Timestamp overflow masked flag)  
        .equ RTC_TSMF_Shift, 3   @ bitWidth 1 (Timestamp masked flag)  
        .equ RTC_WUTMF_Shift, 2   @ bitWidth 1 (Wakeup timer masked flag)  
        .equ RTC_ALRBMF_Shift, 1   @ bitWidth 1 (Alarm B masked flag)  
        .equ RTC_ALRAMF_Shift, 0   @ bitWidth 1 (Alarm A masked flag)  
 
    .equ RTC_SCR, RTC_BASE + 0x5C @ (SCR) 
        .equ RTC_CSSRUF_Shift, 6   @ bitWidth 1 (Clear SSR underflow flag)  
        .equ RTC_CITSF_Shift, 5   @ bitWidth 1 (Clear internal timestamp flag)  
        .equ RTC_CTSOVF_Shift, 4   @ bitWidth 1 (Clear timestamp overflow flag)  
        .equ RTC_CTSF_Shift, 3   @ bitWidth 1 (Clear timestamp flag)  
        .equ RTC_CWUTF_Shift, 2   @ bitWidth 1 (Clear wakeup timer flag)  
        .equ RTC_CALRBF_Shift, 1   @ bitWidth 1 (Clear alarm B flag)  
        .equ RTC_CALRAF_Shift, 0   @ bitWidth 1 (Clear alarm A flag)  
 
    .equ RTC_ALRABINR, RTC_BASE + 0x70 @ (RTC alarm A binary mode register) 
        .equ RTC_SS_Shift, 0   @ bitWidth 32 (Synchronous counter alarm value in Binary mode)  
 
    .equ RTC_ALRBBINR, RTC_BASE + 0x74 @ (RTC alarm B binary mode register) 
        .equ RTC_SS_Shift, 0   @ bitWidth 32 (Synchronous counter alarm value in Binary mode)  
 

@=========================== SCB ===========================@
.equ SCB_BASE, 0xE000ED00 @ (System control block) 
    .equ SCB_CPUID, SCB_BASE + 0x0 @ (CPUID base register) 
        .equ SCB_Revision_Shift, 0   @ bitWidth 4 (Revision number)  
        .equ SCB_PartNo_Shift, 4   @ bitWidth 12 (Part number of the processor)  
        .equ SCB_Constant_Shift, 16   @ bitWidth 4 (Reads as 0xF)  
        .equ SCB_Variant_Shift, 20   @ bitWidth 4 (Variant number)  
        .equ SCB_Implementer_Shift, 24   @ bitWidth 8 (Implementer code)  
 
    .equ SCB_ICSR, SCB_BASE + 0x4 @ (Interrupt control and state register) 
        .equ SCB_VECTACTIVE_Shift, 0   @ bitWidth 9 (Active vector)  
        .equ SCB_RETTOBASE_Shift, 11   @ bitWidth 1 (Return to base level)  
        .equ SCB_VECTPENDING_Shift, 12   @ bitWidth 7 (Pending vector)  
        .equ SCB_ISRPENDING_Shift, 22   @ bitWidth 1 (Interrupt pending flag)  
        .equ SCB_PENDSTCLR_Shift, 25   @ bitWidth 1 (SysTick exception clear-pending bit)  
        .equ SCB_PENDSTSET_Shift, 26   @ bitWidth 1 (SysTick exception set-pending bit)  
        .equ SCB_PENDSVCLR_Shift, 27   @ bitWidth 1 (PendSV clear-pending bit)  
        .equ SCB_PENDSVSET_Shift, 28   @ bitWidth 1 (PendSV set-pending bit)  
        .equ SCB_NMIPENDSET_Shift, 31   @ bitWidth 1 (NMI set-pending bit.)  
 
    .equ SCB_VTOR, SCB_BASE + 0x8 @ (Vector table offset register) 
        .equ SCB_TBLOFF_Shift, 9   @ bitWidth 21 (Vector table base offset field)  
 
    .equ SCB_AIRCR, SCB_BASE + 0xC @ (Application interrupt and reset control register) 
        .equ SCB_VECTRESET_Shift, 0   @ bitWidth 1 (VECTRESET)  
        .equ SCB_VECTCLRACTIVE_Shift, 1   @ bitWidth 1 (VECTCLRACTIVE)  
        .equ SCB_SYSRESETREQ_Shift, 2   @ bitWidth 1 (SYSRESETREQ)  
        .equ SCB_PRIGROUP_Shift, 8   @ bitWidth 3 (PRIGROUP)  
        .equ SCB_ENDIANESS_Shift, 15   @ bitWidth 1 (ENDIANESS)  
        .equ SCB_VECTKEYSTAT_Shift, 16   @ bitWidth 16 (Register key)  
 
    .equ SCB_SCR, SCB_BASE + 0x10 @ (System control register) 
        .equ SCB_SLEEPONEXIT_Shift, 1   @ bitWidth 1 (SLEEPONEXIT)  
        .equ SCB_SLEEPDEEP_Shift, 2   @ bitWidth 1 (SLEEPDEEP)  
        .equ SCB_SEVEONPEND_Shift, 4   @ bitWidth 1 (Send Event on Pending bit)  
 
    .equ SCB_CCR, SCB_BASE + 0x14 @ (Configuration and control register) 
        .equ SCB_NONBASETHRDENA_Shift, 0   @ bitWidth 1 (Configures how the processor enters Thread mode)  
        .equ SCB_USERSETMPEND_Shift, 1   @ bitWidth 1 (USERSETMPEND)  
        .equ SCB_UNALIGN__TRP_Shift, 3   @ bitWidth 1 (UNALIGN_ TRP)  
        .equ SCB_DIV_0_TRP_Shift, 4   @ bitWidth 1 (DIV_0_TRP)  
        .equ SCB_BFHFNMIGN_Shift, 8   @ bitWidth 1 (BFHFNMIGN)  
        .equ SCB_STKALIGN_Shift, 9   @ bitWidth 1 (STKALIGN)  
 
    .equ SCB_SHPR1, SCB_BASE + 0x18 @ (System handler priority registers) 
        .equ SCB_PRI_4_Shift, 0   @ bitWidth 8 (Priority of system handler 4)  
        .equ SCB_PRI_5_Shift, 8   @ bitWidth 8 (Priority of system handler 5)  
        .equ SCB_PRI_6_Shift, 16   @ bitWidth 8 (Priority of system handler 6)  
 
    .equ SCB_SHPR2, SCB_BASE + 0x1C @ (System handler priority registers) 
        .equ SCB_PRI_11_Shift, 24   @ bitWidth 8 (Priority of system handler 11)  
 
    .equ SCB_SHPR3, SCB_BASE + 0x20 @ (System handler priority registers) 
        .equ SCB_PRI_14_Shift, 16   @ bitWidth 8 (Priority of system handler 14)  
        .equ SCB_PRI_15_Shift, 24   @ bitWidth 8 (Priority of system handler 15)  
 
    .equ SCB_SHCSR, SCB_BASE + 0x24 @ (System handler control and state register) 
        .equ SCB_MEMFAULTACT_Shift, 0   @ bitWidth 1 (Memory management fault exception active bit)  
        .equ SCB_BUSFAULTACT_Shift, 1   @ bitWidth 1 (Bus fault exception active bit)  
        .equ SCB_USGFAULTACT_Shift, 3   @ bitWidth 1 (Usage fault exception active bit)  
        .equ SCB_SVCALLACT_Shift, 7   @ bitWidth 1 (SVC call active bit)  
        .equ SCB_MONITORACT_Shift, 8   @ bitWidth 1 (Debug monitor active bit)  
        .equ SCB_PENDSVACT_Shift, 10   @ bitWidth 1 (PendSV exception active bit)  
        .equ SCB_SYSTICKACT_Shift, 11   @ bitWidth 1 (SysTick exception active bit)  
        .equ SCB_USGFAULTPENDED_Shift, 12   @ bitWidth 1 (Usage fault exception pending bit)  
        .equ SCB_MEMFAULTPENDED_Shift, 13   @ bitWidth 1 (Memory management fault exception pending bit)  
        .equ SCB_BUSFAULTPENDED_Shift, 14   @ bitWidth 1 (Bus fault exception pending bit)  
        .equ SCB_SVCALLPENDED_Shift, 15   @ bitWidth 1 (SVC call pending bit)  
        .equ SCB_MEMFAULTENA_Shift, 16   @ bitWidth 1 (Memory management fault enable bit)  
        .equ SCB_BUSFAULTENA_Shift, 17   @ bitWidth 1 (Bus fault enable bit)  
        .equ SCB_USGFAULTENA_Shift, 18   @ bitWidth 1 (Usage fault enable bit)  
 
    .equ SCB_CFSR_UFSR_BFSR_MMFSR, SCB_BASE + 0x28 @ (Configurable fault status register) 
        .equ SCB_IACCVIOL_Shift, 1   @ bitWidth 1 (Instruction access violation flag)  
        .equ SCB_MUNSTKERR_Shift, 3   @ bitWidth 1 (Memory manager fault on unstacking for a return from exception)  
        .equ SCB_MSTKERR_Shift, 4   @ bitWidth 1 (Memory manager fault on stacking for exception entry.)  
        .equ SCB_MLSPERR_Shift, 5   @ bitWidth 1 (MLSPERR)  
        .equ SCB_MMARVALID_Shift, 7   @ bitWidth 1 (Memory Management Fault Address Register MMAR valid flag)  
        .equ SCB_IBUSERR_Shift, 8   @ bitWidth 1 (Instruction bus error)  
        .equ SCB_PRECISERR_Shift, 9   @ bitWidth 1 (Precise data bus error)  
        .equ SCB_IMPRECISERR_Shift, 10   @ bitWidth 1 (Imprecise data bus error)  
        .equ SCB_UNSTKERR_Shift, 11   @ bitWidth 1 (Bus fault on unstacking for a return from exception)  
        .equ SCB_STKERR_Shift, 12   @ bitWidth 1 (Bus fault on stacking for exception entry)  
        .equ SCB_LSPERR_Shift, 13   @ bitWidth 1 (Bus fault on floating-point lazy state preservation)  
        .equ SCB_BFARVALID_Shift, 15   @ bitWidth 1 (Bus Fault Address Register BFAR valid flag)  
        .equ SCB_UNDEFINSTR_Shift, 16   @ bitWidth 1 (Undefined instruction usage fault)  
        .equ SCB_INVSTATE_Shift, 17   @ bitWidth 1 (Invalid state usage fault)  
        .equ SCB_INVPC_Shift, 18   @ bitWidth 1 (Invalid PC load usage fault)  
        .equ SCB_NOCP_Shift, 19   @ bitWidth 1 (No coprocessor usage fault.)  
        .equ SCB_UNALIGNED_Shift, 24   @ bitWidth 1 (Unaligned access usage fault)  
        .equ SCB_DIVBYZERO_Shift, 25   @ bitWidth 1 (Divide by zero usage fault)  
 
    .equ SCB_HFSR, SCB_BASE + 0x2C @ (Hard fault status register) 
        .equ SCB_VECTTBL_Shift, 1   @ bitWidth 1 (Vector table hard fault)  
        .equ SCB_FORCED_Shift, 30   @ bitWidth 1 (Forced hard fault)  
        .equ SCB_DEBUG_VT_Shift, 31   @ bitWidth 1 (Reserved for Debug use)  
 
    .equ SCB_MMFAR, SCB_BASE + 0x34 @ (Memory management fault address register) 
        .equ SCB_MMFAR_Shift, 0   @ bitWidth 32 (Memory management fault address)  
 
    .equ SCB_BFAR, SCB_BASE + 0x38 @ (Bus fault address register) 
        .equ SCB_BFAR_Shift, 0   @ bitWidth 32 (Bus fault address)  
 
    .equ SCB_AFSR, SCB_BASE + 0x3C @ (Auxiliary fault status register) 
        .equ SCB_IMPDEF_Shift, 0   @ bitWidth 32 (Implementation defined)  
 

@=========================== SCB_ACTRL ===========================@
.equ SCB_ACTRL_BASE, 0xE000E008 @ (System control block ACTLR) 
    .equ SCB_ACTRL_ACTRL, SCB_ACTRL_BASE + 0x0 @ (Auxiliary control register) 
        .equ SCB_ACTRL_DISMCYCINT_Shift, 0   @ bitWidth 1 (DISMCYCINT)  
        .equ SCB_ACTRL_DISDEFWBUF_Shift, 1   @ bitWidth 1 (DISDEFWBUF)  
        .equ SCB_ACTRL_DISFOLD_Shift, 2   @ bitWidth 1 (DISFOLD)  
        .equ SCB_ACTRL_DISFPCA_Shift, 8   @ bitWidth 1 (DISFPCA)  
        .equ SCB_ACTRL_DISOOFP_Shift, 9   @ bitWidth 1 (DISOOFP)  
 

@=========================== SPI1 ===========================@
.equ SPI1_BASE, 0x40013000 @ (Serial peripheral interface/Inter-IC sound) 
    .equ SPI1_CR1, SPI1_BASE + 0x0 @ (control register 1) 
        .equ SPI1_BIDIMODE_Shift, 15   @ bitWidth 1 (Bidirectional data mode enable)  
        .equ SPI1_BIDIOE_Shift, 14   @ bitWidth 1 (Output enable in bidirectional mode)  
        .equ SPI1_CRCEN_Shift, 13   @ bitWidth 1 (Hardware CRC calculation enable)  
        .equ SPI1_CRCNEXT_Shift, 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI1_DFF_Shift, 11   @ bitWidth 1 (Data frame format)  
        .equ SPI1_RXONLY_Shift, 10   @ bitWidth 1 (Receive only)  
        .equ SPI1_SSM_Shift, 9   @ bitWidth 1 (Software slave management)  
        .equ SPI1_SSI_Shift, 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI1_LSBFIRST_Shift, 7   @ bitWidth 1 (Frame format)  
        .equ SPI1_SPE_Shift, 6   @ bitWidth 1 (SPI enable)  
        .equ SPI1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI1_MSTR_Shift, 2   @ bitWidth 1 (Master selection)  
        .equ SPI1_CPOL_Shift, 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI1_CPHA_Shift, 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI1_CR2, SPI1_BASE + 0x4 @ (control register 2) 
        .equ SPI1_RXDMAEN_Shift, 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI1_TXDMAEN_Shift, 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI1_SSOE_Shift, 2   @ bitWidth 1 (SS output enable)  
        .equ SPI1_NSSP_Shift, 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI1_FRF_Shift, 4   @ bitWidth 1 (Frame format)  
        .equ SPI1_ERRIE_Shift, 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI1_RXNEIE_Shift, 6   @ bitWidth 1 (RX buffer not empty interrupt enable)  
        .equ SPI1_TXEIE_Shift, 7   @ bitWidth 1 (Tx buffer empty interrupt enable)  
        .equ SPI1_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI1_FRXTH_Shift, 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI1_LDMA_RX_Shift, 13   @ bitWidth 1 (Last DMA transfer for reception)  
        .equ SPI1_LDMA_TX_Shift, 14   @ bitWidth 1 (Last DMA transfer for transmission)  
 
    .equ SPI1_SR, SPI1_BASE + 0x8 @ (status register) 
        .equ SPI1_RXNE_Shift, 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI1_TXE_Shift, 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI1_CHSIDE_Shift, 2   @ bitWidth 1 (CHSIDE)  
        .equ SPI1_UDR_Shift, 3   @ bitWidth 1 (UDR)  
        .equ SPI1_CRCERR_Shift, 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI1_MODF_Shift, 5   @ bitWidth 1 (Mode fault)  
        .equ SPI1_OVR_Shift, 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI1_BSY_Shift, 7   @ bitWidth 1 (Busy flag)  
        .equ SPI1_TIFRFE_Shift, 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI1_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI1_FTLVL_Shift, 11   @ bitWidth 2 (FIFO transmission level)  
 
    .equ SPI1_DR, SPI1_BASE + 0xC @ (data register) 
        .equ SPI1_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI1_CRCPR, SPI1_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI1_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI1_RXCRCR, SPI1_BASE + 0x14 @ (RX CRC register) 
        .equ SPI1_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI1_TXCRCR, SPI1_BASE + 0x18 @ (TX CRC register) 
        .equ SPI1_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI1_I2SCFGR, SPI1_BASE + 0x1C @ (configuration register) 
        .equ SPI1_CHLEN_Shift, 0   @ bitWidth 1 (CHLEN)  
        .equ SPI1_DATLEN_Shift, 1   @ bitWidth 2 (DATLEN)  
        .equ SPI1_CKPOL_Shift, 3   @ bitWidth 1 (CKPOL)  
        .equ SPI1_I2SSTD_Shift, 4   @ bitWidth 2 (I2SSTD)  
        .equ SPI1_PCMSYNC_Shift, 7   @ bitWidth 1 (PCMSYNC)  
        .equ SPI1_I2SCFG_Shift, 8   @ bitWidth 2 (I2SCFG)  
        .equ SPI1_I2SE_Shift, 10   @ bitWidth 1 (I2SE)  
        .equ SPI1_I2SMOD_Shift, 11   @ bitWidth 1 (I2SMOD)  
        .equ SPI1_ASTRTEN_Shift, 12   @ bitWidth 1 (ASTRTEN)  
 
    .equ SPI1_I2SPR, SPI1_BASE + 0x20 @ (prescaler register) 
        .equ SPI1_I2SDIV_Shift, 0   @ bitWidth 8 (I2SDIV)  
        .equ SPI1_ODD_Shift, 8   @ bitWidth 1 (ODD)  
        .equ SPI1_MCKOE_Shift, 9   @ bitWidth 1 (MCKOE)  
 

@=========================== SPI2 ===========================@
.equ SPI2_BASE, 0x40003800 @ (Serial peripheral interface/Inter-IC sound) 
    .equ SPI2_CR1, SPI2_BASE + 0x0 @ (control register 1) 
        .equ SPI2_BIDIMODE_Shift, 15   @ bitWidth 1 (Bidirectional data mode enable)  
        .equ SPI2_BIDIOE_Shift, 14   @ bitWidth 1 (Output enable in bidirectional mode)  
        .equ SPI2_CRCEN_Shift, 13   @ bitWidth 1 (Hardware CRC calculation enable)  
        .equ SPI2_CRCNEXT_Shift, 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI2_DFF_Shift, 11   @ bitWidth 1 (Data frame format)  
        .equ SPI2_RXONLY_Shift, 10   @ bitWidth 1 (Receive only)  
        .equ SPI2_SSM_Shift, 9   @ bitWidth 1 (Software slave management)  
        .equ SPI2_SSI_Shift, 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI2_LSBFIRST_Shift, 7   @ bitWidth 1 (Frame format)  
        .equ SPI2_SPE_Shift, 6   @ bitWidth 1 (SPI enable)  
        .equ SPI2_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI2_MSTR_Shift, 2   @ bitWidth 1 (Master selection)  
        .equ SPI2_CPOL_Shift, 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI2_CPHA_Shift, 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI2_CR2, SPI2_BASE + 0x4 @ (control register 2) 
        .equ SPI2_RXDMAEN_Shift, 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI2_TXDMAEN_Shift, 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI2_SSOE_Shift, 2   @ bitWidth 1 (SS output enable)  
        .equ SPI2_NSSP_Shift, 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI2_FRF_Shift, 4   @ bitWidth 1 (Frame format)  
        .equ SPI2_ERRIE_Shift, 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI2_RXNEIE_Shift, 6   @ bitWidth 1 (RX buffer not empty interrupt enable)  
        .equ SPI2_TXEIE_Shift, 7   @ bitWidth 1 (Tx buffer empty interrupt enable)  
        .equ SPI2_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI2_FRXTH_Shift, 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI2_LDMA_RX_Shift, 13   @ bitWidth 1 (Last DMA transfer for reception)  
        .equ SPI2_LDMA_TX_Shift, 14   @ bitWidth 1 (Last DMA transfer for transmission)  
 
    .equ SPI2_SR, SPI2_BASE + 0x8 @ (status register) 
        .equ SPI2_RXNE_Shift, 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI2_TXE_Shift, 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI2_CHSIDE_Shift, 2   @ bitWidth 1 (CHSIDE)  
        .equ SPI2_UDR_Shift, 3   @ bitWidth 1 (UDR)  
        .equ SPI2_CRCERR_Shift, 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI2_MODF_Shift, 5   @ bitWidth 1 (Mode fault)  
        .equ SPI2_OVR_Shift, 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI2_BSY_Shift, 7   @ bitWidth 1 (Busy flag)  
        .equ SPI2_TIFRFE_Shift, 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI2_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI2_FTLVL_Shift, 11   @ bitWidth 2 (FIFO transmission level)  
 
    .equ SPI2_DR, SPI2_BASE + 0xC @ (data register) 
        .equ SPI2_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI2_CRCPR, SPI2_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI2_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI2_RXCRCR, SPI2_BASE + 0x14 @ (RX CRC register) 
        .equ SPI2_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI2_TXCRCR, SPI2_BASE + 0x18 @ (TX CRC register) 
        .equ SPI2_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI2_I2SCFGR, SPI2_BASE + 0x1C @ (configuration register) 
        .equ SPI2_CHLEN_Shift, 0   @ bitWidth 1 (CHLEN)  
        .equ SPI2_DATLEN_Shift, 1   @ bitWidth 2 (DATLEN)  
        .equ SPI2_CKPOL_Shift, 3   @ bitWidth 1 (CKPOL)  
        .equ SPI2_I2SSTD_Shift, 4   @ bitWidth 2 (I2SSTD)  
        .equ SPI2_PCMSYNC_Shift, 7   @ bitWidth 1 (PCMSYNC)  
        .equ SPI2_I2SCFG_Shift, 8   @ bitWidth 2 (I2SCFG)  
        .equ SPI2_I2SE_Shift, 10   @ bitWidth 1 (I2SE)  
        .equ SPI2_I2SMOD_Shift, 11   @ bitWidth 1 (I2SMOD)  
        .equ SPI2_ASTRTEN_Shift, 12   @ bitWidth 1 (ASTRTEN)  
 
    .equ SPI2_I2SPR, SPI2_BASE + 0x20 @ (prescaler register) 
        .equ SPI2_I2SDIV_Shift, 0   @ bitWidth 8 (I2SDIV)  
        .equ SPI2_ODD_Shift, 8   @ bitWidth 1 (ODD)  
        .equ SPI2_MCKOE_Shift, 9   @ bitWidth 1 (MCKOE)  
 

@=========================== SPI3 ===========================@
.equ SPI3_BASE, 0x58010000 @ (Serial peripheral interface/Inter-IC sound) 
    .equ SPI3_CR1, SPI3_BASE + 0x0 @ (control register 1) 
        .equ SPI3_BIDIMODE_Shift, 15   @ bitWidth 1 (Bidirectional data mode enable)  
        .equ SPI3_BIDIOE_Shift, 14   @ bitWidth 1 (Output enable in bidirectional mode)  
        .equ SPI3_CRCEN_Shift, 13   @ bitWidth 1 (Hardware CRC calculation enable)  
        .equ SPI3_CRCNEXT_Shift, 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI3_DFF_Shift, 11   @ bitWidth 1 (Data frame format)  
        .equ SPI3_RXONLY_Shift, 10   @ bitWidth 1 (Receive only)  
        .equ SPI3_SSM_Shift, 9   @ bitWidth 1 (Software slave management)  
        .equ SPI3_SSI_Shift, 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI3_LSBFIRST_Shift, 7   @ bitWidth 1 (Frame format)  
        .equ SPI3_SPE_Shift, 6   @ bitWidth 1 (SPI enable)  
        .equ SPI3_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI3_MSTR_Shift, 2   @ bitWidth 1 (Master selection)  
        .equ SPI3_CPOL_Shift, 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI3_CPHA_Shift, 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI3_CR2, SPI3_BASE + 0x4 @ (control register 2) 
        .equ SPI3_RXDMAEN_Shift, 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI3_TXDMAEN_Shift, 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI3_SSOE_Shift, 2   @ bitWidth 1 (SS output enable)  
        .equ SPI3_NSSP_Shift, 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI3_FRF_Shift, 4   @ bitWidth 1 (Frame format)  
        .equ SPI3_ERRIE_Shift, 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI3_RXNEIE_Shift, 6   @ bitWidth 1 (RX buffer not empty interrupt enable)  
        .equ SPI3_TXEIE_Shift, 7   @ bitWidth 1 (Tx buffer empty interrupt enable)  
        .equ SPI3_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI3_FRXTH_Shift, 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI3_LDMA_RX_Shift, 13   @ bitWidth 1 (Last DMA transfer for reception)  
        .equ SPI3_LDMA_TX_Shift, 14   @ bitWidth 1 (Last DMA transfer for transmission)  
 
    .equ SPI3_SR, SPI3_BASE + 0x8 @ (status register) 
        .equ SPI3_RXNE_Shift, 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI3_TXE_Shift, 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI3_CHSIDE_Shift, 2   @ bitWidth 1 (CHSIDE)  
        .equ SPI3_UDR_Shift, 3   @ bitWidth 1 (UDR)  
        .equ SPI3_CRCERR_Shift, 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI3_MODF_Shift, 5   @ bitWidth 1 (Mode fault)  
        .equ SPI3_OVR_Shift, 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI3_BSY_Shift, 7   @ bitWidth 1 (Busy flag)  
        .equ SPI3_TIFRFE_Shift, 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI3_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI3_FTLVL_Shift, 11   @ bitWidth 2 (FIFO transmission level)  
 
    .equ SPI3_DR, SPI3_BASE + 0xC @ (data register) 
        .equ SPI3_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI3_CRCPR, SPI3_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI3_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI3_RXCRCR, SPI3_BASE + 0x14 @ (RX CRC register) 
        .equ SPI3_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI3_TXCRCR, SPI3_BASE + 0x18 @ (TX CRC register) 
        .equ SPI3_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI3_I2SCFGR, SPI3_BASE + 0x1C @ (configuration register) 
        .equ SPI3_CHLEN_Shift, 0   @ bitWidth 1 (CHLEN)  
        .equ SPI3_DATLEN_Shift, 1   @ bitWidth 2 (DATLEN)  
        .equ SPI3_CKPOL_Shift, 3   @ bitWidth 1 (CKPOL)  
        .equ SPI3_I2SSTD_Shift, 4   @ bitWidth 2 (I2SSTD)  
        .equ SPI3_PCMSYNC_Shift, 7   @ bitWidth 1 (PCMSYNC)  
        .equ SPI3_I2SCFG_Shift, 8   @ bitWidth 2 (I2SCFG)  
        .equ SPI3_I2SE_Shift, 10   @ bitWidth 1 (I2SE)  
        .equ SPI3_I2SMOD_Shift, 11   @ bitWidth 1 (I2SMOD)  
        .equ SPI3_ASTRTEN_Shift, 12   @ bitWidth 1 (ASTRTEN)  
 
    .equ SPI3_I2SPR, SPI3_BASE + 0x20 @ (prescaler register) 
        .equ SPI3_I2SDIV_Shift, 0   @ bitWidth 8 (I2SDIV)  
        .equ SPI3_ODD_Shift, 8   @ bitWidth 1 (ODD)  
        .equ SPI3_MCKOE_Shift, 9   @ bitWidth 1 (MCKOE)  
 

@=========================== STK ===========================@
.equ STK_BASE, 0xE000E010 @ (SysTick timer) 
    .equ STK_CTRL, STK_BASE + 0x0 @ (SysTick control and status register) 
        .equ STK_ENABLE_Shift, 0   @ bitWidth 1 (Counter enable)  
        .equ STK_TICKINT_Shift, 1   @ bitWidth 1 (SysTick exception request enable)  
        .equ STK_CLKSOURCE_Shift, 2   @ bitWidth 1 (Clock source selection)  
        .equ STK_COUNTFLAG_Shift, 16   @ bitWidth 1 (COUNTFLAG)  
 
    .equ STK_LOAD, STK_BASE + 0x4 @ (SysTick reload value register) 
        .equ STK_RELOAD_Shift, 0   @ bitWidth 24 (RELOAD value)  
 
    .equ STK_VAL, STK_BASE + 0x8 @ (SysTick current value register) 
        .equ STK_CURRENT_Shift, 0   @ bitWidth 24 (Current counter value)  
 
    .equ STK_CALIB, STK_BASE + 0xC @ (SysTick calibration value register) 
        .equ STK_TENMS_Shift, 0   @ bitWidth 24 (Calibration value)  
        .equ STK_SKEW_Shift, 30   @ bitWidth 1 (SKEW flag: Indicates whether the TENMS value is exact)  
        .equ STK_NOREF_Shift, 31   @ bitWidth 1 (NOREF flag. Reads as zero)  
 

@=========================== SYSCFG ===========================@
.equ SYSCFG_BASE, 0x40010000 @ (System configuration controller) 
    .equ SYSCFG_MEMRMP, SYSCFG_BASE + 0x0 @ (memory remap register) 
        .equ SYSCFG_MEM_MODE_Shift, 0   @ bitWidth 3 (Memory mapping selection)  
 
    .equ SYSCFG_CFGR1, SYSCFG_BASE + 0x4 @ (configuration register 1) 
        .equ SYSCFG_I2C3_FMP_Shift, 22   @ bitWidth 1 (I2C3 Fast-mode Plus driving capability activation)  
        .equ SYSCFG_I2C2_FMP_Shift, 21   @ bitWidth 1 (I2C2 Fast-mode Plus driving capability activation)  
        .equ SYSCFG_I2C1_FMP_Shift, 20   @ bitWidth 1 (I2C1 Fast-mode Plus driving capability activation)  
        .equ SYSCFG_I2C_PB9_FMP_Shift, 19   @ bitWidth 1 (Fast-mode Plus Fm+ driving capability activation on PB9)  
        .equ SYSCFG_I2C_PB8_FMP_Shift, 18   @ bitWidth 1 (Fast-mode Plus Fm+ driving capability activation on PB8)  
        .equ SYSCFG_I2C_PB7_FMP_Shift, 17   @ bitWidth 1 (Fast-mode Plus Fm+ driving capability activation on PB7)  
        .equ SYSCFG_I2C_PB6_FMP_Shift, 16   @ bitWidth 1 (Fast-mode Plus Fm+ driving capability activation on PB6)  
        .equ SYSCFG_BOOSTEN_Shift, 8   @ bitWidth 1 (I/O analog switch voltage booster enable)  
 
    .equ SYSCFG_EXTICR1, SYSCFG_BASE + 0x8 @ (external interrupt configuration register 1) 
        .equ SYSCFG_EXTI3_Shift, 12   @ bitWidth 3 (EXTI 3 configuration bits)  
        .equ SYSCFG_EXTI2_Shift, 8   @ bitWidth 3 (EXTI 2 configuration bits)  
        .equ SYSCFG_EXTI1_Shift, 4   @ bitWidth 3 (EXTI 1 configuration bits)  
        .equ SYSCFG_EXTI0_Shift, 0   @ bitWidth 3 (EXTI 0 configuration bits)  
 
    .equ SYSCFG_EXTICR2, SYSCFG_BASE + 0xC @ (external interrupt configuration register 2) 
        .equ SYSCFG_EXTI7_Shift, 12   @ bitWidth 3 (EXTI 7 configuration bits)  
        .equ SYSCFG_EXTI6_Shift, 8   @ bitWidth 3 (EXTI 6 configuration bits)  
        .equ SYSCFG_EXTI5_Shift, 4   @ bitWidth 3 (EXTI 5 configuration bits)  
        .equ SYSCFG_EXTI4_Shift, 0   @ bitWidth 3 (EXTI 4 configuration bits)  
 
    .equ SYSCFG_EXTICR3, SYSCFG_BASE + 0x10 @ (external interrupt configuration register 3) 
        .equ SYSCFG_EXTI11_Shift, 12   @ bitWidth 3 (EXTI 11 configuration bits)  
        .equ SYSCFG_EXTI10_Shift, 8   @ bitWidth 3 (EXTI 10 configuration bits)  
        .equ SYSCFG_EXTI9_Shift, 4   @ bitWidth 3 (EXTI 9 configuration bits)  
        .equ SYSCFG_EXTI8_Shift, 0   @ bitWidth 3 (EXTI 8 configuration bits)  
 
    .equ SYSCFG_EXTICR4, SYSCFG_BASE + 0x14 @ (external interrupt configuration register 4) 
        .equ SYSCFG_EXTI15_Shift, 12   @ bitWidth 3 (EXTI15 configuration bits)  
        .equ SYSCFG_EXTI14_Shift, 8   @ bitWidth 3 (EXTI14 configuration bits)  
        .equ SYSCFG_EXTI13_Shift, 4   @ bitWidth 3 (EXTI13 configuration bits)  
        .equ SYSCFG_EXTI12_Shift, 0   @ bitWidth 3 (EXTI12 configuration bits)  
 
    .equ SYSCFG_SCSR, SYSCFG_BASE + 0x18 @ (SCSR) 
        .equ SYSCFG_PKASRAMBSY_Shift, 8   @ bitWidth 1 (PKA SRAM busy by erase operation)  
        .equ SYSCFG_SRAMBSY_Shift, 1   @ bitWidth 1 (SRAM1, SRAM2 and PKA SRAM busy by erase operation)  
        .equ SYSCFG_SRAM2ER_Shift, 0   @ bitWidth 1 (SRAM2 erase)  
 
    .equ SYSCFG_CFGR2, SYSCFG_BASE + 0x1C @ (CFGR2) 
        .equ SYSCFG_SPF_Shift, 8   @ bitWidth 1 (SRAM2 parity error flag)  
        .equ SYSCFG_ECCL_Shift, 3   @ bitWidth 1 (ECC Lock)  
        .equ SYSCFG_PVDL_Shift, 2   @ bitWidth 1 (PVD lock enable bit)  
        .equ SYSCFG_SPL_Shift, 1   @ bitWidth 1 (SRAM2 parity lock bit)  
        .equ SYSCFG_CLL_Shift, 0   @ bitWidth 1 (CPU1 LOCKUP Hardfault output enable bit)  
 
    .equ SYSCFG_SWPR, SYSCFG_BASE + 0x20 @ (SWPR) 
        .equ SYSCFG_P31WP_Shift, 31   @ bitWidth 1 (SRAM2 1Kbyte page 31 write protection)  
        .equ SYSCFG_P30WP_Shift, 30   @ bitWidth 1 (SRAM2 1Kbyte page 30 write protection)  
        .equ SYSCFG_P29WP_Shift, 29   @ bitWidth 1 (SRAM2 1Kbyte page 29 write protection)  
        .equ SYSCFG_P28WP_Shift, 28   @ bitWidth 1 (SRAM2 1Kbyte page 28 write protection)  
        .equ SYSCFG_P27WP_Shift, 27   @ bitWidth 1 (SRAM2 1Kbyte page 27 write protection)  
        .equ SYSCFG_P26WP_Shift, 26   @ bitWidth 1 (SRAM2 1Kbyte page 26 write protection)  
        .equ SYSCFG_P25WP_Shift, 25   @ bitWidth 1 (SRAM2 1Kbyte page 25 write protection)  
        .equ SYSCFG_P24WP_Shift, 24   @ bitWidth 1 (SRAM2 1Kbyte page 24 write protection)  
        .equ SYSCFG_P23WP_Shift, 23   @ bitWidth 1 (SRAM2 1Kbyte page 23 write protection)  
        .equ SYSCFG_P22WP_Shift, 22   @ bitWidth 1 (SRAM2 1Kbyte page 22 write protection)  
        .equ SYSCFG_P21WP_Shift, 21   @ bitWidth 1 (SRAM2 1Kbyte page 21 write protection)  
        .equ SYSCFG_P20WP_Shift, 20   @ bitWidth 1 (SRAM2 1Kbyte page 20 write protection)  
        .equ SYSCFG_P19WP_Shift, 19   @ bitWidth 1 (SRAM2 1Kbyte page 19 write protection)  
        .equ SYSCFG_P18WP_Shift, 18   @ bitWidth 1 (SRAM2 1Kbyte page 18 write protection)  
        .equ SYSCFG_P17WP_Shift, 17   @ bitWidth 1 (SRAM2 1Kbyte page 17 write protection)  
        .equ SYSCFG_P16WP_Shift, 16   @ bitWidth 1 (SRAM2 1Kbyte page 16 write protection)  
        .equ SYSCFG_P15WP_Shift, 15   @ bitWidth 1 (SRAM2 1Kbyte page 15 write protection)  
        .equ SYSCFG_P14WP_Shift, 14   @ bitWidth 1 (SRAM2 1Kbyte page 14 write protection)  
        .equ SYSCFG_P13WP_Shift, 13   @ bitWidth 1 (SRAM2 1Kbyte page 13 write protection)  
        .equ SYSCFG_P12WP_Shift, 12   @ bitWidth 1 (SRAM2 1Kbyte page 12 write protection)  
        .equ SYSCFG_P11WP_Shift, 11   @ bitWidth 1 (SRAM2 1Kbyte page 11 write protection)  
        .equ SYSCFG_P10WP_Shift, 10   @ bitWidth 1 (SRAM2 1Kbyte page 10 write protection)  
        .equ SYSCFG_P9WP_Shift, 9   @ bitWidth 1 (SRAM2 1Kbyte page 9 write protection)  
        .equ SYSCFG_P8WP_Shift, 8   @ bitWidth 1 (SRAM2 1Kbyte page 8 write protection)  
        .equ SYSCFG_P7WP_Shift, 7   @ bitWidth 1 (SRAM2 1Kbyte page 7 write protection)  
        .equ SYSCFG_P6WP_Shift, 6   @ bitWidth 1 (SRAM2 1Kbyte page 6 write protection)  
        .equ SYSCFG_P5WP_Shift, 5   @ bitWidth 1 (SRAM2 1Kbyte page 5 write protection)  
        .equ SYSCFG_P4WP_Shift, 4   @ bitWidth 1 (SRAM2 1Kbyte page 4 write protection)  
        .equ SYSCFG_P3WP_Shift, 3   @ bitWidth 1 (SRAM2 1Kbyte page 3 write protection)  
        .equ SYSCFG_P2WP_Shift, 2   @ bitWidth 1 (SRAM2 1Kbyte page 2 write protection)  
        .equ SYSCFG_P1WP_Shift, 1   @ bitWidth 1 (SRAM2 1Kbyte page 1 write protection)  
        .equ SYSCFG_P0WP_Shift, 0   @ bitWidth 1 (SRAM2 1Kbyte page 0 write protection)  
 
    .equ SYSCFG_SKR, SYSCFG_BASE + 0x24 @ (SKR) 
        .equ SYSCFG_KEY_Shift, 0   @ bitWidth 8 (SRAM2 write protection key for software erase)  
 
    .equ SYSCFG_RFDCR, SYSCFG_BASE + 0x208 @ (radio debug control register) 
        .equ SYSCFG_RFTBSEL_Shift, 0   @ bitWidth 1 (radio debug test bus selection)  
 

@=========================== SYSCFG_continue ===========================@
.equ SYSCFG_continue_BASE, 0x40010100 @ (System configuration controller) 
    .equ SYSCFG_continue_IMR1, SYSCFG_continue_BASE + 0x0 @ (IMR1) 
        .equ SYSCFG_continue_EXTI15IM_Shift, 31   @ bitWidth 1 (Peripheral EXTI15 interrupt mask to CPU1)  
        .equ SYSCFG_continue_EXTI14IM_Shift, 30   @ bitWidth 1 (Peripheral EXTI14 interrupt mask to CPU1)  
        .equ SYSCFG_continue_EXTI13IM_Shift, 29   @ bitWidth 1 (Peripheral EXTI13 interrupt mask to CPU1)  
        .equ SYSCFG_continue_EXTI12IM_Shift, 28   @ bitWidth 1 (Peripheral EXTI12 interrupt mask to CPU1)  
        .equ SYSCFG_continue_EXTI11IM_Shift, 27   @ bitWidth 1 (Peripheral EXTI11 interrupt mask to CPU1)  
        .equ SYSCFG_continue_EXTI10IM_Shift, 26   @ bitWidth 1 (Peripheral EXTI10 interrupt mask to CPU1)  
        .equ SYSCFG_continue_EXTI9IM_Shift, 25   @ bitWidth 1 (Peripheral EXTI9 interrupt mask to CPU1)  
        .equ SYSCFG_continue_EXTI8IM_Shift, 24   @ bitWidth 1 (Peripheral EXTI8 interrupt mask to CPU1)  
        .equ SYSCFG_continue_EXTI7IM_Shift, 23   @ bitWidth 1 (Peripheral EXTI7 interrupt mask to CPU1)  
        .equ SYSCFG_continue_EXTI6IM_Shift, 22   @ bitWidth 1 (Peripheral EXTI6 interrupt mask to CPU1)  
        .equ SYSCFG_continue_EXTI5IM_Shift, 21   @ bitWidth 1 (Peripheral EXTI5 interrupt mask to CPU1)  
        .equ SYSCFG_continue_RTCSSRUIM_Shift, 2   @ bitWidth 1 (RTCSSRUIM)  
        .equ SYSCFG_continue_RTCSTAMPTAMPLSECSSIM_Shift, 0   @ bitWidth 1 (RTCSTAMPTAMPLSECSSIM)  
 
    .equ SYSCFG_continue_IMR2, SYSCFG_continue_BASE + 0x4 @ (IMR2) 
        .equ SYSCFG_continue_PVDIM_Shift, 20   @ bitWidth 1 (Peripheral xxx interrupt mask to CPU1)  
        .equ SYSCFG_continue_PVM3IM_Shift, 18   @ bitWidth 1 (Peripheral xxx interrupt mask to CPU1)  
 
    .equ SYSCFG_continue_C2IMR1, SYSCFG_continue_BASE + 0x8 @ (C2IMR1) 
        .equ SYSCFG_continue_EXTI15IM_Shift, 31   @ bitWidth 1 (Peripheral EXTI15 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI14IM_Shift, 30   @ bitWidth 1 (Peripheral EXTI14 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI13IM_Shift, 29   @ bitWidth 1 (Peripheral EXTI13 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI12IM_Shift, 28   @ bitWidth 1 (Peripheral EXTI12 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI11IM_Shift, 27   @ bitWidth 1 (Peripheral EXTI11 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI10IM_Shift, 26   @ bitWidth 1 (Peripheral EXTI10 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI9IM_Shift, 25   @ bitWidth 1 (Peripheral EXTI9 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI8IM_Shift, 24   @ bitWidth 1 (Peripheral EXTI8 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI7IM_Shift, 23   @ bitWidth 1 (Peripheral EXTI7 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI6IM_Shift, 22   @ bitWidth 1 (Peripheral EXTI6 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI5IM_Shift, 21   @ bitWidth 1 (Peripheral EXTI5 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI4IM_Shift, 20   @ bitWidth 1 (Peripheral EXTI4 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI3IM_Shift, 19   @ bitWidth 1 (Peripheral EXTI3 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI2IM_Shift, 18   @ bitWidth 1 (Peripheral EXTI2 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI1IM_Shift, 17   @ bitWidth 1 (Peripheral EXTI1 interrupt mask to CPU2)  
        .equ SYSCFG_continue_EXTI0IM_Shift, 16   @ bitWidth 1 (Peripheral EXTI0 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DAC1IM_Shift, 13   @ bitWidth 1 (Peripheral DAC1 interrupt mask to CPU2)  
        .equ SYSCFG_continue_ADCIM_Shift, 12   @ bitWidth 1 (Peripheral ADC interrupt mask to CPU2)  
        .equ SYSCFG_continue_COMPIM_Shift, 11   @ bitWidth 1 (Peripheral COMP interrupt mask to CPU2)  
        .equ SYSCFG_continue_FLASHIM_Shift, 6   @ bitWidth 1 (Peripheral FLASH interrupt mask to CPU2)  
        .equ SYSCFG_continue_RCCIM_Shift, 5   @ bitWidth 1 (Peripheral RCC interrupt mask to CPU2)  
        .equ SYSCFG_continue_RTCWKUPIM_Shift, 3   @ bitWidth 1 (Peripheral RTCWKUP interrupt mask to CPU2)  
        .equ SYSCFG_continue_RTCSSRUIM_Shift, 2   @ bitWidth 1 (RTCSSRUIM)  
        .equ SYSCFG_continue_RTCALARMIM_Shift, 1   @ bitWidth 1 (Peripheral RTCALARM interrupt mask to CPU2)  
        .equ SYSCFG_continue_RTCSTAMPTAMPLSECSSIM_Shift, 0   @ bitWidth 1 (Peripheral RTCSTAMPTAMPLSECSS interrupt mask to CPU2)  
        .equ SYSCFG_continue_AES1IM_Shift, 10   @ bitWidth 1 (AES1IM)  
        .equ SYSCFG_continue_PKAIM_Shift, 8   @ bitWidth 1 (PKAIM)  
 
    .equ SYSCFG_continue_C2IMR2, SYSCFG_continue_BASE + 0xC @ (C2IMR2) 
        .equ SYSCFG_continue_PVDIM_Shift, 20   @ bitWidth 1 (Peripheral PVD interrupt mask to CPU2)  
        .equ SYSCFG_continue_PVM3IM_Shift, 18   @ bitWidth 1 (Peripheral PVM3 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMAMUX1IM_Shift, 15   @ bitWidth 1 (Peripheral DMAMUX1 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA2CH7IM_Shift, 14   @ bitWidth 1 (Peripheral DMA2CH7 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA2CH6IM_Shift, 13   @ bitWidth 1 (Peripheral DMA2CH6 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA2CH5IM_Shift, 12   @ bitWidth 1 (Peripheral DMA2CH5 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA2CH4IM_Shift, 11   @ bitWidth 1 (Peripheral DMA2CH4 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA2CH3IM_Shift, 10   @ bitWidth 1 (Peripheral DMA2CH3 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA2CH2IM_Shift, 9   @ bitWidth 1 (Peripheral DMA2CH2 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA2CH1IM_Shift, 8   @ bitWidth 1 (Peripheral DMA2CH1 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA1CH7IM_Shift, 6   @ bitWidth 1 (Peripheral DMA1CH7 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA1CH6IM_Shift, 5   @ bitWidth 1 (Peripheral DMA1CH6 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA1CH5IM_Shift, 4   @ bitWidth 1 (Peripheral DMA1CH5 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA1CH4IM_Shift, 3   @ bitWidth 1 (Peripheral DMA1CH4 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA1CH3IM_Shift, 2   @ bitWidth 1 (Peripheral DMA1CH3 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA1CH2IM_Shift, 1   @ bitWidth 1 (Peripheral DMA1CH2 interrupt mask to CPU2)  
        .equ SYSCFG_continue_DMA1CH1IM_Shift, 0   @ bitWidth 1 (Peripheral DMA1CH1 interrupt mask to CPU2)  
 

@=========================== TAMP ===========================@
.equ TAMP_BASE, 0x4000B000 @ (Tamper and backup registers) 
    .equ TAMP_CR1, TAMP_BASE + 0x0 @ (control register 1) 
        .equ TAMP_TAMP1E_Shift, 0   @ bitWidth 1 (TAMP1E)  
        .equ TAMP_TAMP2E_Shift, 1   @ bitWidth 1 (TAMP2E)  
        .equ TAMP_TAMP3E_Shift, 2   @ bitWidth 1 (TAMP2E)  
        .equ TAMP_ITAMP3E_Shift, 18   @ bitWidth 1 (ITAMP3E)  
        .equ TAMP_ITAMP5E_Shift, 20   @ bitWidth 1 (ITAMP5E)  
        .equ TAMP_ITAMP6E_Shift, 21   @ bitWidth 1 (ITAMP6E)  
        .equ TAMP_ITAMP8E_Shift, 23   @ bitWidth 1 (ITAMP8E)  
 
    .equ TAMP_CR2, TAMP_BASE + 0x4 @ (control register 2) 
        .equ TAMP_TAMP1NOER_Shift, 0   @ bitWidth 1 (TAMP1NOER)  
        .equ TAMP_TAMP2NOER_Shift, 1   @ bitWidth 1 (TAMP2NOER)  
        .equ TAMP_TAMP3NOER_Shift, 2   @ bitWidth 1 (TAMP3NOER)  
        .equ TAMP_TAMP1MSK_Shift, 16   @ bitWidth 1 (TAMP1MSK)  
        .equ TAMP_TAMP2MSK_Shift, 17   @ bitWidth 1 (TAMP2MSK)  
        .equ TAMP_TAMP3MSK_Shift, 18   @ bitWidth 1 (TAMP3MSK)  
        .equ TAMP_BKERASE_Shift, 23   @ bitWidth 1 (Backup registerserase)  
        .equ TAMP_TAMP1TRG_Shift, 24   @ bitWidth 1 (TAMP1TRG)  
        .equ TAMP_TAMP2TRG_Shift, 25   @ bitWidth 1 (TAMP2TRG)  
        .equ TAMP_TAMP3TRG_Shift, 26   @ bitWidth 1 (TAMP3TRG)  
 
    .equ TAMP_CR3, TAMP_BASE + 0x8 @ (TAMP control register 3) 
        .equ TAMP_ITAMP3NOER_Shift, 2   @ bitWidth 1 (ITAMP3NOER)  
        .equ TAMP_ITAMP5NOER_Shift, 4   @ bitWidth 1 (ITAMP5NOER)  
        .equ TAMP_ITAMP6NOER_Shift, 5   @ bitWidth 1 (ITAMP6NOER)  
        .equ TAMP_ITAMP8NOER_Shift, 7   @ bitWidth 1 (ITAMP8NOER)  
 
    .equ TAMP_FLTCR, TAMP_BASE + 0xC @ (TAMP filter control register) 
        .equ TAMP_TAMPFREQ_Shift, 0   @ bitWidth 3 (TAMPFREQ)  
        .equ TAMP_TAMPFLT_Shift, 3   @ bitWidth 2 (TAMPFLT)  
        .equ TAMP_TAMPPRCH_Shift, 5   @ bitWidth 2 (TAMPPRCH)  
        .equ TAMP_TAMPPUDIS_Shift, 7   @ bitWidth 1 (TAMPPUDIS)  
 
    .equ TAMP_IER, TAMP_BASE + 0x2C @ (TAMP interrupt enable register) 
        .equ TAMP_TAMP1IE_Shift, 0   @ bitWidth 1 (TAMP1IE)  
        .equ TAMP_TAMP2IE_Shift, 1   @ bitWidth 1 (TAMP2IE)  
        .equ TAMP_TAMP3IE_Shift, 2   @ bitWidth 1 (TAMP3IE)  
        .equ TAMP_ITAMP3IE_Shift, 18   @ bitWidth 1 (ITAMP3IE)  
        .equ TAMP_ITAMP5IE_Shift, 20   @ bitWidth 1 (ITAMP5IE)  
        .equ TAMP_ITAMP6IE_Shift, 21   @ bitWidth 1 (ITAMP6IE)  
        .equ TAMP_ITAMP8IE_Shift, 23   @ bitWidth 1 (ITAMP8IE)  
 
    .equ TAMP_SR, TAMP_BASE + 0x30 @ (TAMP status register) 
        .equ TAMP_TAMP1F_Shift, 0   @ bitWidth 1 (TAMP1F)  
        .equ TAMP_TAMP2F_Shift, 1   @ bitWidth 1 (TAMP2F)  
        .equ TAMP_TAMP3F_Shift, 2   @ bitWidth 1 (TAMP3F)  
        .equ TAMP_ITAMP3F_Shift, 18   @ bitWidth 1 (ITAMP3F)  
        .equ TAMP_ITAMP5F_Shift, 20   @ bitWidth 1 (ITAMP5F)  
        .equ TAMP_ITAMP6F_Shift, 21   @ bitWidth 1 (ITAMP6F)  
        .equ TAMP_ITAMP8F_Shift, 23   @ bitWidth 1 (ITAMP8F)  
 
    .equ TAMP_MISR, TAMP_BASE + 0x34 @ (TAMP masked interrupt status register) 
        .equ TAMP_TAMP1MF_Shift, 0   @ bitWidth 1 (TAMP1MF:)  
        .equ TAMP_TAMP2MF_Shift, 1   @ bitWidth 1 (TAMP2MF)  
        .equ TAMP_TAMP3MF_Shift, 2   @ bitWidth 1 (TAMP3MF)  
        .equ TAMP_ITAMP3MF_Shift, 18   @ bitWidth 1 (ITAMP3MF)  
        .equ TAMP_ITAMP5MF_Shift, 20   @ bitWidth 1 (ITAMP5MF)  
        .equ TAMP_ITAMP6MF_Shift, 21   @ bitWidth 1 (ITAMP6MF)  
        .equ TAMP_ITAMP8MF_Shift, 23   @ bitWidth 1 (ITAMP8MF)  
 
    .equ TAMP_SCR, TAMP_BASE + 0x3C @ (TAMP status clear register) 
        .equ TAMP_CTAMP1F_Shift, 0   @ bitWidth 1 (CTAMP1F)  
        .equ TAMP_CTAMP2F_Shift, 1   @ bitWidth 1 (CTAMP2F)  
        .equ TAMP_CTAMP3F_Shift, 2   @ bitWidth 1 (CTAMP3F)  
        .equ TAMP_CITAMP3F_Shift, 18   @ bitWidth 1 (CITAMP3F)  
        .equ TAMP_CITAMP5F_Shift, 20   @ bitWidth 1 (CITAMP5F)  
        .equ TAMP_CITAMP6F_Shift, 21   @ bitWidth 1 (CITAMP6F)  
        .equ TAMP_CITAMP8F_Shift, 23   @ bitWidth 1 (CITAMP8F)  
 
    .equ TAMP_COUNTR, TAMP_BASE + 0x40 @ (monotonic counter register) 
        .equ TAMP_COUNT_Shift, 0   @ bitWidth 32 (COUNT)  
 
    .equ TAMP_BKP0R, TAMP_BASE + 0x100 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP1R, TAMP_BASE + 0x104 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP2R, TAMP_BASE + 0x108 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP3R, TAMP_BASE + 0x10C @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP4R, TAMP_BASE + 0x110 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP5R, TAMP_BASE + 0x114 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP6R, TAMP_BASE + 0x118 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP7R, TAMP_BASE + 0x11C @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP8R, TAMP_BASE + 0x120 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP9R, TAMP_BASE + 0x124 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP10R, TAMP_BASE + 0x140 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP11R, TAMP_BASE + 0x144 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP12R, TAMP_BASE + 0x148 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP13R, TAMP_BASE + 0x14C @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP14R, TAMP_BASE + 0x150 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP15R, TAMP_BASE + 0x154 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP16R, TAMP_BASE + 0x158 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP17R, TAMP_BASE + 0x15C @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP18R, TAMP_BASE + 0x160 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ TAMP_BKP19R, TAMP_BASE + 0x164 @ (TAMP backup register) 
        .equ TAMP_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 

@=========================== TIM1 ===========================@
.equ TIM1_BASE, 0x40012C00 @ (Advanced-control timers) 
    .equ TIM1_CR1, TIM1_BASE + 0x0 @ (control register 1) 
        .equ TIM1_UIFREMAP_Shift, 11   @ bitWidth 1 (UIF status bit remapping)  
        .equ TIM1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM1_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode selection)  
        .equ TIM1_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM1_OPM_Shift, 3   @ bitWidth 1 (One pulse mode)  
        .equ TIM1_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM1_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM1_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM1_CR2, TIM1_BASE + 0x4 @ (control register 2) 
        .equ TIM1_MMS2_Shift, 20   @ bitWidth 4 (Master mode selection 2)  
        .equ TIM1_OIS6_Shift, 18   @ bitWidth 1 (Output Idle state 6 OC6 output)  
        .equ TIM1_OIS5_Shift, 16   @ bitWidth 1 (Output Idle state 5 OC5 output)  
        .equ TIM1_OIS4_Shift, 14   @ bitWidth 1 (Output Idle state 4 OC4 output)  
        .equ TIM1_OIS3N_Shift, 13   @ bitWidth 1 (Output Idle state 3 OC3N output)  
        .equ TIM1_OIS3_Shift, 12   @ bitWidth 1 (Output Idle state 3 OC3 output)  
        .equ TIM1_OIS2N_Shift, 11   @ bitWidth 1 (Output Idle state 2 OC2N output)  
        .equ TIM1_OIS2_Shift, 10   @ bitWidth 1 (Output Idle state 2 OC2 output)  
        .equ TIM1_OIS1N_Shift, 9   @ bitWidth 1 (Output Idle state 1 OC1N output)  
        .equ TIM1_OIS1_Shift, 8   @ bitWidth 1 (Output Idle state 1 OC1 output)  
        .equ TIM1_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM1_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM1_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA selection)  
        .equ TIM1_CCUS_Shift, 2   @ bitWidth 1 (Capture/compare control update selection)  
        .equ TIM1_CCPC_Shift, 0   @ bitWidth 1 (Capture/compare preloaded control)  
 
    .equ TIM1_SMCR, TIM1_BASE + 0x8 @ (slave mode control register) 
        .equ TIM1_TS3_4_Shift, 20   @ bitWidth 2 (Trigger selection)  
        .equ TIM1_SMS_3_Shift, 16   @ bitWidth 1 (Slave mode selection)  
        .equ TIM1_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM1_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM1_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM1_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM1_MSM_Shift, 7   @ bitWidth 1 (Master/slave mode)  
        .equ TIM1_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM1_OCCS_Shift, 3   @ bitWidth 1 (OCREF clear selection)  
        .equ TIM1_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM1_DIER, TIM1_BASE + 0xC @ (DMA/interrupt enable register) 
        .equ TIM1_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM1_COMDE_Shift, 13   @ bitWidth 1 (COM DMA request enable)  
        .equ TIM1_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request enable)  
        .equ TIM1_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request enable)  
        .equ TIM1_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request enable)  
        .equ TIM1_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request enable)  
        .equ TIM1_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM1_BIE_Shift, 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM1_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM1_COMIE_Shift, 5   @ bitWidth 1 (COM interrupt enable)  
        .equ TIM1_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt enable)  
        .equ TIM1_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt enable)  
        .equ TIM1_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt enable)  
        .equ TIM1_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM1_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM1_SR, TIM1_BASE + 0x10 @ (status register) 
        .equ TIM1_CC6IF_Shift, 17   @ bitWidth 1 (Compare 6 interrupt flag)  
        .equ TIM1_CC5IF_Shift, 16   @ bitWidth 1 (Compare 5 interrupt flag)  
        .equ TIM1_SBIF_Shift, 13   @ bitWidth 1 (System Break interrupt flag)  
        .equ TIM1_CC4OF_Shift, 12   @ bitWidth 1 (Capture/Compare 4 overcapture flag)  
        .equ TIM1_CC3OF_Shift, 11   @ bitWidth 1 (Capture/Compare 3 overcapture flag)  
        .equ TIM1_CC2OF_Shift, 10   @ bitWidth 1 (Capture/Compare 2 overcapture flag)  
        .equ TIM1_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM1_B2IF_Shift, 8   @ bitWidth 1 (Break 2 interrupt flag)  
        .equ TIM1_BIF_Shift, 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM1_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM1_COMIF_Shift, 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM1_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt flag)  
        .equ TIM1_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt flag)  
        .equ TIM1_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt flag)  
        .equ TIM1_CC1IF_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt flag)  
        .equ TIM1_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM1_EGR, TIM1_BASE + 0x14 @ (event generation register) 
        .equ TIM1_B2G_Shift, 8   @ bitWidth 1 (Break 2 generation)  
        .equ TIM1_BG_Shift, 7   @ bitWidth 1 (Break generation)  
        .equ TIM1_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM1_COM_Shift, 5   @ bitWidth 1 (Capture/Compare control update generation)  
        .equ TIM1_CC4G_Shift, 4   @ bitWidth 1 (Capture/Compare 4 generation)  
        .equ TIM1_CC3G_Shift, 3   @ bitWidth 1 (Capture/Compare 3 generation)  
        .equ TIM1_CC2G_Shift, 2   @ bitWidth 1 (Capture/Compare 2 generation)  
        .equ TIM1_CC1G_Shift, 1   @ bitWidth 1 (Capture/Compare 1 generation)  
        .equ TIM1_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM1_CCMR1_Output, TIM1_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM1_OC2M_3_Shift, 24   @ bitWidth 1 (Output Compare 2 mode - bit 3)  
        .equ TIM1_OC1M_3_Shift, 16   @ bitWidth 1 (Output Compare 1 mode - bit 3)  
        .equ TIM1_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear enable)  
        .equ TIM1_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM1_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload enable)  
        .equ TIM1_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast enable)  
        .equ TIM1_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM1_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear enable)  
        .equ TIM1_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM1_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload enable)  
        .equ TIM1_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast enable)  
        .equ TIM1_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM1_CCMR1_Input, TIM1_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM1_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM1_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM1_CC2S_Shift, 8   @ bitWidth 2 (Capture/compare 2 selection)  
        .equ TIM1_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM1_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM1_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM1_CCMR2_Output, TIM1_BASE + 0x1C @ (capture/compare mode register 2 output mode) 
        .equ TIM1_OC4M_3_Shift, 24   @ bitWidth 1 (Output Compare 4 mode - bit 3)  
        .equ TIM1_OC3M_3_Shift, 16   @ bitWidth 1 (Output Compare 3 mode - bit 3)  
        .equ TIM1_OC4CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear enable)  
        .equ TIM1_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM1_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload enable)  
        .equ TIM1_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast enable)  
        .equ TIM1_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM1_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear enable)  
        .equ TIM1_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM1_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload enable)  
        .equ TIM1_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast enable)  
        .equ TIM1_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3 selection)  
 
    .equ TIM1_CCMR2_Input, TIM1_BASE + 0x1C @ (capture/compare mode register 2 input mode) 
        .equ TIM1_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM1_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM1_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM1_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM1_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM1_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3 selection)  
 
    .equ TIM1_CCER, TIM1_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM1_CC6P_Shift, 21   @ bitWidth 1 (CC6P)  
        .equ TIM1_CC6E_Shift, 20   @ bitWidth 1 (CC6E)  
        .equ TIM1_CC5P_Shift, 17   @ bitWidth 1 (CC5P)  
        .equ TIM1_CC5E_Shift, 16   @ bitWidth 1 (CC5E)  
        .equ TIM1_CC4P_Shift, 13   @ bitWidth 1 (CC4P)  
        .equ TIM1_CC4E_Shift, 12   @ bitWidth 1 (CC4E)  
        .equ TIM1_CC3NP_Shift, 11   @ bitWidth 1 (CC3NP)  
        .equ TIM1_CC3NE_Shift, 10   @ bitWidth 1 (CC3NE)  
        .equ TIM1_CC3P_Shift, 9   @ bitWidth 1 (CC3P)  
        .equ TIM1_CC3E_Shift, 8   @ bitWidth 1 (CC3E)  
        .equ TIM1_CC2NP_Shift, 7   @ bitWidth 1 (CC2NP)  
        .equ TIM1_CC2NE_Shift, 6   @ bitWidth 1 (CC2NE)  
        .equ TIM1_CC2P_Shift, 5   @ bitWidth 1 (CC2P)  
        .equ TIM1_CC2E_Shift, 4   @ bitWidth 1 (CC2E)  
        .equ TIM1_CC1NP_Shift, 3   @ bitWidth 1 (CC1NP)  
        .equ TIM1_CC1NE_Shift, 2   @ bitWidth 1 (CC1NE)  
        .equ TIM1_CC1P_Shift, 1   @ bitWidth 1 (CC1P)  
        .equ TIM1_CC1E_Shift, 0   @ bitWidth 1 (CC1E)  
 
    .equ TIM1_CNT, TIM1_BASE + 0x24 @ (counter) 
        .equ TIM1_UIFCPY_Shift, 31   @ bitWidth 1 (UIF copy)  
        .equ TIM1_CNT_Shift, 0   @ bitWidth 16 (CNT)  
 
    .equ TIM1_PSC, TIM1_BASE + 0x28 @ (prescaler) 
        .equ TIM1_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM1_ARR, TIM1_BASE + 0x2C @ (auto-reload register) 
        .equ TIM1_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM1_RCR, TIM1_BASE + 0x30 @ (repetition counter register) 
        .equ TIM1_REP_Shift, 0   @ bitWidth 16 (Repetition counter value)  
 
    .equ TIM1_CCR1, TIM1_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM1_CCR2, TIM1_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM1_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM1_CCR3, TIM1_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM1_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM1_CCR4, TIM1_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM1_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM1_BDTR, TIM1_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM1_BK2BID_Shift, 29   @ bitWidth 1 (Break2 bidirectional)  
        .equ TIM1_BKBID_Shift, 28   @ bitWidth 1 (BKBID)  
        .equ TIM1_BK2DSRM_Shift, 27   @ bitWidth 1 (Break2 Disarm)  
        .equ TIM1_BKDSRM_Shift, 26   @ bitWidth 1 (BKDSRM)  
        .equ TIM1_BK2P_Shift, 25   @ bitWidth 1 (Break 2 polarity)  
        .equ TIM1_BK2E_Shift, 24   @ bitWidth 1 (Break 2 enable)  
        .equ TIM1_BK2F_Shift, 20   @ bitWidth 4 (Break 2 filter)  
        .equ TIM1_BKF_Shift, 16   @ bitWidth 4 (Break filter)  
        .equ TIM1_MOE_Shift, 15   @ bitWidth 1 (Main output enable)  
        .equ TIM1_AOE_Shift, 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM1_BKP_Shift, 13   @ bitWidth 1 (Break polarity)  
        .equ TIM1_BKE_Shift, 12   @ bitWidth 1 (Break enable)  
        .equ TIM1_OSSR_Shift, 11   @ bitWidth 1 (Off-state selection for Run mode)  
        .equ TIM1_OSSI_Shift, 10   @ bitWidth 1 (Off-state selection for Idle mode)  
        .equ TIM1_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM1_DT_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 
    .equ TIM1_DCR, TIM1_BASE + 0x48 @ (DMA control register) 
        .equ TIM1_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM1_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM1_DMAR, TIM1_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM1_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst accesses)  
 
    .equ TIM1_OR1, TIM1_BASE + 0x50 @ (option register 1) 
        .equ TIM1_TI1_RMP_Shift, 4   @ bitWidth 1 (Input Capture 1 remap)  
        .equ TIM1_TIM1_ETR_ADC1_RMP_Shift, 0   @ bitWidth 2 (TIM1_ETR_ADC1 remapping capability)  
 
    .equ TIM1_CCMR3OutputComparemode, TIM1_BASE + 0x54 @ (capture/compare mode register 3) 
        .equ TIM1_OC6M_3_Shift, 24   @ bitWidth 1 (OC6M)  
        .equ TIM1_OC5M_3_Shift, 16   @ bitWidth 1 (OC5M)  
        .equ TIM1_OC6CE_Shift, 15   @ bitWidth 1 (OC6CE)  
        .equ TIM1_OC6M_Shift, 12   @ bitWidth 3 (OC6M)  
        .equ TIM1_OC6PE_Shift, 11   @ bitWidth 1 (OC6PE)  
        .equ TIM1_OC6FE_Shift, 10   @ bitWidth 1 (OC6FE)  
        .equ TIM1_OC5CE_Shift, 7   @ bitWidth 1 (OC5CE)  
        .equ TIM1_OC5M_Shift, 4   @ bitWidth 3 (OC5M)  
        .equ TIM1_OC5PE_Shift, 3   @ bitWidth 1 (OC5PE)  
        .equ TIM1_OC5FE_Shift, 2   @ bitWidth 1 (OC5FE)  
 
    .equ TIM1_CCR5, TIM1_BASE + 0x58 @ (capture/compare register 5) 
        .equ TIM1_GC5C3_Shift, 31   @ bitWidth 1 (Group Channel 5 and Channel 3)  
        .equ TIM1_GC5C2_Shift, 30   @ bitWidth 1 (Group Channel 5 and Channel 2)  
        .equ TIM1_GC5C1_Shift, 29   @ bitWidth 1 (Group Channel 5 and Channel 1)  
        .equ TIM1_CCR5_Shift, 0   @ bitWidth 16 (Capture/Compare 5 value)  
 
    .equ TIM1_CCR6, TIM1_BASE + 0x5C @ (capture/compare register 6) 
        .equ TIM1_CCR6_Shift, 0   @ bitWidth 16 (Capture/Compare 6 value)  
 
    .equ TIM1_AF1, TIM1_BASE + 0x60 @ (alternate function option register 1) 
        .equ TIM1_ResETRSEL_Shift, 14   @ bitWidth 4 (ETR source selection)  
        .equ TIM1_BKCMP2P_Shift, 11   @ bitWidth 1 (BRK COMP2 input polarity)  
        .equ TIM1_BKCMP1P_Shift, 10   @ bitWidth 1 (BRK COMP1 input polarity)  
        .equ TIM1_BKINP_Shift, 9   @ bitWidth 1 (BRK BKIN input polarity)  
        .equ TIM1_BKCMP2E_Shift, 2   @ bitWidth 1 (BRK COMP2 enable)  
        .equ TIM1_BKCMP1E_Shift, 1   @ bitWidth 1 (BRK COMP1 enable)  
        .equ TIM1_BKINE_Shift, 0   @ bitWidth 1 (BRK BKIN input enable)  
 
    .equ TIM1_AF2, TIM1_BASE + 0x64 @ (Alternate function register 2) 
        .equ TIM1_BK2CMP2P_Shift, 11   @ bitWidth 1 (BRK2 COMP2 input polarity)  
        .equ TIM1_BK2CMP1P_Shift, 10   @ bitWidth 1 (BRK2 COMP1 input polarity)  
        .equ TIM1_BK2INP_Shift, 9   @ bitWidth 1 (BRK2 BKIN2 input polarity)  
        .equ TIM1_BK2CMP2E_Shift, 2   @ bitWidth 1 (BRK2 COMP2 enable)  
        .equ TIM1_BK2CMP1E_Shift, 1   @ bitWidth 1 (BRK2 COMP1 enable)  
        .equ TIM1_BK2INE_Shift, 0   @ bitWidth 1 (BRK2 BKIN input enable)  
 
    .equ TIM1_TISEL, TIM1_BASE + 0x68 @ (timer input selection register) 
        .equ TIM1_TI4SEL_Shift, 24   @ bitWidth 4 (selects TI4[0] to TI4[15] input)  
        .equ TIM1_TI3SEL_Shift, 16   @ bitWidth 4 (selects TI3[0] to TI3[15] input)  
        .equ TIM1_TI2SEL_Shift, 8   @ bitWidth 4 (selects TI2[0] to TI2[15] input)  
        .equ TIM1_TI1SEL_Shift, 0   @ bitWidth 4 (selects TI1[0] to TI1[15] input)  
 

@=========================== TIM2 ===========================@
.equ TIM2_BASE, 0x40000000 @ (General-purpose-timers) 
    .equ TIM2_CR1, TIM2_BASE + 0x0 @ (control register 1) 
        .equ TIM2_UIFREMAP_Shift, 11   @ bitWidth 1 (UIF status bit remapping)  
        .equ TIM2_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM2_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM2_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode selection)  
        .equ TIM2_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM2_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM2_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM2_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM2_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM2_CR2, TIM2_BASE + 0x4 @ (control register 2) 
        .equ TIM2_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM2_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA selection)  
 
    .equ TIM2_SMCR, TIM2_BASE + 0x8 @ (slave mode control register) 
        .equ TIM2_SMS_3_Shift, 16   @ bitWidth 1 (Slave mode selection - bit 3)  
        .equ TIM2_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM2_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM2_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM2_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM2_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM2_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM2_OCCS_Shift, 3   @ bitWidth 1 (OCREF clear selection)  
        .equ TIM2_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM2_DIER, TIM2_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM2_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request enable)  
        .equ TIM2_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request enable)  
        .equ TIM2_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request enable)  
        .equ TIM2_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request enable)  
        .equ TIM2_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM2_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM2_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt enable)  
        .equ TIM2_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt enable)  
        .equ TIM2_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt enable)  
        .equ TIM2_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM2_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM2_SR, TIM2_BASE + 0x10 @ (status register) 
        .equ TIM2_CC4OF_Shift, 12   @ bitWidth 1 (Capture/Compare 4 overcapture flag)  
        .equ TIM2_CC3OF_Shift, 11   @ bitWidth 1 (Capture/Compare 3 overcapture flag)  
        .equ TIM2_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture flag)  
        .equ TIM2_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM2_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM2_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt flag)  
        .equ TIM2_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt flag)  
        .equ TIM2_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt flag)  
        .equ TIM2_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt flag)  
        .equ TIM2_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM2_EGR, TIM2_BASE + 0x14 @ (event generation register) 
        .equ TIM2_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM2_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4 generation)  
        .equ TIM2_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3 generation)  
        .equ TIM2_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2 generation)  
        .equ TIM2_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1 generation)  
        .equ TIM2_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM2_CCMR1_Output, TIM2_BASE + 0x18 @ (capture/compare mode register 1 output mode) 
        .equ TIM2_OC2M_3_Shift, 24   @ bitWidth 1 (Output Compare 2 mode - bit 3)  
        .equ TIM2_OC1M_3_Shift, 16   @ bitWidth 1 (Output Compare 1 mode - bit 3)  
        .equ TIM2_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear enable)  
        .equ TIM2_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM2_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload enable)  
        .equ TIM2_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast enable)  
        .equ TIM2_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2 selection)  
        .equ TIM2_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear enable)  
        .equ TIM2_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM2_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload enable)  
        .equ TIM2_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast enable)  
        .equ TIM2_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM2_CCMR1_Input, TIM2_BASE + 0x18 @ (capture/compare mode register 1 input mode) 
        .equ TIM2_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM2_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM2_CC2S_Shift, 8   @ bitWidth 2 (Capture/compare 2 selection)  
        .equ TIM2_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM2_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM2_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1 selection)  
 
    .equ TIM2_CCMR2_Output, TIM2_BASE + 0x1C @ (capture/compare mode register 2 output mode) 
        .equ TIM2_OC4M_3_Shift, 24   @ bitWidth 1 (Output Compare 4 mode - bit 3)  
        .equ TIM2_OC3M_3_Shift, 16   @ bitWidth 1 (Output Compare 3 mode - bit 3)  
        .equ TIM2_OC4CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear enable)  
        .equ TIM2_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM2_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload enable)  
        .equ TIM2_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast enable)  
        .equ TIM2_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM2_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear enable)  
        .equ TIM2_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM2_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload enable)  
        .equ TIM2_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast enable)  
        .equ TIM2_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3 selection)  
 
    .equ TIM2_CCMR2_Input, TIM2_BASE + 0x1C @ (capture/compare mode register 2 input mode) 
        .equ TIM2_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM2_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM2_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4 selection)  
        .equ TIM2_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM2_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM2_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3 selection)  
 
    .equ TIM2_CCER, TIM2_BASE + 0x20 @ (capture/compare enable register) 
        .equ TIM2_CC4NP_Shift, 15   @ bitWidth 1 (Capture/Compare 4 output Polarity)  
        .equ TIM2_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM2_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output enable)  
        .equ TIM2_CC3NP_Shift, 11   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM2_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output Polarity)  
        .equ TIM2_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output enable)  
        .equ TIM2_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM2_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output Polarity)  
        .equ TIM2_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output enable)  
        .equ TIM2_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM2_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output Polarity)  
        .equ TIM2_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM2_CNT, TIM2_BASE + 0x24 @ (counter) 
        .equ TIM2_CNT_H_Shift, 16   @ bitWidth 16 (High counter value TIM2 only)  
        .equ TIM2_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM2_PSC, TIM2_BASE + 0x28 @ (prescaler) 
        .equ TIM2_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM2_ARR, TIM2_BASE + 0x2C @ (auto-reload register) 
        .equ TIM2_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value TIM2 only)  
        .equ TIM2_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM2_CCR1, TIM2_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM2_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1 value TIM2 only)  
        .equ TIM2_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1 value)  
 
    .equ TIM2_CCR2, TIM2_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2 value TIM2 only)  
        .equ TIM2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2 value)  
 
    .equ TIM2_CCR3, TIM2_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM2_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2 only)  
        .equ TIM2_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM2_CCR4, TIM2_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM2_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2 only)  
        .equ TIM2_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM2_DCR, TIM2_BASE + 0x48 @ (DMA control register) 
        .equ TIM2_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM2_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM2_DMAR, TIM2_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM2_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst accesses)  
 
    .equ TIM2_TIM2_OR1, TIM2_BASE + 0x50 @ (TIM2 option register) 
        .equ TIM2_TI4_RMP_Shift, 2   @ bitWidth 2 (Input capture 4 remap)  
        .equ TIM2_ETR_RMP_Shift, 1   @ bitWidth 1 (External trigger remap)  
 
    .equ TIM2_TIM2_AF1, TIM2_BASE + 0x60 @ (TIM2 alternate function option register 1) 
        .equ TIM2_ETRSEL_Shift, 14   @ bitWidth 4 (External trigger source selection)  
 
    .equ TIM2_TIM2_TISEL, TIM2_BASE + 0x68 @ (TIM2 timer input selection register) 
        .equ TIM2_TI1SEL_Shift, 0   @ bitWidth 4 (TI1SEL)  
        .equ TIM2_TI2SEL_Shift, 8   @ bitWidth 4 (TI2SEL)  
 

@=========================== TIM16 ===========================@
.equ TIM16_BASE, 0x40014400 @ (General-purpose timers) 
    .equ TIM16_CR1, TIM16_BASE + 0x0 @ (TIM16/TIM17 control register 1) 
        .equ TIM16_UIFREMAP_Shift, 11   @ bitWidth 1 (UIF status bit remapping)  
        .equ TIM16_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM16_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM16_OPM_Shift, 3   @ bitWidth 1 (One pulse mode)  
        .equ TIM16_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM16_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM16_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM16_CR2, TIM16_BASE + 0x4 @ (TIM16/TIM17 control register 2) 
        .equ TIM16_OIS1N_Shift, 9   @ bitWidth 1 (OIS1N)  
        .equ TIM16_OIS1_Shift, 8   @ bitWidth 1 (OIS1)  
        .equ TIM16_CCDS_Shift, 3   @ bitWidth 1 (CCDS)  
        .equ TIM16_CCUS_Shift, 2   @ bitWidth 1 (CCUS)  
        .equ TIM16_CCPC_Shift, 0   @ bitWidth 1 (CCPC)  
 
    .equ TIM16_DIER, TIM16_BASE + 0xC @ (TIM16/TIM17 DMA/interrupt enable register) 
        .equ TIM16_COMDE_Shift, 13   @ bitWidth 1 (COM DMA request enable)  
        .equ TIM16_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request enable)  
        .equ TIM16_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM16_BIE_Shift, 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM16_COMIE_Shift, 5   @ bitWidth 1 (COM interrupt enable)  
        .equ TIM16_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM16_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM16_SR, TIM16_BASE + 0x10 @ (TIM16/TIM17 status register) 
        .equ TIM16_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM16_BIF_Shift, 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM16_COMIF_Shift, 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM16_CC1IF_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt flag)  
        .equ TIM16_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM16_EGR, TIM16_BASE + 0x14 @ (TIM16/TIM17 event generation register) 
        .equ TIM16_BG_Shift, 7   @ bitWidth 1 (Break generation)  
        .equ TIM16_COMG_Shift, 5   @ bitWidth 1 (Capture/Compare control update generation)  
        .equ TIM16_CC1G_Shift, 1   @ bitWidth 1 (Capture/Compare 1 generation)  
        .equ TIM16_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM16_CCMR1_Output, TIM16_BASE + 0x18 @ (TIM16/TIM17 capture/compare mode register 1) 
        .equ TIM16_OC1M_3_Shift, 16   @ bitWidth 1 (OC1M)  
        .equ TIM16_OC1M_Shift, 4   @ bitWidth 3 (OC1M)  
        .equ TIM16_OC1PE_Shift, 3   @ bitWidth 1 (OC1PE)  
        .equ TIM16_OC1FE_Shift, 2   @ bitWidth 1 (OC1FE)  
        .equ TIM16_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM16_CCMR1_Input, TIM16_BASE + 0x18 @ (TIM16/TIM17 capture/compare mode register 1) 
        .equ TIM16_IC1F_Shift, 4   @ bitWidth 4 (IC1F)  
        .equ TIM16_IC1PSC_Shift, 2   @ bitWidth 2 (IC1PSC)  
        .equ TIM16_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM16_CCER, TIM16_BASE + 0x20 @ (TIM16/TIM17 capture/compare enable register) 
        .equ TIM16_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 complementary output polarity)  
        .equ TIM16_CC1NE_Shift, 2   @ bitWidth 1 (Capture/Compare 1 complementary output enable)  
        .equ TIM16_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output polarity)  
        .equ TIM16_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM16_CNT, TIM16_BASE + 0x24 @ (TIM16/TIM17 counter) 
        .equ TIM16_UIFCPYorRes_Shift, 31   @ bitWidth 1 (UIF Copy)  
        .equ TIM16_CNT_Shift, 0   @ bitWidth 16 (CNT)  
 
    .equ TIM16_PSC, TIM16_BASE + 0x28 @ (TIM16/TIM17 prescaler) 
        .equ TIM16_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM16_ARR, TIM16_BASE + 0x2C @ (TIM16/TIM17 auto-reload register) 
        .equ TIM16_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM16_RCR, TIM16_BASE + 0x30 @ (TIM16/TIM17 repetition counter register) 
        .equ TIM16_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM16_CCR1, TIM16_BASE + 0x34 @ (TIM16/TIM17 capture/compare register 1) 
        .equ TIM16_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM16_BDTR, TIM16_BASE + 0x44 @ (TIM16/TIM17 break and dead-time register) 
        .equ TIM16_BKBID_Shift, 28   @ bitWidth 1 (Break Bidirectional)  
        .equ TIM16_BKDSRM_Shift, 26   @ bitWidth 1 (Break Disarm)  
        .equ TIM16_BKF_Shift, 16   @ bitWidth 4 (Break filter)  
        .equ TIM16_MOE_Shift, 15   @ bitWidth 1 (Main output enable)  
        .equ TIM16_AOE_Shift, 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM16_BKP_Shift, 13   @ bitWidth 1 (Break polarity)  
        .equ TIM16_BKE_Shift, 12   @ bitWidth 1 (Break enable)  
        .equ TIM16_OSSR_Shift, 11   @ bitWidth 1 (Off-state selection for Run mode)  
        .equ TIM16_OSSI_Shift, 10   @ bitWidth 1 (Off-state selection for Idle mode)  
        .equ TIM16_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM16_DT_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 
    .equ TIM16_DCR, TIM16_BASE + 0x48 @ (TIM16/TIM17 DMA control register) 
        .equ TIM16_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM16_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM16_DMAR, TIM16_BASE + 0x4C @ (TIM16/TIM17 DMA address for full transfer) 
        .equ TIM16_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst accesses)  
 
    .equ TIM16_TIM16_OR1, TIM16_BASE + 0x50 @ (TIM16 option register 1) 
        .equ TIM16_TI1_RMP_Shift, 0   @ bitWidth 2 (Timer 17 input 1 connection)  
 
    .equ TIM16_TIM16_AF1, TIM16_BASE + 0x60 @ (TIM16 alternate function register 1) 
        .equ TIM16_BKCMP2P_Shift, 11   @ bitWidth 1 (BRK COMP2 input polarity)  
        .equ TIM16_BKCMP1P_Shift, 10   @ bitWidth 1 (BRK COMP1 input polarity)  
        .equ TIM16_BKINP_Shift, 9   @ bitWidth 1 (BRK BKIN input polarity)  
        .equ TIM16_BKCMP2E_Shift, 2   @ bitWidth 1 (BRK COMP2 enable)  
        .equ TIM16_BKCMP1E_Shift, 1   @ bitWidth 1 (BRK COMP1 enable)  
        .equ TIM16_BKINE_Shift, 0   @ bitWidth 1 (BRK BKIN input enable)  
 
    .equ TIM16_TIM16_TISEL, TIM16_BASE + 0x68 @ (TIM16 input selection register) 
        .equ TIM16_TISEL_Shift, 0   @ bitWidth 4 (TISEL)  
 

@=========================== TIM17 ===========================@
.equ TIM17_BASE, 0x40014800 @ (General-purpose timers) 
    .equ TIM17_CR1, TIM17_BASE + 0x0 @ (TIM16/TIM17 control register 1) 
        .equ TIM17_UIFREMAP_Shift, 11   @ bitWidth 1 (UIF status bit remapping)  
        .equ TIM17_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM17_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM17_OPM_Shift, 3   @ bitWidth 1 (One pulse mode)  
        .equ TIM17_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM17_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM17_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM17_CR2, TIM17_BASE + 0x4 @ (TIM16/TIM17 control register 2) 
        .equ TIM17_OIS1N_Shift, 9   @ bitWidth 1 (OIS1N)  
        .equ TIM17_OIS1_Shift, 8   @ bitWidth 1 (OIS1)  
        .equ TIM17_CCDS_Shift, 3   @ bitWidth 1 (CCDS)  
        .equ TIM17_CCUS_Shift, 2   @ bitWidth 1 (CCUS)  
        .equ TIM17_CCPC_Shift, 0   @ bitWidth 1 (CCPC)  
 
    .equ TIM17_DIER, TIM17_BASE + 0xC @ (TIM16/TIM17 DMA/interrupt enable register) 
        .equ TIM17_COMDE_Shift, 13   @ bitWidth 1 (COM DMA request enable)  
        .equ TIM17_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request enable)  
        .equ TIM17_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM17_BIE_Shift, 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM17_COMIE_Shift, 5   @ bitWidth 1 (COM interrupt enable)  
        .equ TIM17_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt enable)  
        .equ TIM17_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM17_SR, TIM17_BASE + 0x10 @ (TIM16/TIM17 status register) 
        .equ TIM17_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture flag)  
        .equ TIM17_BIF_Shift, 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM17_COMIF_Shift, 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM17_CC1IF_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt flag)  
        .equ TIM17_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM17_EGR, TIM17_BASE + 0x14 @ (TIM16/TIM17 event generation register) 
        .equ TIM17_BG_Shift, 7   @ bitWidth 1 (Break generation)  
        .equ TIM17_COMG_Shift, 5   @ bitWidth 1 (Capture/Compare control update generation)  
        .equ TIM17_CC1G_Shift, 1   @ bitWidth 1 (Capture/Compare 1 generation)  
        .equ TIM17_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM17_CCMR1_Output, TIM17_BASE + 0x18 @ (TIM16/TIM17 capture/compare mode register 1) 
        .equ TIM17_OC1M_3_Shift, 16   @ bitWidth 1 (OC1M)  
        .equ TIM17_OC1M_Shift, 4   @ bitWidth 3 (OC1M)  
        .equ TIM17_OC1PE_Shift, 3   @ bitWidth 1 (OC1PE)  
        .equ TIM17_OC1FE_Shift, 2   @ bitWidth 1 (OC1FE)  
        .equ TIM17_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM17_CCMR1_Input, TIM17_BASE + 0x18 @ (TIM16/TIM17 capture/compare mode register 1) 
        .equ TIM17_IC1F_Shift, 4   @ bitWidth 4 (IC1F)  
        .equ TIM17_IC1PSC_Shift, 2   @ bitWidth 2 (IC1PSC)  
        .equ TIM17_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM17_CCER, TIM17_BASE + 0x20 @ (TIM16/TIM17 capture/compare enable register) 
        .equ TIM17_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 complementary output polarity)  
        .equ TIM17_CC1NE_Shift, 2   @ bitWidth 1 (Capture/Compare 1 complementary output enable)  
        .equ TIM17_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output polarity)  
        .equ TIM17_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output enable)  
 
    .equ TIM17_CNT, TIM17_BASE + 0x24 @ (TIM16/TIM17 counter) 
        .equ TIM17_UIFCPYorRes_Shift, 31   @ bitWidth 1 (UIF Copy)  
        .equ TIM17_CNT_Shift, 0   @ bitWidth 16 (CNT)  
 
    .equ TIM17_PSC, TIM17_BASE + 0x28 @ (TIM16/TIM17 prescaler) 
        .equ TIM17_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM17_ARR, TIM17_BASE + 0x2C @ (TIM16/TIM17 auto-reload register) 
        .equ TIM17_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM17_RCR, TIM17_BASE + 0x30 @ (TIM16/TIM17 repetition counter register) 
        .equ TIM17_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM17_CCR1, TIM17_BASE + 0x34 @ (TIM16/TIM17 capture/compare register 1) 
        .equ TIM17_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM17_BDTR, TIM17_BASE + 0x44 @ (TIM16/TIM17 break and dead-time register) 
        .equ TIM17_BKBID_Shift, 28   @ bitWidth 1 (Break Bidirectional)  
        .equ TIM17_BKDSRM_Shift, 26   @ bitWidth 1 (Break Disarm)  
        .equ TIM17_BKF_Shift, 16   @ bitWidth 4 (Break filter)  
        .equ TIM17_MOE_Shift, 15   @ bitWidth 1 (Main output enable)  
        .equ TIM17_AOE_Shift, 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM17_BKP_Shift, 13   @ bitWidth 1 (Break polarity)  
        .equ TIM17_BKE_Shift, 12   @ bitWidth 1 (Break enable)  
        .equ TIM17_OSSR_Shift, 11   @ bitWidth 1 (Off-state selection for Run mode)  
        .equ TIM17_OSSI_Shift, 10   @ bitWidth 1 (Off-state selection for Idle mode)  
        .equ TIM17_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM17_DT_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 
    .equ TIM17_DCR, TIM17_BASE + 0x48 @ (TIM16/TIM17 DMA control register) 
        .equ TIM17_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM17_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM17_DMAR, TIM17_BASE + 0x4C @ (TIM16/TIM17 DMA address for full transfer) 
        .equ TIM17_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst accesses)  
 
    .equ TIM17_TIM17_OR1, TIM17_BASE + 0x50 @ (TIM17 option register 1) 
        .equ TIM17_TI1_RMP_Shift, 0   @ bitWidth 2 (Timer 17 input 1 connection)  
 
    .equ TIM17_TIM17_AF1, TIM17_BASE + 0x60 @ (TIM17 alternate function register 1) 
        .equ TIM17_BKCMP2P_Shift, 11   @ bitWidth 1 (BRK COMP2 input polarity)  
        .equ TIM17_BKCMP1P_Shift, 10   @ bitWidth 1 (BRK COMP1 input polarity)  
        .equ TIM17_BKINP_Shift, 9   @ bitWidth 1 (BRK BKIN input polarity)  
        .equ TIM17_BKCMP2E_Shift, 2   @ bitWidth 1 (BRK COMP2 enable)  
        .equ TIM17_BKCMP1E_Shift, 1   @ bitWidth 1 (BRK COMP1 enable)  
        .equ TIM17_BKINE_Shift, 0   @ bitWidth 1 (BRK BKIN input enable)  
 
    .equ TIM17_TIM17_TISEL, TIM17_BASE + 0x68 @ (TIM17 input selection register) 
        .equ TIM17_TISEL_Shift, 0   @ bitWidth 4 (TISEL)  
 

@=========================== USART1 ===========================@
.equ USART1_BASE, 0x40013800 @ (Universal synchronous asynchronous receiver transmitter) 
    .equ USART1_CR1, USART1_BASE + 0x0 @ (control register 1) 
        .equ USART1_RXFFIE_Shift, 31   @ bitWidth 1 (RXFIFO Full interrupt enable)  
        .equ USART1_TXFEIE_Shift, 30   @ bitWidth 1 (TXFIFO empty interrupt enable)  
        .equ USART1_FIFOEN_Shift, 29   @ bitWidth 1 (FIFO mode enable)  
        .equ USART1_M1_Shift, 28   @ bitWidth 1 (Word length)  
        .equ USART1_EOBIE_Shift, 27   @ bitWidth 1 (End of Block interrupt enable)  
        .equ USART1_RTOIE_Shift, 26   @ bitWidth 1 (Receiver timeout interrupt enable)  
        .equ USART1_DEAT4_Shift, 25   @ bitWidth 1 (Driver Enable assertion time)  
        .equ USART1_DEAT3_Shift, 24   @ bitWidth 1 (DEAT3)  
        .equ USART1_DEAT2_Shift, 23   @ bitWidth 1 (DEAT2)  
        .equ USART1_DEAT1_Shift, 22   @ bitWidth 1 (DEAT1)  
        .equ USART1_DEAT0_Shift, 21   @ bitWidth 1 (DEAT0)  
        .equ USART1_DEDT4_Shift, 20   @ bitWidth 1 (Driver Enable deassertion time)  
        .equ USART1_DEDT3_Shift, 19   @ bitWidth 1 (DEDT3)  
        .equ USART1_DEDT2_Shift, 18   @ bitWidth 1 (DEDT2)  
        .equ USART1_DEDT1_Shift, 17   @ bitWidth 1 (DEDT1)  
        .equ USART1_DEDT0_Shift, 16   @ bitWidth 1 (DEDT0)  
        .equ USART1_OVER8_Shift, 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART1_CMIE_Shift, 14   @ bitWidth 1 (Character match interrupt enable)  
        .equ USART1_MME_Shift, 13   @ bitWidth 1 (Mute mode enable)  
        .equ USART1_M_Shift, 12   @ bitWidth 1 (Word length)  
        .equ USART1_WAKE_Shift, 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ USART1_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ USART1_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ USART1_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART1_TXEIE_Shift, 7   @ bitWidth 1 (Transmit data register empty/TXFIFO not full interrupt enable)  
        .equ USART1_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt enable)  
        .equ USART1_RXNEIE_Shift, 5   @ bitWidth 1 (Receive data register not empty/RXFIFO not empty interrupt enable)  
        .equ USART1_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART1_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART1_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ USART1_UESM_Shift, 1   @ bitWidth 1 (USART enable in low-power mode)  
        .equ USART1_UE_Shift, 0   @ bitWidth 1 (USART enable)  
 
    .equ USART1_CR2, USART1_BASE + 0x4 @ (control register 2) 
        .equ USART1_ADD7_4_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ USART1_ADD3_0_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ USART1_RTOEN_Shift, 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ USART1_ABRMOD1_Shift, 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ USART1_ABRMOD0_Shift, 21   @ bitWidth 1 (ABRMOD0)  
        .equ USART1_ABREN_Shift, 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ USART1_MSBFIRST_Shift, 19   @ bitWidth 1 (Most significant bit first)  
        .equ USART1_DATAINV_Shift, 18   @ bitWidth 1 (Binary data inversion)  
        .equ USART1_TXINV_Shift, 17   @ bitWidth 1 (TX pin active level inversion)  
        .equ USART1_RXINV_Shift, 16   @ bitWidth 1 (RX pin active level inversion)  
        .equ USART1_SWAP_Shift, 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ USART1_LINEN_Shift, 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART1_STOP_Shift, 12   @ bitWidth 2 (stop bits)  
        .equ USART1_CLKEN_Shift, 11   @ bitWidth 1 (Clock enable)  
        .equ USART1_CPOL_Shift, 10   @ bitWidth 1 (Clock polarity)  
        .equ USART1_CPHA_Shift, 9   @ bitWidth 1 (Clock phase)  
        .equ USART1_LBCL_Shift, 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART1_LBDIE_Shift, 6   @ bitWidth 1 (LIN break detection interrupt enable)  
        .equ USART1_LBDL_Shift, 5   @ bitWidth 1 (LIN break detection length)  
        .equ USART1_ADDM7_Shift, 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address Detection)  
        .equ USART1_DIS_NSS_Shift, 3   @ bitWidth 1 (DIS_NSS)  
        .equ USART1_SLVEN_Shift, 0   @ bitWidth 1 (Synchronous Slave mode enable)  
 
    .equ USART1_CR3, USART1_BASE + 0x8 @ (control register 3) 
        .equ USART1_TXFTCFG_Shift, 29   @ bitWidth 3 (TXFIFO threshold configuration)  
        .equ USART1_RXFTIE_Shift, 28   @ bitWidth 1 (RXFIFO threshold interrupt enable)  
        .equ USART1_RXFTCFG_Shift, 25   @ bitWidth 3 (Receive FIFO threshold configuration)  
        .equ USART1_TCBGTIE_Shift, 24   @ bitWidth 1 (Transmission Complete before guard time, interrupt enable)  
        .equ USART1_TXFTIE_Shift, 23   @ bitWidth 1 (TXFIFO threshold interrupt enable)  
        .equ USART1_WUFIE_Shift, 22   @ bitWidth 1 (Wakeup from low-power mode interrupt enable)  
        .equ USART1_WUS_Shift, 20   @ bitWidth 2 (Wakeup from low-power mode interrupt flag selection)  
        .equ USART1_SCARCNT2_0_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ USART1_DEP_Shift, 15   @ bitWidth 1 (Driver enable polarity selection)  
        .equ USART1_DEM_Shift, 14   @ bitWidth 1 (Driver enable mode)  
        .equ USART1_DDRE_Shift, 13   @ bitWidth 1 (DMA Disable on Reception Error)  
        .equ USART1_OVRDIS_Shift, 12   @ bitWidth 1 (OVRDIS: Overrun Disable)  
        .equ USART1_ONEBIT_Shift, 11   @ bitWidth 1 (One sample bit method enable)  
        .equ USART1_CTSIE_Shift, 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART1_CTSE_Shift, 9   @ bitWidth 1 (CTS enable)  
        .equ USART1_RTSE_Shift, 8   @ bitWidth 1 (RTS enable)  
        .equ USART1_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART1_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART1_SCEN_Shift, 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART1_NACK_Shift, 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART1_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART1_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART1_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART1_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART1_BRR, USART1_BASE + 0xC @ (baud rate register) 
        .equ USART1_BRR_Shift, 0   @ bitWidth 16 (BRR)  
 
    .equ USART1_GTPR, USART1_BASE + 0x10 @ (guard time and prescaler register) 
        .equ USART1_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART1_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ USART1_RTOR, USART1_BASE + 0x14 @ (receiver timeout register) 
        .equ USART1_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ USART1_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ USART1_RQR, USART1_BASE + 0x18 @ (request register) 
        .equ USART1_TXFRQ_Shift, 4   @ bitWidth 1 (Transmit data flush request)  
        .equ USART1_RXFRQ_Shift, 3   @ bitWidth 1 (Receive data flush request)  
        .equ USART1_MMRQ_Shift, 2   @ bitWidth 1 (Mute mode request)  
        .equ USART1_SBKRQ_Shift, 1   @ bitWidth 1 (Send break request)  
        .equ USART1_ABRRQ_Shift, 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ USART1_ISR, USART1_BASE + 0x1C @ (interrupt and status register) 
        .equ USART1_TXFT_Shift, 27   @ bitWidth 1 (TXFT)  
        .equ USART1_RXFT_Shift, 26   @ bitWidth 1 (RXFT)  
        .equ USART1_TCBGT_Shift, 25   @ bitWidth 1 (TCBGT)  
        .equ USART1_RXFF_Shift, 24   @ bitWidth 1 (RXFF)  
        .equ USART1_TXFE_Shift, 23   @ bitWidth 1 (TXFE)  
        .equ USART1_REACK_Shift, 22   @ bitWidth 1 (REACK)  
        .equ USART1_TEACK_Shift, 21   @ bitWidth 1 (TEACK)  
        .equ USART1_WUF_Shift, 20   @ bitWidth 1 (WUF)  
        .equ USART1_RWU_Shift, 19   @ bitWidth 1 (RWU)  
        .equ USART1_SBKF_Shift, 18   @ bitWidth 1 (SBKF)  
        .equ USART1_CMF_Shift, 17   @ bitWidth 1 (CMF)  
        .equ USART1_BUSY_Shift, 16   @ bitWidth 1 (BUSY)  
        .equ USART1_ABRF_Shift, 15   @ bitWidth 1 (ABRF)  
        .equ USART1_ABRE_Shift, 14   @ bitWidth 1 (ABRE)  
        .equ USART1_UDR_Shift, 13   @ bitWidth 1 (UDR)  
        .equ USART1_EOBF_Shift, 12   @ bitWidth 1 (EOBF)  
        .equ USART1_RTOF_Shift, 11   @ bitWidth 1 (RTOF)  
        .equ USART1_CTS_Shift, 10   @ bitWidth 1 (CTS)  
        .equ USART1_CTSIF_Shift, 9   @ bitWidth 1 (CTSIF)  
        .equ USART1_LBDF_Shift, 8   @ bitWidth 1 (LBDF)  
        .equ USART1_TXE_Shift, 7   @ bitWidth 1 (TXE)  
        .equ USART1_TC_Shift, 6   @ bitWidth 1 (TC)  
        .equ USART1_RXNE_Shift, 5   @ bitWidth 1 (RXNE)  
        .equ USART1_IDLE_Shift, 4   @ bitWidth 1 (IDLE)  
        .equ USART1_ORE_Shift, 3   @ bitWidth 1 (ORE)  
        .equ USART1_NE_Shift, 2   @ bitWidth 1 (NE)  
        .equ USART1_FE_Shift, 1   @ bitWidth 1 (FE)  
        .equ USART1_PE_Shift, 0   @ bitWidth 1 (PE)  
 
    .equ USART1_ICR, USART1_BASE + 0x20 @ (interrupt flag clear register) 
        .equ USART1_WUCF_Shift, 20   @ bitWidth 1 (Wakeup from low-power mode clear flag)  
        .equ USART1_CMCF_Shift, 17   @ bitWidth 1 (Character match clear flag)  
        .equ USART1_UDRCF_Shift, 13   @ bitWidth 1 (SPI slave underrun clear flag)  
        .equ USART1_EOBCF_Shift, 12   @ bitWidth 1 (End of block clear flag)  
        .equ USART1_RTOCF_Shift, 11   @ bitWidth 1 (Receiver timeout clear flag)  
        .equ USART1_CTSCF_Shift, 9   @ bitWidth 1 (CTS clear flag)  
        .equ USART1_LBDCF_Shift, 8   @ bitWidth 1 (LIN break detection clear flag)  
        .equ USART1_TCBGTCF_Shift, 7   @ bitWidth 1 (Transmission complete before Guard time clear flag)  
        .equ USART1_TCCF_Shift, 6   @ bitWidth 1 (Transmission complete clear flag)  
        .equ USART1_TXFECF_Shift, 5   @ bitWidth 1 (TXFIFO empty clear flag)  
        .equ USART1_IDLECF_Shift, 4   @ bitWidth 1 (Idle line detected clear flag)  
        .equ USART1_ORECF_Shift, 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ USART1_NECF_Shift, 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ USART1_FECF_Shift, 1   @ bitWidth 1 (Framing error clear flag)  
        .equ USART1_PECF_Shift, 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ USART1_RDR, USART1_BASE + 0x24 @ (receive data register) 
        .equ USART1_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ USART1_TDR, USART1_BASE + 0x28 @ (transmit data register) 
        .equ USART1_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 
    .equ USART1_PRESC, USART1_BASE + 0x2C @ (prescaler register) 
        .equ USART1_PRESCALER_Shift, 0   @ bitWidth 4 (Clock prescaler)  
 

@=========================== USART2 ===========================@
.equ USART2_BASE, 0x40004400 @ (Universal synchronous asynchronous receiver transmitter) 
    .equ USART2_CR1, USART2_BASE + 0x0 @ (control register 1) 
        .equ USART2_RXFFIE_Shift, 31   @ bitWidth 1 (RXFIFO Full interrupt enable)  
        .equ USART2_TXFEIE_Shift, 30   @ bitWidth 1 (TXFIFO empty interrupt enable)  
        .equ USART2_FIFOEN_Shift, 29   @ bitWidth 1 (FIFO mode enable)  
        .equ USART2_M1_Shift, 28   @ bitWidth 1 (Word length)  
        .equ USART2_EOBIE_Shift, 27   @ bitWidth 1 (End of Block interrupt enable)  
        .equ USART2_RTOIE_Shift, 26   @ bitWidth 1 (Receiver timeout interrupt enable)  
        .equ USART2_DEAT4_Shift, 25   @ bitWidth 1 (Driver Enable assertion time)  
        .equ USART2_DEAT3_Shift, 24   @ bitWidth 1 (DEAT3)  
        .equ USART2_DEAT2_Shift, 23   @ bitWidth 1 (DEAT2)  
        .equ USART2_DEAT1_Shift, 22   @ bitWidth 1 (DEAT1)  
        .equ USART2_DEAT0_Shift, 21   @ bitWidth 1 (DEAT0)  
        .equ USART2_DEDT4_Shift, 20   @ bitWidth 1 (Driver Enable deassertion time)  
        .equ USART2_DEDT3_Shift, 19   @ bitWidth 1 (DEDT3)  
        .equ USART2_DEDT2_Shift, 18   @ bitWidth 1 (DEDT2)  
        .equ USART2_DEDT1_Shift, 17   @ bitWidth 1 (DEDT1)  
        .equ USART2_DEDT0_Shift, 16   @ bitWidth 1 (DEDT0)  
        .equ USART2_OVER8_Shift, 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART2_CMIE_Shift, 14   @ bitWidth 1 (Character match interrupt enable)  
        .equ USART2_MME_Shift, 13   @ bitWidth 1 (Mute mode enable)  
        .equ USART2_M_Shift, 12   @ bitWidth 1 (Word length)  
        .equ USART2_WAKE_Shift, 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ USART2_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ USART2_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ USART2_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART2_TXEIE_Shift, 7   @ bitWidth 1 (Transmit data register empty/TXFIFO not full interrupt enable)  
        .equ USART2_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt enable)  
        .equ USART2_RXNEIE_Shift, 5   @ bitWidth 1 (Receive data register not empty/RXFIFO not empty interrupt enable)  
        .equ USART2_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART2_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART2_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ USART2_UESM_Shift, 1   @ bitWidth 1 (USART enable in low-power mode)  
        .equ USART2_UE_Shift, 0   @ bitWidth 1 (USART enable)  
 
    .equ USART2_CR2, USART2_BASE + 0x4 @ (control register 2) 
        .equ USART2_ADD7_4_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ USART2_ADD3_0_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ USART2_RTOEN_Shift, 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ USART2_ABRMOD1_Shift, 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ USART2_ABRMOD0_Shift, 21   @ bitWidth 1 (ABRMOD0)  
        .equ USART2_ABREN_Shift, 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ USART2_MSBFIRST_Shift, 19   @ bitWidth 1 (Most significant bit first)  
        .equ USART2_DATAINV_Shift, 18   @ bitWidth 1 (Binary data inversion)  
        .equ USART2_TXINV_Shift, 17   @ bitWidth 1 (TX pin active level inversion)  
        .equ USART2_RXINV_Shift, 16   @ bitWidth 1 (RX pin active level inversion)  
        .equ USART2_SWAP_Shift, 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ USART2_LINEN_Shift, 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART2_STOP_Shift, 12   @ bitWidth 2 (stop bits)  
        .equ USART2_CLKEN_Shift, 11   @ bitWidth 1 (Clock enable)  
        .equ USART2_CPOL_Shift, 10   @ bitWidth 1 (Clock polarity)  
        .equ USART2_CPHA_Shift, 9   @ bitWidth 1 (Clock phase)  
        .equ USART2_LBCL_Shift, 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART2_LBDIE_Shift, 6   @ bitWidth 1 (LIN break detection interrupt enable)  
        .equ USART2_LBDL_Shift, 5   @ bitWidth 1 (LIN break detection length)  
        .equ USART2_ADDM7_Shift, 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address Detection)  
        .equ USART2_DIS_NSS_Shift, 3   @ bitWidth 1 (DIS_NSS)  
        .equ USART2_SLVEN_Shift, 0   @ bitWidth 1 (Synchronous Slave mode enable)  
 
    .equ USART2_CR3, USART2_BASE + 0x8 @ (control register 3) 
        .equ USART2_TXFTCFG_Shift, 29   @ bitWidth 3 (TXFIFO threshold configuration)  
        .equ USART2_RXFTIE_Shift, 28   @ bitWidth 1 (RXFIFO threshold interrupt enable)  
        .equ USART2_RXFTCFG_Shift, 25   @ bitWidth 3 (Receive FIFO threshold configuration)  
        .equ USART2_TCBGTIE_Shift, 24   @ bitWidth 1 (Transmission Complete before guard time, interrupt enable)  
        .equ USART2_TXFTIE_Shift, 23   @ bitWidth 1 (TXFIFO threshold interrupt enable)  
        .equ USART2_WUFIE_Shift, 22   @ bitWidth 1 (Wakeup from low-power mode interrupt enable)  
        .equ USART2_WUS_Shift, 20   @ bitWidth 2 (Wakeup from low-power mode interrupt flag selection)  
        .equ USART2_SCARCNT2_0_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ USART2_DEP_Shift, 15   @ bitWidth 1 (Driver enable polarity selection)  
        .equ USART2_DEM_Shift, 14   @ bitWidth 1 (Driver enable mode)  
        .equ USART2_DDRE_Shift, 13   @ bitWidth 1 (DMA Disable on Reception Error)  
        .equ USART2_OVRDIS_Shift, 12   @ bitWidth 1 (OVRDIS: Overrun Disable)  
        .equ USART2_ONEBIT_Shift, 11   @ bitWidth 1 (One sample bit method enable)  
        .equ USART2_CTSIE_Shift, 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART2_CTSE_Shift, 9   @ bitWidth 1 (CTS enable)  
        .equ USART2_RTSE_Shift, 8   @ bitWidth 1 (RTS enable)  
        .equ USART2_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART2_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART2_SCEN_Shift, 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART2_NACK_Shift, 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART2_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART2_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART2_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART2_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART2_BRR, USART2_BASE + 0xC @ (baud rate register) 
        .equ USART2_BRR_Shift, 0   @ bitWidth 16 (BRR)  
 
    .equ USART2_GTPR, USART2_BASE + 0x10 @ (guard time and prescaler register) 
        .equ USART2_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART2_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ USART2_RTOR, USART2_BASE + 0x14 @ (receiver timeout register) 
        .equ USART2_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ USART2_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ USART2_RQR, USART2_BASE + 0x18 @ (request register) 
        .equ USART2_TXFRQ_Shift, 4   @ bitWidth 1 (Transmit data flush request)  
        .equ USART2_RXFRQ_Shift, 3   @ bitWidth 1 (Receive data flush request)  
        .equ USART2_MMRQ_Shift, 2   @ bitWidth 1 (Mute mode request)  
        .equ USART2_SBKRQ_Shift, 1   @ bitWidth 1 (Send break request)  
        .equ USART2_ABRRQ_Shift, 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ USART2_ISR, USART2_BASE + 0x1C @ (interrupt and status register) 
        .equ USART2_TXFT_Shift, 27   @ bitWidth 1 (TXFT)  
        .equ USART2_RXFT_Shift, 26   @ bitWidth 1 (RXFT)  
        .equ USART2_TCBGT_Shift, 25   @ bitWidth 1 (TCBGT)  
        .equ USART2_RXFF_Shift, 24   @ bitWidth 1 (RXFF)  
        .equ USART2_TXFE_Shift, 23   @ bitWidth 1 (TXFE)  
        .equ USART2_REACK_Shift, 22   @ bitWidth 1 (REACK)  
        .equ USART2_TEACK_Shift, 21   @ bitWidth 1 (TEACK)  
        .equ USART2_WUF_Shift, 20   @ bitWidth 1 (WUF)  
        .equ USART2_RWU_Shift, 19   @ bitWidth 1 (RWU)  
        .equ USART2_SBKF_Shift, 18   @ bitWidth 1 (SBKF)  
        .equ USART2_CMF_Shift, 17   @ bitWidth 1 (CMF)  
        .equ USART2_BUSY_Shift, 16   @ bitWidth 1 (BUSY)  
        .equ USART2_ABRF_Shift, 15   @ bitWidth 1 (ABRF)  
        .equ USART2_ABRE_Shift, 14   @ bitWidth 1 (ABRE)  
        .equ USART2_UDR_Shift, 13   @ bitWidth 1 (UDR)  
        .equ USART2_EOBF_Shift, 12   @ bitWidth 1 (EOBF)  
        .equ USART2_RTOF_Shift, 11   @ bitWidth 1 (RTOF)  
        .equ USART2_CTS_Shift, 10   @ bitWidth 1 (CTS)  
        .equ USART2_CTSIF_Shift, 9   @ bitWidth 1 (CTSIF)  
        .equ USART2_LBDF_Shift, 8   @ bitWidth 1 (LBDF)  
        .equ USART2_TXE_Shift, 7   @ bitWidth 1 (TXE)  
        .equ USART2_TC_Shift, 6   @ bitWidth 1 (TC)  
        .equ USART2_RXNE_Shift, 5   @ bitWidth 1 (RXNE)  
        .equ USART2_IDLE_Shift, 4   @ bitWidth 1 (IDLE)  
        .equ USART2_ORE_Shift, 3   @ bitWidth 1 (ORE)  
        .equ USART2_NE_Shift, 2   @ bitWidth 1 (NE)  
        .equ USART2_FE_Shift, 1   @ bitWidth 1 (FE)  
        .equ USART2_PE_Shift, 0   @ bitWidth 1 (PE)  
 
    .equ USART2_ICR, USART2_BASE + 0x20 @ (interrupt flag clear register) 
        .equ USART2_WUCF_Shift, 20   @ bitWidth 1 (Wakeup from low-power mode clear flag)  
        .equ USART2_CMCF_Shift, 17   @ bitWidth 1 (Character match clear flag)  
        .equ USART2_UDRCF_Shift, 13   @ bitWidth 1 (SPI slave underrun clear flag)  
        .equ USART2_EOBCF_Shift, 12   @ bitWidth 1 (End of block clear flag)  
        .equ USART2_RTOCF_Shift, 11   @ bitWidth 1 (Receiver timeout clear flag)  
        .equ USART2_CTSCF_Shift, 9   @ bitWidth 1 (CTS clear flag)  
        .equ USART2_LBDCF_Shift, 8   @ bitWidth 1 (LIN break detection clear flag)  
        .equ USART2_TCBGTCF_Shift, 7   @ bitWidth 1 (Transmission complete before Guard time clear flag)  
        .equ USART2_TCCF_Shift, 6   @ bitWidth 1 (Transmission complete clear flag)  
        .equ USART2_TXFECF_Shift, 5   @ bitWidth 1 (TXFIFO empty clear flag)  
        .equ USART2_IDLECF_Shift, 4   @ bitWidth 1 (Idle line detected clear flag)  
        .equ USART2_ORECF_Shift, 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ USART2_NECF_Shift, 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ USART2_FECF_Shift, 1   @ bitWidth 1 (Framing error clear flag)  
        .equ USART2_PECF_Shift, 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ USART2_RDR, USART2_BASE + 0x24 @ (receive data register) 
        .equ USART2_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ USART2_TDR, USART2_BASE + 0x28 @ (transmit data register) 
        .equ USART2_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 
    .equ USART2_PRESC, USART2_BASE + 0x2C @ (prescaler register) 
        .equ USART2_PRESCALER_Shift, 0   @ bitWidth 4 (Clock prescaler)  
 

@=========================== VREFBUF ===========================@
.equ VREFBUF_BASE, 0x40010030 @ (Voltage reference buffer) 
    .equ VREFBUF_CSR, VREFBUF_BASE + 0x0 @ (control and status register) 
        .equ VREFBUF_VRR_Shift, 3   @ bitWidth 1 (Voltage reference buffer ready)  
        .equ VREFBUF_VRS_Shift, 2   @ bitWidth 1 (Voltage reference scale)  
        .equ VREFBUF_HIZ_Shift, 1   @ bitWidth 1 (High impedance mode)  
        .equ VREFBUF_ENVR_Shift, 0   @ bitWidth 1 (Voltage reference buffer mode enable)  
 
    .equ VREFBUF_CCR, VREFBUF_BASE + 0x4 @ (calibration control register) 
        .equ VREFBUF_TRIM_Shift, 0   @ bitWidth 6 (Trimming code)  
 

@=========================== WWDG ===========================@
.equ WWDG_BASE, 0x40002C00 @ (System window watchdog) 
    .equ WWDG_CR, WWDG_BASE + 0x0 @ (Control register) 
        .equ WWDG_WDGA_Shift, 7   @ bitWidth 1 (Activation bit)  
        .equ WWDG_T_Shift, 0   @ bitWidth 7 (7-bit counter MSB to LSB)  
 
    .equ WWDG_CFR, WWDG_BASE + 0x4 @ (Configuration register) 
        .equ WWDG_WDGTB_Shift, 11   @ bitWidth 3 (Timer base)  
        .equ WWDG_EWI_Shift, 9   @ bitWidth 1 (Early wakeup interrupt)  
        .equ WWDG_W_Shift, 0   @ bitWidth 7 (7-bit window value)  
 
    .equ WWDG_SR, WWDG_BASE + 0x8 @ (Status register) 
        .equ WWDG_EWIF_Shift, 0   @ bitWidth 1 (Early wakeup interrupt flag)  
 
